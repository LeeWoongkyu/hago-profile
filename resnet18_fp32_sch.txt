Compile...
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_8", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [1, 64, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [64, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 64) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_winograd_weight_transform.generic for op nn.contrib_conv2d_winograd_weight_transform
primfn(placeholder_1: handle, transform_weight_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_weight_transform", "tir.noalias": True}
  buffers = {transform_weight: Buffer(transform_weight_2: handle, float32, [6, 6, 64, 64], []),
             placeholder: Buffer(placeholder_2: handle, float32, [64, 64, 3, 3], [])}
  buffer_map = {placeholder_1: placeholder, transform_weight_1: transform_weight} {
  for (co: int32, 0, 64) "parallel" {
    for (ci: int32, 0, 64) {
      transform_weight_2[((co*64) + ci)] = 0f32
      transform_weight_2[(((co*64) + ci) + 4096)] = 0f32
      transform_weight_2[(((co*64) + ci) + 8192)] = 0f32
      transform_weight_2[(((co*64) + ci) + 12288)] = 0f32
      transform_weight_2[(((co*64) + ci) + 16384)] = 0f32
      transform_weight_2[(((co*64) + ci) + 20480)] = 0f32
      transform_weight_2[(((co*64) + ci) + 24576)] = 0f32
      transform_weight_2[(((co*64) + ci) + 28672)] = 0f32
      transform_weight_2[(((co*64) + ci) + 32768)] = 0f32
      transform_weight_2[(((co*64) + ci) + 36864)] = 0f32
      transform_weight_2[(((co*64) + ci) + 40960)] = 0f32
      transform_weight_2[(((co*64) + ci) + 45056)] = 0f32
      transform_weight_2[(((co*64) + ci) + 49152)] = 0f32
      transform_weight_2[(((co*64) + ci) + 53248)] = 0f32
      transform_weight_2[(((co*64) + ci) + 57344)] = 0f32
      transform_weight_2[(((co*64) + ci) + 61440)] = 0f32
      transform_weight_2[(((co*64) + ci) + 65536)] = 0f32
      transform_weight_2[(((co*64) + ci) + 69632)] = 0f32
      transform_weight_2[(((co*64) + ci) + 73728)] = 0f32
      transform_weight_2[(((co*64) + ci) + 77824)] = 0f32
      transform_weight_2[(((co*64) + ci) + 81920)] = 0f32
      transform_weight_2[(((co*64) + ci) + 86016)] = 0f32
      transform_weight_2[(((co*64) + ci) + 90112)] = 0f32
      transform_weight_2[(((co*64) + ci) + 94208)] = 0f32
      transform_weight_2[(((co*64) + ci) + 98304)] = 0f32
      transform_weight_2[(((co*64) + ci) + 102400)] = 0f32
      transform_weight_2[(((co*64) + ci) + 106496)] = 0f32
      transform_weight_2[(((co*64) + ci) + 110592)] = 0f32
      transform_weight_2[(((co*64) + ci) + 114688)] = 0f32
      transform_weight_2[(((co*64) + ci) + 118784)] = 0f32
      transform_weight_2[(((co*64) + ci) + 122880)] = 0f32
      transform_weight_2[(((co*64) + ci) + 126976)] = 0f32
      transform_weight_2[(((co*64) + ci) + 131072)] = 0f32
      transform_weight_2[(((co*64) + ci) + 135168)] = 0f32
      transform_weight_2[(((co*64) + ci) + 139264)] = 0f32
      transform_weight_2[(((co*64) + ci) + 143360)] = 0f32
      transform_weight_2[((co*64) + ci)] = ((float32*)transform_weight_2[((co*64) + ci)] + (float32*)placeholder_2[((co*576) + (ci*9))])
      transform_weight_2[(((co*64) + ci) + 4096)] = ((float32*)transform_weight_2[(((co*64) + ci) + 4096)] + ((float32*)placeholder_2[((co*576) + (ci*9))]*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 8192)] = ((float32*)transform_weight_2[(((co*64) + ci) + 8192)] + ((float32*)placeholder_2[((co*576) + (ci*9))]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 12288)] = ((float32*)transform_weight_2[(((co*64) + ci) + 12288)] + ((float32*)placeholder_2[((co*576) + (ci*9))]*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 16384)] = ((float32*)transform_weight_2[(((co*64) + ci) + 16384)] + ((float32*)placeholder_2[((co*576) + (ci*9))]*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 24576)] = ((float32*)transform_weight_2[(((co*64) + ci) + 24576)] + ((float32*)placeholder_2[((co*576) + (ci*9))]*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 28672)] = ((float32*)transform_weight_2[(((co*64) + ci) + 28672)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*-0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*64) + ci) + 32768)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*-0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 36864)] = ((float32*)transform_weight_2[(((co*64) + ci) + 36864)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*-0.333333f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 40960)] = ((float32*)transform_weight_2[(((co*64) + ci) + 40960)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*-0.333333f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 49152)] = ((float32*)transform_weight_2[(((co*64) + ci) + 49152)] + ((float32*)placeholder_2[((co*576) + (ci*9))]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 53248)] = ((float32*)transform_weight_2[(((co*64) + ci) + 53248)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 57344)] = ((float32*)transform_weight_2[(((co*64) + ci) + 57344)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 61440)] = ((float32*)transform_weight_2[(((co*64) + ci) + 61440)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*0.333333f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*64) + ci) + 65536)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*0.333333f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 73728)] = ((float32*)transform_weight_2[(((co*64) + ci) + 73728)] + ((float32*)placeholder_2[((co*576) + (ci*9))]*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 77824)] = ((float32*)transform_weight_2[(((co*64) + ci) + 77824)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*-1.06667f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*64) + ci) + 81920)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*-1.06667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 86016)] = ((float32*)transform_weight_2[(((co*64) + ci) + 86016)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*-1.06667f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 90112)] = ((float32*)transform_weight_2[(((co*64) + ci) + 90112)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*-1.06667f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*64) + ci) + 98304)] + ((float32*)placeholder_2[((co*576) + (ci*9))]*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 102400)] = ((float32*)transform_weight_2[(((co*64) + ci) + 102400)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*0.0666667f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 106496)] = ((float32*)transform_weight_2[(((co*64) + ci) + 106496)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*0.0666667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 110592)] = ((float32*)transform_weight_2[(((co*64) + ci) + 110592)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*0.0666667f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*64) + ci) + 114688)] + (((float32*)placeholder_2[((co*576) + (ci*9))]*0.0666667f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 4096)] = ((float32*)transform_weight_2[(((co*64) + ci) + 4096)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 8192)] = ((float32*)transform_weight_2[(((co*64) + ci) + 8192)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 12288)] = ((float32*)transform_weight_2[(((co*64) + ci) + 12288)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 16384)] = ((float32*)transform_weight_2[(((co*64) + ci) + 16384)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 28672)] = ((float32*)transform_weight_2[(((co*64) + ci) + 28672)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*-0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*64) + ci) + 32768)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*-0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 36864)] = ((float32*)transform_weight_2[(((co*64) + ci) + 36864)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*-0.333333f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 40960)] = ((float32*)transform_weight_2[(((co*64) + ci) + 40960)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*-0.333333f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 53248)] = ((float32*)transform_weight_2[(((co*64) + ci) + 53248)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 57344)] = ((float32*)transform_weight_2[(((co*64) + ci) + 57344)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 61440)] = ((float32*)transform_weight_2[(((co*64) + ci) + 61440)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*0.333333f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*64) + ci) + 65536)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*0.333333f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 77824)] = ((float32*)transform_weight_2[(((co*64) + ci) + 77824)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*-1.06667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*64) + ci) + 81920)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*-1.06667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 86016)] = ((float32*)transform_weight_2[(((co*64) + ci) + 86016)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*-1.06667f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 90112)] = ((float32*)transform_weight_2[(((co*64) + ci) + 90112)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*-1.06667f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 102400)] = ((float32*)transform_weight_2[(((co*64) + ci) + 102400)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*0.0666667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 106496)] = ((float32*)transform_weight_2[(((co*64) + ci) + 106496)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*0.0666667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 110592)] = ((float32*)transform_weight_2[(((co*64) + ci) + 110592)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*0.0666667f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*64) + ci) + 114688)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 1)]*0.0666667f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 4096)] = ((float32*)transform_weight_2[(((co*64) + ci) + 4096)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 8192)] = ((float32*)transform_weight_2[(((co*64) + ci) + 8192)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 12288)] = ((float32*)transform_weight_2[(((co*64) + ci) + 12288)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 16384)] = ((float32*)transform_weight_2[(((co*64) + ci) + 16384)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 20480)] = ((float32*)transform_weight_2[(((co*64) + ci) + 20480)] + (float32*)placeholder_2[(((co*576) + (ci*9)) + 2)])
      transform_weight_2[(((co*64) + ci) + 28672)] = ((float32*)transform_weight_2[(((co*64) + ci) + 28672)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*64) + ci) + 32768)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 36864)] = ((float32*)transform_weight_2[(((co*64) + ci) + 36864)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-0.333333f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 40960)] = ((float32*)transform_weight_2[(((co*64) + ci) + 40960)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-0.333333f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 45056)] = ((float32*)transform_weight_2[(((co*64) + ci) + 45056)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 53248)] = ((float32*)transform_weight_2[(((co*64) + ci) + 53248)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 57344)] = ((float32*)transform_weight_2[(((co*64) + ci) + 57344)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 61440)] = ((float32*)transform_weight_2[(((co*64) + ci) + 61440)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.333333f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*64) + ci) + 65536)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.333333f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 69632)] = ((float32*)transform_weight_2[(((co*64) + ci) + 69632)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 77824)] = ((float32*)transform_weight_2[(((co*64) + ci) + 77824)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-1.06667f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*64) + ci) + 81920)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-1.06667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 86016)] = ((float32*)transform_weight_2[(((co*64) + ci) + 86016)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-1.06667f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 90112)] = ((float32*)transform_weight_2[(((co*64) + ci) + 90112)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-1.06667f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 94208)] = ((float32*)transform_weight_2[(((co*64) + ci) + 94208)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 102400)] = ((float32*)transform_weight_2[(((co*64) + ci) + 102400)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.0666667f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 106496)] = ((float32*)transform_weight_2[(((co*64) + ci) + 106496)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.0666667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 110592)] = ((float32*)transform_weight_2[(((co*64) + ci) + 110592)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.0666667f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*64) + ci) + 114688)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.0666667f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 118784)] = ((float32*)transform_weight_2[(((co*64) + ci) + 118784)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 2)]*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 24576)] = ((float32*)transform_weight_2[(((co*64) + ci) + 24576)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 28672)] = ((float32*)transform_weight_2[(((co*64) + ci) + 28672)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*64) + ci) + 32768)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 36864)] = ((float32*)transform_weight_2[(((co*64) + ci) + 36864)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*0.333333f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 40960)] = ((float32*)transform_weight_2[(((co*64) + ci) + 40960)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*0.333333f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 49152)] = ((float32*)transform_weight_2[(((co*64) + ci) + 49152)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 53248)] = ((float32*)transform_weight_2[(((co*64) + ci) + 53248)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 57344)] = ((float32*)transform_weight_2[(((co*64) + ci) + 57344)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 61440)] = ((float32*)transform_weight_2[(((co*64) + ci) + 61440)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*0.333333f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*64) + ci) + 65536)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*0.333333f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 73728)] = ((float32*)transform_weight_2[(((co*64) + ci) + 73728)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 77824)] = ((float32*)transform_weight_2[(((co*64) + ci) + 77824)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*-0.533333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*64) + ci) + 81920)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*-0.533333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 86016)] = ((float32*)transform_weight_2[(((co*64) + ci) + 86016)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*-0.533333f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 90112)] = ((float32*)transform_weight_2[(((co*64) + ci) + 90112)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*-0.533333f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*64) + ci) + 98304)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 102400)] = ((float32*)transform_weight_2[(((co*64) + ci) + 102400)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*-0.133333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 106496)] = ((float32*)transform_weight_2[(((co*64) + ci) + 106496)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*-0.133333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 110592)] = ((float32*)transform_weight_2[(((co*64) + ci) + 110592)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*-0.133333f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*64) + ci) + 114688)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 3)]*-0.133333f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 28672)] = ((float32*)transform_weight_2[(((co*64) + ci) + 28672)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*64) + ci) + 32768)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 36864)] = ((float32*)transform_weight_2[(((co*64) + ci) + 36864)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*0.333333f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 40960)] = ((float32*)transform_weight_2[(((co*64) + ci) + 40960)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*0.333333f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 53248)] = ((float32*)transform_weight_2[(((co*64) + ci) + 53248)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 57344)] = ((float32*)transform_weight_2[(((co*64) + ci) + 57344)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 61440)] = ((float32*)transform_weight_2[(((co*64) + ci) + 61440)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*0.333333f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*64) + ci) + 65536)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*0.333333f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 77824)] = ((float32*)transform_weight_2[(((co*64) + ci) + 77824)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*-0.533333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*64) + ci) + 81920)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*-0.533333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 86016)] = ((float32*)transform_weight_2[(((co*64) + ci) + 86016)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*-0.533333f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 90112)] = ((float32*)transform_weight_2[(((co*64) + ci) + 90112)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*-0.533333f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 102400)] = ((float32*)transform_weight_2[(((co*64) + ci) + 102400)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*-0.133333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 106496)] = ((float32*)transform_weight_2[(((co*64) + ci) + 106496)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*-0.133333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 110592)] = ((float32*)transform_weight_2[(((co*64) + ci) + 110592)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*-0.133333f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*64) + ci) + 114688)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 4)]*-0.133333f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 28672)] = ((float32*)transform_weight_2[(((co*64) + ci) + 28672)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*64) + ci) + 32768)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 36864)] = ((float32*)transform_weight_2[(((co*64) + ci) + 36864)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*0.333333f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 40960)] = ((float32*)transform_weight_2[(((co*64) + ci) + 40960)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*0.333333f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 45056)] = ((float32*)transform_weight_2[(((co*64) + ci) + 45056)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 53248)] = ((float32*)transform_weight_2[(((co*64) + ci) + 53248)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 57344)] = ((float32*)transform_weight_2[(((co*64) + ci) + 57344)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 61440)] = ((float32*)transform_weight_2[(((co*64) + ci) + 61440)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*0.333333f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*64) + ci) + 65536)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*0.333333f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 69632)] = ((float32*)transform_weight_2[(((co*64) + ci) + 69632)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 77824)] = ((float32*)transform_weight_2[(((co*64) + ci) + 77824)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*-0.533333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*64) + ci) + 81920)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*-0.533333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 86016)] = ((float32*)transform_weight_2[(((co*64) + ci) + 86016)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*-0.533333f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 90112)] = ((float32*)transform_weight_2[(((co*64) + ci) + 90112)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*-0.533333f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 94208)] = ((float32*)transform_weight_2[(((co*64) + ci) + 94208)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 102400)] = ((float32*)transform_weight_2[(((co*64) + ci) + 102400)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*-0.133333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 106496)] = ((float32*)transform_weight_2[(((co*64) + ci) + 106496)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*-0.133333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 110592)] = ((float32*)transform_weight_2[(((co*64) + ci) + 110592)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*-0.133333f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*64) + ci) + 114688)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*-0.133333f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 118784)] = ((float32*)transform_weight_2[(((co*64) + ci) + 118784)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 5)]*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 24576)] = ((float32*)transform_weight_2[(((co*64) + ci) + 24576)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 28672)] = ((float32*)transform_weight_2[(((co*64) + ci) + 28672)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*64) + ci) + 32768)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 36864)] = ((float32*)transform_weight_2[(((co*64) + ci) + 36864)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.333333f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 40960)] = ((float32*)transform_weight_2[(((co*64) + ci) + 40960)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.333333f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 49152)] = ((float32*)transform_weight_2[(((co*64) + ci) + 49152)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 53248)] = ((float32*)transform_weight_2[(((co*64) + ci) + 53248)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 57344)] = ((float32*)transform_weight_2[(((co*64) + ci) + 57344)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 61440)] = ((float32*)transform_weight_2[(((co*64) + ci) + 61440)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.333333f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*64) + ci) + 65536)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.333333f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 73728)] = ((float32*)transform_weight_2[(((co*64) + ci) + 73728)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 77824)] = ((float32*)transform_weight_2[(((co*64) + ci) + 77824)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.266667f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*64) + ci) + 81920)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.266667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 86016)] = ((float32*)transform_weight_2[(((co*64) + ci) + 86016)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.266667f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 90112)] = ((float32*)transform_weight_2[(((co*64) + ci) + 90112)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.266667f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*64) + ci) + 98304)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 102400)] = ((float32*)transform_weight_2[(((co*64) + ci) + 102400)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.266667f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 106496)] = ((float32*)transform_weight_2[(((co*64) + ci) + 106496)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.266667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 110592)] = ((float32*)transform_weight_2[(((co*64) + ci) + 110592)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.266667f32)*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*64) + ci) + 114688)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.266667f32)*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 122880)] = ((float32*)transform_weight_2[(((co*64) + ci) + 122880)] + (float32*)placeholder_2[(((co*576) + (ci*9)) + 6)])
      transform_weight_2[(((co*64) + ci) + 126976)] = ((float32*)transform_weight_2[(((co*64) + ci) + 126976)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 131072)] = ((float32*)transform_weight_2[(((co*64) + ci) + 131072)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 135168)] = ((float32*)transform_weight_2[(((co*64) + ci) + 135168)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*-1.06667f32))
      transform_weight_2[(((co*64) + ci) + 139264)] = ((float32*)transform_weight_2[(((co*64) + ci) + 139264)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 6)]*0.0666667f32))
      transform_weight_2[(((co*64) + ci) + 28672)] = ((float32*)transform_weight_2[(((co*64) + ci) + 28672)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*-0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*64) + ci) + 32768)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*-0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 36864)] = ((float32*)transform_weight_2[(((co*64) + ci) + 36864)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*-0.333333f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 40960)] = ((float32*)transform_weight_2[(((co*64) + ci) + 40960)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*-0.333333f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 53248)] = ((float32*)transform_weight_2[(((co*64) + ci) + 53248)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 57344)] = ((float32*)transform_weight_2[(((co*64) + ci) + 57344)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 61440)] = ((float32*)transform_weight_2[(((co*64) + ci) + 61440)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*0.333333f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*64) + ci) + 65536)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*0.333333f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 77824)] = ((float32*)transform_weight_2[(((co*64) + ci) + 77824)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*-0.266667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*64) + ci) + 81920)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*-0.266667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 86016)] = ((float32*)transform_weight_2[(((co*64) + ci) + 86016)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*-0.266667f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 90112)] = ((float32*)transform_weight_2[(((co*64) + ci) + 90112)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*-0.266667f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 102400)] = ((float32*)transform_weight_2[(((co*64) + ci) + 102400)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*0.266667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 106496)] = ((float32*)transform_weight_2[(((co*64) + ci) + 106496)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*0.266667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 110592)] = ((float32*)transform_weight_2[(((co*64) + ci) + 110592)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*0.266667f32)*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*64) + ci) + 114688)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*0.266667f32)*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 126976)] = ((float32*)transform_weight_2[(((co*64) + ci) + 126976)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 131072)] = ((float32*)transform_weight_2[(((co*64) + ci) + 131072)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 135168)] = ((float32*)transform_weight_2[(((co*64) + ci) + 135168)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*-0.533333f32))
      transform_weight_2[(((co*64) + ci) + 139264)] = ((float32*)transform_weight_2[(((co*64) + ci) + 139264)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 7)]*-0.133333f32))
      transform_weight_2[(((co*64) + ci) + 28672)] = ((float32*)transform_weight_2[(((co*64) + ci) + 28672)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*64) + ci) + 32768)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 36864)] = ((float32*)transform_weight_2[(((co*64) + ci) + 36864)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.333333f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 40960)] = ((float32*)transform_weight_2[(((co*64) + ci) + 40960)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.333333f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 45056)] = ((float32*)transform_weight_2[(((co*64) + ci) + 45056)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 53248)] = ((float32*)transform_weight_2[(((co*64) + ci) + 53248)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.333333f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 57344)] = ((float32*)transform_weight_2[(((co*64) + ci) + 57344)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.333333f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 61440)] = ((float32*)transform_weight_2[(((co*64) + ci) + 61440)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.333333f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*64) + ci) + 65536)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.333333f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 69632)] = ((float32*)transform_weight_2[(((co*64) + ci) + 69632)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 77824)] = ((float32*)transform_weight_2[(((co*64) + ci) + 77824)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.266667f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*64) + ci) + 81920)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.266667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 86016)] = ((float32*)transform_weight_2[(((co*64) + ci) + 86016)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.266667f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 90112)] = ((float32*)transform_weight_2[(((co*64) + ci) + 90112)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.266667f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 94208)] = ((float32*)transform_weight_2[(((co*64) + ci) + 94208)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 102400)] = ((float32*)transform_weight_2[(((co*64) + ci) + 102400)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.266667f32)*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 106496)] = ((float32*)transform_weight_2[(((co*64) + ci) + 106496)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.266667f32)*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 110592)] = ((float32*)transform_weight_2[(((co*64) + ci) + 110592)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.266667f32)*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*64) + ci) + 114688)] + (((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.266667f32)*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 118784)] = ((float32*)transform_weight_2[(((co*64) + ci) + 118784)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 126976)] = ((float32*)transform_weight_2[(((co*64) + ci) + 126976)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.333333f32))
      transform_weight_2[(((co*64) + ci) + 131072)] = ((float32*)transform_weight_2[(((co*64) + ci) + 131072)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.333333f32))
      transform_weight_2[(((co*64) + ci) + 135168)] = ((float32*)transform_weight_2[(((co*64) + ci) + 135168)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*-0.266667f32))
      transform_weight_2[(((co*64) + ci) + 139264)] = ((float32*)transform_weight_2[(((co*64) + ci) + 139264)] + ((float32*)placeholder_2[(((co*576) + (ci*9)) + 8)]*0.266667f32))
      transform_weight_2[(((co*64) + ci) + 143360)] = ((float32*)transform_weight_2[(((co*64) + ci) + 143360)] + (float32*)placeholder_2[(((co*576) + (ci*9)) + 8)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op transpose
primfn(placeholder_1: handle, T_transpose_1: handle) -> ()
  attr = {"global_symbol": "fused_transpose", "tir.noalias": True}
  buffers = {T_transpose: Buffer(T_transpose_2: handle, float32, [6, 6, 64, 64], []),
             placeholder: Buffer(placeholder_2: handle, float32, [6, 6, 64, 64], [])}
  buffer_map = {placeholder_1: placeholder, T_transpose_1: T_transpose} {
  for (ax0.ax1.fused: int32, 0, 36) "parallel" {
    for (ax2: int32, 0, 64) {
      for (ax3.outer: int32, 0, 4) {
        T_transpose_2[ramp((((ax0.ax1.fused*4096) + (ax2*64)) + (ax3.outer*16)), 1, 16)] = (float32x16*)placeholder_2[ramp((((ax0.ax1.fused*4096) + (ax3.outer*1024)) + ax2), 64, 16)]
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_9", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [1, 128, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [128, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 128) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_winograd_weight_transform.generic for op nn.contrib_conv2d_winograd_weight_transform
primfn(placeholder_1: handle, transform_weight_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_weight_transform_1", "tir.noalias": True}
  buffers = {transform_weight: Buffer(transform_weight_2: handle, float32, [4, 4, 128, 128], []),
             placeholder: Buffer(placeholder_2: handle, float32, [128, 128, 3, 3], [])}
  buffer_map = {placeholder_1: placeholder, transform_weight_1: transform_weight} {
  for (co: int32, 0, 128) "parallel" {
    for (ci: int32, 0, 128) {
      transform_weight_2[((co*128) + ci)] = 0f32
      transform_weight_2[(((co*128) + ci) + 16384)] = 0f32
      transform_weight_2[(((co*128) + ci) + 32768)] = 0f32
      transform_weight_2[(((co*128) + ci) + 49152)] = 0f32
      transform_weight_2[(((co*128) + ci) + 65536)] = 0f32
      transform_weight_2[(((co*128) + ci) + 81920)] = 0f32
      transform_weight_2[(((co*128) + ci) + 98304)] = 0f32
      transform_weight_2[(((co*128) + ci) + 114688)] = 0f32
      transform_weight_2[(((co*128) + ci) + 131072)] = 0f32
      transform_weight_2[(((co*128) + ci) + 147456)] = 0f32
      transform_weight_2[(((co*128) + ci) + 163840)] = 0f32
      transform_weight_2[(((co*128) + ci) + 180224)] = 0f32
      transform_weight_2[(((co*128) + ci) + 196608)] = 0f32
      transform_weight_2[(((co*128) + ci) + 212992)] = 0f32
      transform_weight_2[(((co*128) + ci) + 229376)] = 0f32
      transform_weight_2[(((co*128) + ci) + 245760)] = 0f32
      transform_weight_2[((co*128) + ci)] = ((float32*)transform_weight_2[((co*128) + ci)] + (float32*)placeholder_2[((co*1152) + (ci*9))])
      transform_weight_2[(((co*128) + ci) + 16384)] = ((float32*)transform_weight_2[(((co*128) + ci) + 16384)] + ((float32*)placeholder_2[((co*1152) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*128) + ci) + 32768)] + ((float32*)placeholder_2[((co*1152) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*128) + ci) + 65536)] + ((float32*)placeholder_2[((co*1152) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*128) + ci) + 81920)] + (((float32*)placeholder_2[((co*1152) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*128) + ci) + 98304)] + (((float32*)placeholder_2[((co*1152) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 131072)] = ((float32*)transform_weight_2[(((co*128) + ci) + 131072)] + ((float32*)placeholder_2[((co*1152) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 147456)] = ((float32*)transform_weight_2[(((co*128) + ci) + 147456)] + (((float32*)placeholder_2[((co*1152) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 163840)] = ((float32*)transform_weight_2[(((co*128) + ci) + 163840)] + (((float32*)placeholder_2[((co*1152) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 16384)] = ((float32*)transform_weight_2[(((co*128) + ci) + 16384)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 1)]*-0.5f32))
      transform_weight_2[(((co*128) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*128) + ci) + 32768)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 1)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*128) + ci) + 81920)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 1)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*128) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*128) + ci) + 98304)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 1)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 147456)] = ((float32*)transform_weight_2[(((co*128) + ci) + 147456)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 1)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*128) + ci) + 163840)] = ((float32*)transform_weight_2[(((co*128) + ci) + 163840)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 1)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 16384)] = ((float32*)transform_weight_2[(((co*128) + ci) + 16384)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 32768)] = ((float32*)transform_weight_2[(((co*128) + ci) + 32768)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 49152)] = ((float32*)transform_weight_2[(((co*128) + ci) + 49152)] + (float32*)placeholder_2[(((co*1152) + (ci*9)) + 2)])
      transform_weight_2[(((co*128) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*128) + ci) + 81920)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*128) + ci) + 98304)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*128) + ci) + 114688)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 147456)] = ((float32*)transform_weight_2[(((co*128) + ci) + 147456)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 163840)] = ((float32*)transform_weight_2[(((co*128) + ci) + 163840)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 180224)] = ((float32*)transform_weight_2[(((co*128) + ci) + 180224)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*128) + ci) + 65536)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 3)]*-0.5f32))
      transform_weight_2[(((co*128) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*128) + ci) + 81920)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 3)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*128) + ci) + 98304)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 3)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 131072)] = ((float32*)transform_weight_2[(((co*128) + ci) + 131072)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 3)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 147456)] = ((float32*)transform_weight_2[(((co*128) + ci) + 147456)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 3)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 163840)] = ((float32*)transform_weight_2[(((co*128) + ci) + 163840)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 3)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*128) + ci) + 81920)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 4)]*-0.5f32)*-0.5f32))
      transform_weight_2[(((co*128) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*128) + ci) + 98304)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 4)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 147456)] = ((float32*)transform_weight_2[(((co*128) + ci) + 147456)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 4)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*128) + ci) + 163840)] = ((float32*)transform_weight_2[(((co*128) + ci) + 163840)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 4)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*128) + ci) + 81920)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 5)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*128) + ci) + 98304)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 5)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*128) + ci) + 114688)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 5)]*-0.5f32))
      transform_weight_2[(((co*128) + ci) + 147456)] = ((float32*)transform_weight_2[(((co*128) + ci) + 147456)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 5)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 163840)] = ((float32*)transform_weight_2[(((co*128) + ci) + 163840)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 5)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 180224)] = ((float32*)transform_weight_2[(((co*128) + ci) + 180224)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 5)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*128) + ci) + 65536)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*128) + ci) + 81920)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*128) + ci) + 98304)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 131072)] = ((float32*)transform_weight_2[(((co*128) + ci) + 131072)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 147456)] = ((float32*)transform_weight_2[(((co*128) + ci) + 147456)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 163840)] = ((float32*)transform_weight_2[(((co*128) + ci) + 163840)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 196608)] = ((float32*)transform_weight_2[(((co*128) + ci) + 196608)] + (float32*)placeholder_2[(((co*1152) + (ci*9)) + 6)])
      transform_weight_2[(((co*128) + ci) + 212992)] = ((float32*)transform_weight_2[(((co*128) + ci) + 212992)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 229376)] = ((float32*)transform_weight_2[(((co*128) + ci) + 229376)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*128) + ci) + 81920)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 7)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*128) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*128) + ci) + 98304)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 7)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 147456)] = ((float32*)transform_weight_2[(((co*128) + ci) + 147456)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 7)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*128) + ci) + 163840)] = ((float32*)transform_weight_2[(((co*128) + ci) + 163840)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 7)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 212992)] = ((float32*)transform_weight_2[(((co*128) + ci) + 212992)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 7)]*-0.5f32))
      transform_weight_2[(((co*128) + ci) + 229376)] = ((float32*)transform_weight_2[(((co*128) + ci) + 229376)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 7)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 81920)] = ((float32*)transform_weight_2[(((co*128) + ci) + 81920)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 98304)] = ((float32*)transform_weight_2[(((co*128) + ci) + 98304)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 114688)] = ((float32*)transform_weight_2[(((co*128) + ci) + 114688)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 147456)] = ((float32*)transform_weight_2[(((co*128) + ci) + 147456)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 163840)] = ((float32*)transform_weight_2[(((co*128) + ci) + 163840)] + (((float32*)placeholder_2[(((co*1152) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*128) + ci) + 180224)] = ((float32*)transform_weight_2[(((co*128) + ci) + 180224)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 212992)] = ((float32*)transform_weight_2[(((co*128) + ci) + 212992)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 229376)] = ((float32*)transform_weight_2[(((co*128) + ci) + 229376)] + ((float32*)placeholder_2[(((co*1152) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*128) + ci) + 245760)] = ((float32*)transform_weight_2[(((co*128) + ci) + 245760)] + (float32*)placeholder_2[(((co*1152) + (ci*9)) + 8)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op transpose
primfn(placeholder_1: handle, T_transpose_1: handle) -> ()
  attr = {"global_symbol": "fused_transpose_1", "tir.noalias": True}
  buffers = {T_transpose: Buffer(T_transpose_2: handle, float32, [4, 4, 128, 128], []),
             placeholder: Buffer(placeholder_2: handle, float32, [4, 4, 128, 128], [])}
  buffer_map = {placeholder_1: placeholder, T_transpose_1: T_transpose} {
  for (ax0.ax1.fused: int32, 0, 16) "parallel" {
    for (ax2: int32, 0, 128) {
      for (ax3.outer: int32, 0, 8) {
        T_transpose_2[ramp((((ax0.ax1.fused*16384) + (ax2*128)) + (ax3.outer*16)), 1, 16)] = (float32x16*)placeholder_2[ramp((((ax0.ax1.fused*16384) + (ax3.outer*2048)) + ax2), 128, 16)]
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_10", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [1, 256, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [256, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 256) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_winograd_weight_transform.generic for op nn.contrib_conv2d_winograd_weight_transform
primfn(placeholder_1: handle, transform_weight_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_weight_transform_2", "tir.noalias": True}
  buffers = {transform_weight: Buffer(transform_weight_2: handle, float32, [4, 4, 256, 256], []),
             placeholder: Buffer(placeholder_2: handle, float32, [256, 256, 3, 3], [])}
  buffer_map = {placeholder_1: placeholder, transform_weight_1: transform_weight} {
  for (co: int32, 0, 256) "parallel" {
    for (ci: int32, 0, 256) {
      transform_weight_2[((co*256) + ci)] = 0f32
      transform_weight_2[(((co*256) + ci) + 65536)] = 0f32
      transform_weight_2[(((co*256) + ci) + 131072)] = 0f32
      transform_weight_2[(((co*256) + ci) + 196608)] = 0f32
      transform_weight_2[(((co*256) + ci) + 262144)] = 0f32
      transform_weight_2[(((co*256) + ci) + 327680)] = 0f32
      transform_weight_2[(((co*256) + ci) + 393216)] = 0f32
      transform_weight_2[(((co*256) + ci) + 458752)] = 0f32
      transform_weight_2[(((co*256) + ci) + 524288)] = 0f32
      transform_weight_2[(((co*256) + ci) + 589824)] = 0f32
      transform_weight_2[(((co*256) + ci) + 655360)] = 0f32
      transform_weight_2[(((co*256) + ci) + 720896)] = 0f32
      transform_weight_2[(((co*256) + ci) + 786432)] = 0f32
      transform_weight_2[(((co*256) + ci) + 851968)] = 0f32
      transform_weight_2[(((co*256) + ci) + 917504)] = 0f32
      transform_weight_2[(((co*256) + ci) + 983040)] = 0f32
      transform_weight_2[((co*256) + ci)] = ((float32*)transform_weight_2[((co*256) + ci)] + (float32*)placeholder_2[((co*2304) + (ci*9))])
      transform_weight_2[(((co*256) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*256) + ci) + 65536)] + ((float32*)placeholder_2[((co*2304) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 131072)] = ((float32*)transform_weight_2[(((co*256) + ci) + 131072)] + ((float32*)placeholder_2[((co*2304) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 262144)] = ((float32*)transform_weight_2[(((co*256) + ci) + 262144)] + ((float32*)placeholder_2[((co*2304) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 327680)] = ((float32*)transform_weight_2[(((co*256) + ci) + 327680)] + (((float32*)placeholder_2[((co*2304) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 393216)] = ((float32*)transform_weight_2[(((co*256) + ci) + 393216)] + (((float32*)placeholder_2[((co*2304) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 524288)] = ((float32*)transform_weight_2[(((co*256) + ci) + 524288)] + ((float32*)placeholder_2[((co*2304) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 589824)] = ((float32*)transform_weight_2[(((co*256) + ci) + 589824)] + (((float32*)placeholder_2[((co*2304) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 655360)] = ((float32*)transform_weight_2[(((co*256) + ci) + 655360)] + (((float32*)placeholder_2[((co*2304) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*256) + ci) + 65536)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 1)]*-0.5f32))
      transform_weight_2[(((co*256) + ci) + 131072)] = ((float32*)transform_weight_2[(((co*256) + ci) + 131072)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 1)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 327680)] = ((float32*)transform_weight_2[(((co*256) + ci) + 327680)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 1)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*256) + ci) + 393216)] = ((float32*)transform_weight_2[(((co*256) + ci) + 393216)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 1)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 589824)] = ((float32*)transform_weight_2[(((co*256) + ci) + 589824)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 1)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*256) + ci) + 655360)] = ((float32*)transform_weight_2[(((co*256) + ci) + 655360)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 1)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 65536)] = ((float32*)transform_weight_2[(((co*256) + ci) + 65536)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 131072)] = ((float32*)transform_weight_2[(((co*256) + ci) + 131072)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 196608)] = ((float32*)transform_weight_2[(((co*256) + ci) + 196608)] + (float32*)placeholder_2[(((co*2304) + (ci*9)) + 2)])
      transform_weight_2[(((co*256) + ci) + 327680)] = ((float32*)transform_weight_2[(((co*256) + ci) + 327680)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 393216)] = ((float32*)transform_weight_2[(((co*256) + ci) + 393216)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 458752)] = ((float32*)transform_weight_2[(((co*256) + ci) + 458752)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 589824)] = ((float32*)transform_weight_2[(((co*256) + ci) + 589824)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 655360)] = ((float32*)transform_weight_2[(((co*256) + ci) + 655360)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 720896)] = ((float32*)transform_weight_2[(((co*256) + ci) + 720896)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 262144)] = ((float32*)transform_weight_2[(((co*256) + ci) + 262144)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 3)]*-0.5f32))
      transform_weight_2[(((co*256) + ci) + 327680)] = ((float32*)transform_weight_2[(((co*256) + ci) + 327680)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 3)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 393216)] = ((float32*)transform_weight_2[(((co*256) + ci) + 393216)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 3)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 524288)] = ((float32*)transform_weight_2[(((co*256) + ci) + 524288)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 3)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 589824)] = ((float32*)transform_weight_2[(((co*256) + ci) + 589824)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 3)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 655360)] = ((float32*)transform_weight_2[(((co*256) + ci) + 655360)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 3)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 327680)] = ((float32*)transform_weight_2[(((co*256) + ci) + 327680)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 4)]*-0.5f32)*-0.5f32))
      transform_weight_2[(((co*256) + ci) + 393216)] = ((float32*)transform_weight_2[(((co*256) + ci) + 393216)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 4)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 589824)] = ((float32*)transform_weight_2[(((co*256) + ci) + 589824)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 4)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*256) + ci) + 655360)] = ((float32*)transform_weight_2[(((co*256) + ci) + 655360)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 4)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 327680)] = ((float32*)transform_weight_2[(((co*256) + ci) + 327680)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 5)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 393216)] = ((float32*)transform_weight_2[(((co*256) + ci) + 393216)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 5)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 458752)] = ((float32*)transform_weight_2[(((co*256) + ci) + 458752)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 5)]*-0.5f32))
      transform_weight_2[(((co*256) + ci) + 589824)] = ((float32*)transform_weight_2[(((co*256) + ci) + 589824)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 5)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 655360)] = ((float32*)transform_weight_2[(((co*256) + ci) + 655360)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 5)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 720896)] = ((float32*)transform_weight_2[(((co*256) + ci) + 720896)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 5)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 262144)] = ((float32*)transform_weight_2[(((co*256) + ci) + 262144)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 327680)] = ((float32*)transform_weight_2[(((co*256) + ci) + 327680)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 393216)] = ((float32*)transform_weight_2[(((co*256) + ci) + 393216)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 524288)] = ((float32*)transform_weight_2[(((co*256) + ci) + 524288)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 589824)] = ((float32*)transform_weight_2[(((co*256) + ci) + 589824)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 655360)] = ((float32*)transform_weight_2[(((co*256) + ci) + 655360)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 786432)] = ((float32*)transform_weight_2[(((co*256) + ci) + 786432)] + (float32*)placeholder_2[(((co*2304) + (ci*9)) + 6)])
      transform_weight_2[(((co*256) + ci) + 851968)] = ((float32*)transform_weight_2[(((co*256) + ci) + 851968)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 917504)] = ((float32*)transform_weight_2[(((co*256) + ci) + 917504)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 327680)] = ((float32*)transform_weight_2[(((co*256) + ci) + 327680)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 7)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*256) + ci) + 393216)] = ((float32*)transform_weight_2[(((co*256) + ci) + 393216)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 7)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 589824)] = ((float32*)transform_weight_2[(((co*256) + ci) + 589824)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 7)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*256) + ci) + 655360)] = ((float32*)transform_weight_2[(((co*256) + ci) + 655360)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 7)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 851968)] = ((float32*)transform_weight_2[(((co*256) + ci) + 851968)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 7)]*-0.5f32))
      transform_weight_2[(((co*256) + ci) + 917504)] = ((float32*)transform_weight_2[(((co*256) + ci) + 917504)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 7)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 327680)] = ((float32*)transform_weight_2[(((co*256) + ci) + 327680)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 393216)] = ((float32*)transform_weight_2[(((co*256) + ci) + 393216)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 458752)] = ((float32*)transform_weight_2[(((co*256) + ci) + 458752)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 589824)] = ((float32*)transform_weight_2[(((co*256) + ci) + 589824)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 655360)] = ((float32*)transform_weight_2[(((co*256) + ci) + 655360)] + (((float32*)placeholder_2[(((co*2304) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*256) + ci) + 720896)] = ((float32*)transform_weight_2[(((co*256) + ci) + 720896)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 851968)] = ((float32*)transform_weight_2[(((co*256) + ci) + 851968)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 917504)] = ((float32*)transform_weight_2[(((co*256) + ci) + 917504)] + ((float32*)placeholder_2[(((co*2304) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*256) + ci) + 983040)] = ((float32*)transform_weight_2[(((co*256) + ci) + 983040)] + (float32*)placeholder_2[(((co*2304) + (ci*9)) + 8)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op transpose
primfn(placeholder_1: handle, T_transpose_1: handle) -> ()
  attr = {"global_symbol": "fused_transpose_2", "tir.noalias": True}
  buffers = {T_transpose: Buffer(T_transpose_2: handle, float32, [4, 4, 256, 256], []),
             placeholder: Buffer(placeholder_2: handle, float32, [4, 4, 256, 256], [])}
  buffer_map = {placeholder_1: placeholder, T_transpose_1: T_transpose} {
  for (ax0.ax1.fused: int32, 0, 16) "parallel" {
    for (ax2: int32, 0, 256) {
      for (ax3.outer: int32, 0, 16) {
        T_transpose_2[ramp((((ax0.ax1.fused*65536) + (ax2*256)) + (ax3.outer*16)), 1, 16)] = (float32x16*)placeholder_2[ramp((((ax0.ax1.fused*65536) + (ax3.outer*4096)) + ax2), 256, 16)]
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_11", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [1, 512, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [512, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 512) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_winograd_weight_transform.generic for op nn.contrib_conv2d_winograd_weight_transform
primfn(placeholder_1: handle, transform_weight_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_weight_transform_3", "tir.noalias": True}
  buffers = {transform_weight: Buffer(transform_weight_2: handle, float32, [4, 4, 512, 512], []),
             placeholder: Buffer(placeholder_2: handle, float32, [512, 512, 3, 3], [])}
  buffer_map = {placeholder_1: placeholder, transform_weight_1: transform_weight} {
  for (co: int32, 0, 512) "parallel" {
    for (ci: int32, 0, 512) {
      transform_weight_2[((co*512) + ci)] = 0f32
      transform_weight_2[(((co*512) + ci) + 262144)] = 0f32
      transform_weight_2[(((co*512) + ci) + 524288)] = 0f32
      transform_weight_2[(((co*512) + ci) + 786432)] = 0f32
      transform_weight_2[(((co*512) + ci) + 1048576)] = 0f32
      transform_weight_2[(((co*512) + ci) + 1310720)] = 0f32
      transform_weight_2[(((co*512) + ci) + 1572864)] = 0f32
      transform_weight_2[(((co*512) + ci) + 1835008)] = 0f32
      transform_weight_2[(((co*512) + ci) + 2097152)] = 0f32
      transform_weight_2[(((co*512) + ci) + 2359296)] = 0f32
      transform_weight_2[(((co*512) + ci) + 2621440)] = 0f32
      transform_weight_2[(((co*512) + ci) + 2883584)] = 0f32
      transform_weight_2[(((co*512) + ci) + 3145728)] = 0f32
      transform_weight_2[(((co*512) + ci) + 3407872)] = 0f32
      transform_weight_2[(((co*512) + ci) + 3670016)] = 0f32
      transform_weight_2[(((co*512) + ci) + 3932160)] = 0f32
      transform_weight_2[((co*512) + ci)] = ((float32*)transform_weight_2[((co*512) + ci)] + (float32*)placeholder_2[((co*4608) + (ci*9))])
      transform_weight_2[(((co*512) + ci) + 262144)] = ((float32*)transform_weight_2[(((co*512) + ci) + 262144)] + ((float32*)placeholder_2[((co*4608) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 524288)] = ((float32*)transform_weight_2[(((co*512) + ci) + 524288)] + ((float32*)placeholder_2[((co*4608) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1048576)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1048576)] + ((float32*)placeholder_2[((co*4608) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1310720)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1310720)] + (((float32*)placeholder_2[((co*4608) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1572864)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1572864)] + (((float32*)placeholder_2[((co*4608) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2097152)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2097152)] + ((float32*)placeholder_2[((co*4608) + (ci*9))]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2359296)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2359296)] + (((float32*)placeholder_2[((co*4608) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2621440)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2621440)] + (((float32*)placeholder_2[((co*4608) + (ci*9))]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 262144)] = ((float32*)transform_weight_2[(((co*512) + ci) + 262144)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 1)]*-0.5f32))
      transform_weight_2[(((co*512) + ci) + 524288)] = ((float32*)transform_weight_2[(((co*512) + ci) + 524288)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 1)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1310720)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1310720)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 1)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*512) + ci) + 1572864)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1572864)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 1)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2359296)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2359296)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 1)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*512) + ci) + 2621440)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2621440)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 1)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 262144)] = ((float32*)transform_weight_2[(((co*512) + ci) + 262144)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 524288)] = ((float32*)transform_weight_2[(((co*512) + ci) + 524288)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 786432)] = ((float32*)transform_weight_2[(((co*512) + ci) + 786432)] + (float32*)placeholder_2[(((co*4608) + (ci*9)) + 2)])
      transform_weight_2[(((co*512) + ci) + 1310720)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1310720)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1572864)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1572864)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1835008)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1835008)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2359296)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2359296)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2621440)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2621440)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 2)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2883584)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2883584)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 2)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1048576)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1048576)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 3)]*-0.5f32))
      transform_weight_2[(((co*512) + ci) + 1310720)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1310720)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 3)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1572864)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1572864)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 3)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2097152)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2097152)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 3)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2359296)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2359296)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 3)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2621440)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2621440)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 3)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1310720)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1310720)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 4)]*-0.5f32)*-0.5f32))
      transform_weight_2[(((co*512) + ci) + 1572864)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1572864)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 4)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2359296)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2359296)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 4)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*512) + ci) + 2621440)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2621440)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 4)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1310720)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1310720)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 5)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1572864)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1572864)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 5)]*-0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1835008)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1835008)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 5)]*-0.5f32))
      transform_weight_2[(((co*512) + ci) + 2359296)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2359296)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 5)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2621440)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2621440)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 5)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2883584)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2883584)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 5)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1048576)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1048576)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1310720)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1310720)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1572864)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1572864)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2097152)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2097152)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2359296)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2359296)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2621440)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2621440)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 6)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 3145728)] = ((float32*)transform_weight_2[(((co*512) + ci) + 3145728)] + (float32*)placeholder_2[(((co*4608) + (ci*9)) + 6)])
      transform_weight_2[(((co*512) + ci) + 3407872)] = ((float32*)transform_weight_2[(((co*512) + ci) + 3407872)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 3670016)] = ((float32*)transform_weight_2[(((co*512) + ci) + 3670016)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 6)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1310720)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1310720)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 7)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*512) + ci) + 1572864)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1572864)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 7)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2359296)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2359296)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 7)]*0.5f32)*-0.5f32))
      transform_weight_2[(((co*512) + ci) + 2621440)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2621440)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 7)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 3407872)] = ((float32*)transform_weight_2[(((co*512) + ci) + 3407872)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 7)]*-0.5f32))
      transform_weight_2[(((co*512) + ci) + 3670016)] = ((float32*)transform_weight_2[(((co*512) + ci) + 3670016)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 7)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1310720)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1310720)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1572864)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1572864)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 1835008)] = ((float32*)transform_weight_2[(((co*512) + ci) + 1835008)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2359296)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2359296)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2621440)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2621440)] + (((float32*)placeholder_2[(((co*4608) + (ci*9)) + 8)]*0.5f32)*0.5f32))
      transform_weight_2[(((co*512) + ci) + 2883584)] = ((float32*)transform_weight_2[(((co*512) + ci) + 2883584)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 3407872)] = ((float32*)transform_weight_2[(((co*512) + ci) + 3407872)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 3670016)] = ((float32*)transform_weight_2[(((co*512) + ci) + 3670016)] + ((float32*)placeholder_2[(((co*4608) + (ci*9)) + 8)]*0.5f32))
      transform_weight_2[(((co*512) + ci) + 3932160)] = ((float32*)transform_weight_2[(((co*512) + ci) + 3932160)] + (float32*)placeholder_2[(((co*4608) + (ci*9)) + 8)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op transpose
primfn(placeholder_1: handle, T_transpose_1: handle) -> ()
  attr = {"global_symbol": "fused_transpose_3", "tir.noalias": True}
  buffers = {T_transpose: Buffer(T_transpose_2: handle, float32, [4, 4, 512, 512], []),
             placeholder: Buffer(placeholder_2: handle, float32, [4, 4, 512, 512], [])}
  buffer_map = {placeholder_1: placeholder, T_transpose_1: T_transpose} {
  for (ax0.ax1.fused: int32, 0, 16) "parallel" {
    for (ax2: int32, 0, 512) {
      for (ax3.outer: int32, 0, 32) {
        T_transpose_2[ramp((((ax0.ax1.fused*262144) + (ax2*512)) + (ax3.outer*16)), 1, 16)] = (float32x16*)placeholder_2[ramp((((ax0.ax1.fused*262144) + (ax3.outer*8192)) + ax2), 512, 16)]
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('dense_tensorcore.cuda', ('TENSOR', (32, 512), 'float32'), ('TENSOR', (1000, 512), 'float32'), None, 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation dense_tensorcore.cuda for op nn.dense
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_dense_add", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 1000], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [1000], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 512], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [1000, 512], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [T_dense.wmma.accumulator: handle] "storage_scope" = "wmma.accumulator";
  allocate(T_dense.wmma.accumulator, float32, [256]);
  attr [compute.shared: handle] "storage_scope" = "shared";
  allocate(compute.shared, float16, [512]);
  attr [compute.shared_1: handle] "storage_scope" = "shared";
  allocate(compute.shared_1, float16, [128]);
  attr [compute.shared.wmma.matrix_a: handle] "storage_scope" = "wmma.matrix_a";
  allocate(compute.shared.wmma.matrix_a, float16, [512]);
  attr [compute.shared.wmma.matrix_b: handle] "storage_scope" = "wmma.matrix_b";
  allocate(compute.shared.wmma.matrix_b, float16, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 125 {
    @tir.tvm_fill_fragment(T_dense.wmma.accumulator, 32, 8, 16, 0, 0f32, dtype=handle)
    for (k.outer.outer: int32, 0, 32) {
      for (ax0.ax1.fused.outer.outer.outer.outer: int32, 0, 16) {
        attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
        attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        compute.shared[((ax0.ax1.fused.outer.outer.outer.outer*32) + threadIdx.x)] = cast(float16, (float32*)placeholder_7[((((ax0.ax1.fused.outer.outer.outer.outer*1024) + (floordiv(threadIdx.x, 16)*512)) + (k.outer.outer*16)) + floormod(threadIdx.x, 16))])
      }
      for (ax0.ax1.fused.outer.outer.outer.outer_1: int32, 0, 4) {
        attr [IterVar(threadIdx.z, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
        attr [IterVar(threadIdx.y, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        compute.shared_1[((ax0.ax1.fused.outer.outer.outer.outer_1*32) + threadIdx.x)] = cast(float16, (float32*)placeholder_8[(((((blockIdx.y*4096) + (ax0.ax1.fused.outer.outer.outer.outer_1*1024)) + (floordiv(threadIdx.x, 16)*512)) + (k.outer.outer*16)) + floormod(threadIdx.x, 16))])
      }
      @tir.tvm_load_matrix_sync(compute.shared.wmma.matrix_a, 32, 8, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), compute.shared, 0, 512, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(compute.shared.wmma.matrix_b, 32, 8, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), compute.shared_1, 0, 128, 1, dtype=handle), 16, "col_major", dtype=handle)
      @tir.tvm_mma_sync(T_dense.wmma.accumulator, 0, compute.shared.wmma.matrix_a, 0, compute.shared.wmma.matrix_b, 0, T_dense.wmma.accumulator, 0, dtype=handle)
    }
    @tir.tvm_store_matrix_sync(T_dense.wmma.accumulator, 32, 8, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), compute.shared, 0, 256, 2, dtype=handle), 8, "row_major", dtype=handle)
    for (ax0.inner.ax1.inner.fused.outer.outer.outer.outer: int32, 0, 8) {
      attr [IterVar(threadIdx.z, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
      attr [IterVar(threadIdx.y, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      T_add_2[((((ax0.inner.ax1.inner.fused.outer.outer.outer.outer*4000) + (floordiv(threadIdx.x, 8)*1000)) + (blockIdx.y*8)) + floormod(threadIdx.x, 8))] = ((float32*)compute.shared[((ax0.inner.ax1.inner.fused.outer.outer.outer.outer*32) + threadIdx.x)] + (float32*)placeholder_6[((blockIdx.y*8) + floormod(threadIdx.x, 8))])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.batch_flatten
primfn(placeholder_1: handle, tensor_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_batch_flatten", "tir.noalias": True}
  buffers = {tensor: Buffer(tensor_2: handle, float32, [32, 512], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 512, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, tensor_1: tensor} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 16;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  tensor_2[((blockIdx.x*1024) + threadIdx.x)] = (float32*)placeholder_2[((blockIdx.x*1024) + threadIdx.x)]
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation adaptive_pool.cuda for op nn.global_avg_pool2d
primfn(placeholder_1: handle, tensor_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_global_avg_pool2d", "tir.noalias": True}
  buffers = {tensor: Buffer(tensor_2: handle, float32, [32, 512, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 512, 7, 7], [])}
  buffer_map = {placeholder_1: placeholder, tensor_1: tensor} {
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
  attr [tensor_3: handle] "storage_scope" = "local";
  allocate(tensor_3, float32, [1]);
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 64;
  attr [IterVar(threadIdx.y: int32, [0:8], "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
  attr [IterVar(threadIdx.x: int32, [0:8], "ThreadIndex", "threadIdx.x")] "thread_extent" = 8 {
    tensor_3[0] = 0f32
    for (rv0: int32, 0, 7) {
      for (rv1: int32, 0, 7) {
        tensor_3[0] = ((float32*)tensor_3[0] + (float32*)placeholder_2[((((((blockIdx.y*200704) + (threadIdx.y*25088)) + (blockIdx.x*392)) + (threadIdx.x*49)) + (rv0*7)) + rv1)])
      }
    }
    tensor_2[((((blockIdx.y*4096) + (threadIdx.y*512)) + (blockIdx.x*8)) + threadIdx.x)] = ((float32*)tensor_3[0]*0.0204082f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu", "tir.noalias": True}
  buffers = {placeholder_3: Buffer(placeholder_8: handle, float32, [32, 512, 7, 7], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 512, 7, 7], []),
             placeholder: Buffer(placeholder_9: handle, float32, [4, 4, 512, 512], []),
             placeholder_2: Buffer(placeholder_10: handle, float32, [32, 512, 7, 7], []),
             placeholder_1: Buffer(placeholder_11: handle, float32, [1, 512, 1, 1], [])}
  buffer_map = {placeholder_6: placeholder, placeholder_7: placeholder_1, T_relu_1: T_relu, placeholder_4: placeholder_2, placeholder_5: placeholder_3} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [4194304]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [4194304]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2048;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [16]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [16]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 4) {
        for (nu: int32, 0, 4) {
          d[((eps*4) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(threadIdx.x, 16), 4)*2) + eps)) && (((floordiv(floormod(threadIdx.x, 16), 4)*2) + eps) < 8)) && (1 <= ((floormod(threadIdx.x, 4)*2) + nu))) && (((floormod(threadIdx.x, 4)*2) + nu) < 8)), (float32*)placeholder_8[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 512), 16)*25088) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*49)) + (floordiv(floormod(threadIdx.x, 16), 4)*14)) + (eps*7)) + (floormod(threadIdx.x, 4)*2)) + nu) - 8)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[8]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[10]*-1f32)*-1f32))
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[1]*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[2])
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1f32))
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[1])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[2])
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[9]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1f32))
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[3])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[11]*-1f32))
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[4]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[8])
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1f32))
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[6]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[9]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[10])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[5]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[6]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[9])
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[7]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[11])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[4])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[6]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[8])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[10]*-1f32))
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[5]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[6])
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[5])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[6])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[9])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[5]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[4]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[12])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[14]*-1f32))
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[6]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[14])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[5]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[6]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[13])
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[14])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[7]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[13]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[15])
      for (eps_1: int32, 0, 4) {
        for (nu_1: int32, 0, 4) {
          data_pack[((((eps_1*1048576) + (nu_1*262144)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*4) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 16;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [128]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [1024]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [1024]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 4;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
      for (co.c.init: int32, 0, 32) "unroll" {
        for (p.c.init: int32, 0, 4) "unroll" {
          bgemm.local[((co.c.init*4) + p.c.init)] = 0f32
        }
      }
      for (ci.outer: int32, 0, 64) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 8) "unroll" {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          placeholder.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + (threadIdx.y_1*32)) + threadIdx.x_2)] = (float32*)placeholder_9[((((((blockIdx.z*262144) + (ci.outer*4096)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*512)) + (blockIdx.y*128)) + (threadIdx.y_1*32)) + threadIdx.x_2)]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 8) "unroll" {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          data_pack.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*32)) + threadIdx.x_3)] = (float32*)data_pack[((((((blockIdx.z*262144) + (ci.outer*4096)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*512)) + (blockIdx.x_1*128)) + (threadIdx.y_2*32)) + threadIdx.x_3)]
        }
        for (ci.inner: int32, 0, 8) "unroll" {
          for (co.c: int32, 0, 32) "unroll" {
            for (p.c: int32, 0, 4) "unroll" {
              bgemm.local[((co.c*4) + p.c)] = ((float32*)bgemm.local[((co.c*4) + p.c)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*32)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*128) + (threadIdx.x_1*4)) + p.c)]))
            }
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 32) "unroll" {
        for (p.inner.inner.inner: int32, 0, 4) "unroll" {
          bgemm[(((((((blockIdx.z*262144) + (blockIdx.y*65536)) + (threadIdx.y*16384)) + (co.inner.inner.inner*512)) + (blockIdx.x_1*128)) + (threadIdx.x_1*4)) + p.inner.inner.inner)] = (float32*)bgemm.local[((co.inner.inner.inner*4) + p.inner.inner.inner)]
        }
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2048;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [4]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 262144)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 524288)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1048576)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2097152)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 262144)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 524288)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 786432)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1835008)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2883584)])
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1048576)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2097152)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3145728)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3407872)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3670016)])
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + (((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)]*-1f32)*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1835008)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2883584)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3407872)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3670016)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3932160)])
      for (ax2.inner: int32, 0, 2) {
        for (ax3.inner: int32, 0, 2) {
          if (((floordiv(floormod(threadIdx.x_4, 16), 4)*2) + ax2.inner) < 7) {
            if (((floormod(threadIdx.x_4, 4)*2) + ax3.inner) < 7) {
              T_relu_2[((((((blockIdx.x_2*392) + (floordiv(threadIdx.x_4, 16)*49)) + (floordiv(floormod(threadIdx.x_4, 16), 4)*14)) + (ax2.inner*7)) + (floormod(threadIdx.x_4, 4)*2)) + ax3.inner)] = max(((float32*)placeholder_10[((((((blockIdx.x_2*392) + (floordiv(threadIdx.x_4, 16)*49)) + (floordiv(floormod(threadIdx.x_4, 16), 4)*14)) + (ax2.inner*7)) + (floormod(threadIdx.x_4, 4)*2)) + ax3.inner)] + ((float32*)inverse[((ax2.inner*2) + ax3.inner)] + (float32*)placeholder_11[floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)])), 0f32)
            }
          }
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu", "tir.noalias": True}
  buffers = {placeholder_3: Buffer(placeholder_8: handle, float32, [512, 256, 1, 1], []),
             placeholder_2: Buffer(placeholder_9: handle, float32, [32, 256, 14, 14], []),
             placeholder_1: Buffer(placeholder_10: handle, float32, [32, 512, 7, 7], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 512, 7, 7], []),
             placeholder: Buffer(placeholder_11: handle, float32, [1, 512, 1, 1], [])}
  buffer_map = {T_relu_1: T_relu, placeholder_6: placeholder, placeholder_7: placeholder_1, placeholder_4: placeholder_2, placeholder_5: placeholder_3} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [2704]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [4096]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    compute[0] = 0f32
    compute[7] = 0f32
    compute[14] = 0f32
    compute[21] = 0f32
    compute[28] = 0f32
    compute[35] = 0f32
    compute[42] = 0f32
    compute[49] = 0f32
    compute[1] = 0f32
    compute[8] = 0f32
    compute[15] = 0f32
    compute[22] = 0f32
    compute[29] = 0f32
    compute[36] = 0f32
    compute[43] = 0f32
    compute[50] = 0f32
    compute[2] = 0f32
    compute[9] = 0f32
    compute[16] = 0f32
    compute[23] = 0f32
    compute[30] = 0f32
    compute[37] = 0f32
    compute[44] = 0f32
    compute[51] = 0f32
    compute[3] = 0f32
    compute[10] = 0f32
    compute[17] = 0f32
    compute[24] = 0f32
    compute[31] = 0f32
    compute[38] = 0f32
    compute[45] = 0f32
    compute[52] = 0f32
    compute[4] = 0f32
    compute[11] = 0f32
    compute[18] = 0f32
    compute[25] = 0f32
    compute[32] = 0f32
    compute[39] = 0f32
    compute[46] = 0f32
    compute[53] = 0f32
    compute[5] = 0f32
    compute[12] = 0f32
    compute[19] = 0f32
    compute[26] = 0f32
    compute[33] = 0f32
    compute[40] = 0f32
    compute[47] = 0f32
    compute[54] = 0f32
    compute[6] = 0f32
    compute[13] = 0f32
    compute[20] = 0f32
    compute[27] = 0f32
    compute[34] = 0f32
    compute[41] = 0f32
    compute[48] = 0f32
    compute[55] = 0f32
    for (rc.outer: int32, 0, 16) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        if ((floordiv((threadIdx.z_1*85), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2704) {
            pad_temp.shared[((threadIdx.z_1*85) + (threadIdx.x_1*13))] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv((threadIdx.z_1*85), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv((threadIdx.z_1*85), 13) + threadIdx.x_1), 13)*14)) + floormod((threadIdx.z_1*85), 13))]
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 1), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2703) {
            pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 1)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 1), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 1), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 1), 13))]
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 2), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2702) {
            pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 2)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 2), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 2), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 2), 13))]
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 3), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2701) {
            pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 3)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 3), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 3), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 3), 13))]
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 4), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2700) {
            pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 4)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 4), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 4), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 4), 13))]
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 5), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2699) {
            pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 5)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 5), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 5), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 5), 13))]
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 6), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2698) {
            pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 6)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 6), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 6), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 6), 13))]
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 7), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2697) {
            if (threadIdx.x_1 < 6) {
              pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 7)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 7), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 7), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 7), 13))]
            }
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 8), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2696) {
            if (threadIdx.x_1 < 6) {
              pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 8)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 8), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 8), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 8), 13))]
            }
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 9), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2695) {
            if (threadIdx.x_1 < 6) {
              pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 9)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 9), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 9), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 9), 13))]
            }
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 10), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2694) {
            if (threadIdx.x_1 < 6) {
              pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 10)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 10), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 10), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 10), 13))]
            }
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 11), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2693) {
            if (threadIdx.x_1 < 6) {
              pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 11)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 11), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 11), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 11), 13))]
            }
          }
        }
        if ((floordiv(((threadIdx.z_1*85) + 12), 13) + threadIdx.x_1) < 208) {
          if (((threadIdx.z_1*85) + (threadIdx.x_1*13)) < 2692) {
            if (threadIdx.x_1 < 6) {
              pad_temp.shared[(((threadIdx.z_1*85) + (threadIdx.x_1*13)) + 12)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 2)*50176) + (rc.outer*3136)) + (floordiv((floordiv(((threadIdx.z_1*85) + 12), 13) + threadIdx.x_1), 13)*196)) + (floormod((floordiv(((threadIdx.z_1*85) + 12), 13) + threadIdx.x_1), 13)*14)) + floormod(((threadIdx.z_1*85) + 12), 13))]
            }
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        placeholder.shared[((threadIdx.z_2*128) + (threadIdx.x_2*19))] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv((threadIdx.x_2*19), 16)*256)) + (rc.outer*16)) + floormod((threadIdx.x_2*19), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 1)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 1), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 1), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 2)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 2), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 2), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 3)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 3), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 3), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 4)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 4), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 4), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 5)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 5), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 5), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 6)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 6), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 6), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 7)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 7), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 7), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 8)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 8), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 8), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 9)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 9), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 9), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 10)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 10), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 10), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 11)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 11), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 11), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 12)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 12), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 12), 16))]
        placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 13)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 13), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 13), 16))]
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*19) + 14), 16)) < 256) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*19)) < 4082) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 14)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 14), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 14), 16))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*19) + 15), 16)) < 256) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*19)) < 4081) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 15)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 15), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 15), 16))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*19), 16)) < 255) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*19)) < 4080) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 16)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv((threadIdx.x_2*19), 16)*256)) + (rc.outer*16)) + floormod((threadIdx.x_2*19), 16)) + 256)]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*19) + 17), 16)) < 256) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*19)) < 4079) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 17)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 17), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 1), 16))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*19) + 18), 16)) < 256) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*19)) < 4078) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*19)) + 18)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*19) + 18), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x_2*19) + 2), 16))]
            }
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 512)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1024)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1536)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2048)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2560)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3072)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3584)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 512)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1024)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1536)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2048)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2560)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3072)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3584)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 512)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1024)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1536)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2048)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2560)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3072)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3584)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 512)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1024)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1536)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2048)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2560)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3072)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3584)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 512)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1024)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1536)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2048)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2560)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3072)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3584)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 512)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1024)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1536)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2048)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2560)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3072)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3584)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 512)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1024)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1536)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2048)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2560)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3072)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3584)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 513)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1025)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1537)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2049)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2561)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3073)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3585)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 513)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1025)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1537)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2049)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2561)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3073)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3585)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 513)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1025)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1537)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2049)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2561)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3073)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3585)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 513)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1025)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1537)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2049)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2561)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3073)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3585)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 513)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1025)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1537)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2049)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2561)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3073)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3585)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 513)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1025)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1537)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2049)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2561)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3073)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3585)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 513)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1025)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1537)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2049)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2561)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3073)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3585)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 514)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1026)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1538)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2050)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2562)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3074)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3586)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 514)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1026)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1538)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2050)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2562)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3074)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3586)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 514)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1026)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1538)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2050)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2562)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3074)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3586)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 514)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1026)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1538)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2050)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2562)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3074)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3586)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 514)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1026)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1538)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2050)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2562)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3074)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3586)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 514)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1026)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1538)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2050)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2562)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3074)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3586)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 514)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1026)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1538)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2050)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2562)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3074)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3586)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 515)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1027)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1539)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2051)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2563)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3075)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3587)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 515)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1027)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1539)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2051)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2563)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3075)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3587)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 515)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1027)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1539)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2051)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2563)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3075)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3587)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 515)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1027)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1539)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2051)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2563)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3075)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3587)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 515)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1027)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1539)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2051)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2563)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3075)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3587)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 515)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1027)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1539)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2051)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2563)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3075)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3587)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 515)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1027)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1539)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2051)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2563)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3075)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3587)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 676)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 676)]*(float32*)placeholder.shared[((threadIdx.z*16) + 516)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 676)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1028)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 676)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1540)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 676)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2052)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 676)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2564)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 676)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3076)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 676)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3588)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*16) + 516)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1028)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1540)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2052)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2564)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3076)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3588)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 728)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 728)]*(float32*)placeholder.shared[((threadIdx.z*16) + 516)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 728)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1028)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 728)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1540)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 728)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2052)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 728)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2564)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 728)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3076)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 728)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3588)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 754)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 754)]*(float32*)placeholder.shared[((threadIdx.z*16) + 516)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 754)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1028)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 754)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1540)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 754)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2052)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 754)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2564)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 754)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3076)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 754)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3588)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 780)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 780)]*(float32*)placeholder.shared[((threadIdx.z*16) + 516)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 780)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1028)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 780)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1540)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 780)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2052)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 780)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2564)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 780)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3076)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 780)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3588)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 806)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 806)]*(float32*)placeholder.shared[((threadIdx.z*16) + 516)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 806)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1028)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 806)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1540)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 806)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2052)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 806)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2564)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 806)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3076)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 806)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3588)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 832)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 832)]*(float32*)placeholder.shared[((threadIdx.z*16) + 516)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 832)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1028)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 832)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1540)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 832)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2052)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 832)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2564)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 832)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3076)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 832)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3588)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 845)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 845)]*(float32*)placeholder.shared[((threadIdx.z*16) + 517)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 845)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1029)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 845)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1541)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 845)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2053)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 845)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2565)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 845)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3077)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 845)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3589)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 871)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 871)]*(float32*)placeholder.shared[((threadIdx.z*16) + 517)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 871)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1029)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 871)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1541)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 871)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2053)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 871)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2565)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 871)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3077)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 871)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3589)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 897)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 897)]*(float32*)placeholder.shared[((threadIdx.z*16) + 517)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 897)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1029)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 897)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1541)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 897)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2053)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 897)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2565)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 897)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3077)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 897)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3589)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 923)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 923)]*(float32*)placeholder.shared[((threadIdx.z*16) + 517)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 923)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1029)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 923)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1541)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 923)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2053)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 923)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2565)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 923)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3077)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 923)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3589)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 949)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 949)]*(float32*)placeholder.shared[((threadIdx.z*16) + 517)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 949)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1029)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 949)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1541)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 949)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2053)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 949)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2565)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 949)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3077)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 949)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3589)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 975)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 975)]*(float32*)placeholder.shared[((threadIdx.z*16) + 517)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 975)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1029)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 975)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1541)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 975)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2053)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 975)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2565)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 975)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3077)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 975)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3589)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1001)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1001)]*(float32*)placeholder.shared[((threadIdx.z*16) + 517)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1001)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1029)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1001)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1541)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1001)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2053)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1001)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2565)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1001)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3077)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1001)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3589)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1014)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1014)]*(float32*)placeholder.shared[((threadIdx.z*16) + 518)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1014)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1030)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1014)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1542)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1014)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2054)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1014)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2566)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1014)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3078)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1014)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3590)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1040)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1040)]*(float32*)placeholder.shared[((threadIdx.z*16) + 518)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1040)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1030)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1040)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1542)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1040)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2054)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1040)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2566)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1040)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3078)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1040)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3590)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1066)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1066)]*(float32*)placeholder.shared[((threadIdx.z*16) + 518)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1066)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1030)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1066)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1542)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1066)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2054)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1066)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2566)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1066)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3078)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1066)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3590)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1092)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1092)]*(float32*)placeholder.shared[((threadIdx.z*16) + 518)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1092)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1030)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1092)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1542)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1092)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2054)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1092)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2566)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1092)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3078)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1092)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3590)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1118)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1118)]*(float32*)placeholder.shared[((threadIdx.z*16) + 518)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1118)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1030)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1118)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1542)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1118)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2054)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1118)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2566)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1118)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3078)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1118)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3590)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1144)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1144)]*(float32*)placeholder.shared[((threadIdx.z*16) + 518)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1144)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1030)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1144)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1542)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1144)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2054)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1144)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2566)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1144)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3078)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1144)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3590)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1170)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1170)]*(float32*)placeholder.shared[((threadIdx.z*16) + 518)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1170)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1030)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1170)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1542)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1170)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2054)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1170)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2566)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1170)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3078)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1170)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3590)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1183)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1183)]*(float32*)placeholder.shared[((threadIdx.z*16) + 519)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1183)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1031)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1183)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1543)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1183)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2055)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1183)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2567)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1183)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3079)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1183)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3591)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1209)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1209)]*(float32*)placeholder.shared[((threadIdx.z*16) + 519)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1209)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1031)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1209)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1543)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1209)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2055)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1209)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2567)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1209)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3079)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1209)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3591)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1235)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1235)]*(float32*)placeholder.shared[((threadIdx.z*16) + 519)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1235)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1031)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1235)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1543)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1235)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2055)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1235)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2567)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1235)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3079)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1235)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3591)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1261)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1261)]*(float32*)placeholder.shared[((threadIdx.z*16) + 519)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1261)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1031)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1261)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1543)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1261)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2055)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1261)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2567)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1261)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3079)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1261)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3591)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1287)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1287)]*(float32*)placeholder.shared[((threadIdx.z*16) + 519)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1287)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1031)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1287)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1543)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1287)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2055)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1287)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2567)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1287)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3079)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1287)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3591)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1313)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1313)]*(float32*)placeholder.shared[((threadIdx.z*16) + 519)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1313)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1031)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1313)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1543)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1313)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2055)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1313)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2567)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1313)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3079)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1313)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3591)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1339)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1339)]*(float32*)placeholder.shared[((threadIdx.z*16) + 519)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1339)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1031)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1339)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1543)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1339)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2055)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1339)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2567)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1339)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3079)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1339)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3591)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1352)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1352)]*(float32*)placeholder.shared[((threadIdx.z*16) + 520)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1352)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1032)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1352)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1544)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1352)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2056)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1352)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2568)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1352)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3080)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1352)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3592)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1378)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1378)]*(float32*)placeholder.shared[((threadIdx.z*16) + 520)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1378)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1032)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1378)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1544)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1378)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2056)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1378)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2568)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1378)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3080)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1378)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3592)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1404)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1404)]*(float32*)placeholder.shared[((threadIdx.z*16) + 520)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1404)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1032)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1404)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1544)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1404)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2056)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1404)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2568)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1404)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3080)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1404)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3592)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1430)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1430)]*(float32*)placeholder.shared[((threadIdx.z*16) + 520)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1430)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1032)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1430)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1544)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1430)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2056)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1430)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2568)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1430)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3080)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1430)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3592)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1456)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1456)]*(float32*)placeholder.shared[((threadIdx.z*16) + 520)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1456)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1032)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1456)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1544)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1456)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2056)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1456)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2568)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1456)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3080)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1456)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3592)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1482)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1482)]*(float32*)placeholder.shared[((threadIdx.z*16) + 520)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1482)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1032)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1482)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1544)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1482)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2056)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1482)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2568)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1482)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3080)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1482)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3592)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1508)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1508)]*(float32*)placeholder.shared[((threadIdx.z*16) + 520)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1508)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1032)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1508)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1544)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1508)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2056)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1508)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2568)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1508)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3080)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1508)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3592)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1521)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1521)]*(float32*)placeholder.shared[((threadIdx.z*16) + 521)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1521)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1033)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1521)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1545)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1521)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2057)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1521)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2569)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1521)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3081)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1521)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3593)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1547)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1547)]*(float32*)placeholder.shared[((threadIdx.z*16) + 521)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1547)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1033)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1547)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1545)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1547)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2057)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1547)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2569)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1547)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3081)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1547)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3593)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1573)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1573)]*(float32*)placeholder.shared[((threadIdx.z*16) + 521)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1573)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1033)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1573)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1545)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1573)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2057)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1573)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2569)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1573)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3081)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1573)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3593)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1599)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1599)]*(float32*)placeholder.shared[((threadIdx.z*16) + 521)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1599)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1033)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1599)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1545)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1599)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2057)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1599)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2569)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1599)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3081)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1599)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3593)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1625)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1625)]*(float32*)placeholder.shared[((threadIdx.z*16) + 521)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1625)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1033)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1625)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1545)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1625)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2057)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1625)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2569)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1625)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3081)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1625)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3593)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1651)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1651)]*(float32*)placeholder.shared[((threadIdx.z*16) + 521)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1651)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1033)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1651)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1545)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1651)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2057)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1651)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2569)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1651)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3081)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1651)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3593)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1677)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1677)]*(float32*)placeholder.shared[((threadIdx.z*16) + 521)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1677)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1033)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1677)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1545)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1677)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2057)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1677)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2569)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1677)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3081)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1677)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3593)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1690)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1690)]*(float32*)placeholder.shared[((threadIdx.z*16) + 522)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1690)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1034)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1690)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1546)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1690)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2058)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1690)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2570)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1690)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3082)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1690)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3594)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1716)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1716)]*(float32*)placeholder.shared[((threadIdx.z*16) + 522)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1716)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1034)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1716)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1546)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1716)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2058)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1716)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2570)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1716)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3082)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1716)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3594)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1742)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1742)]*(float32*)placeholder.shared[((threadIdx.z*16) + 522)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1742)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1034)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1742)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1546)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1742)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2058)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1742)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2570)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1742)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3082)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1742)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3594)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1768)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1768)]*(float32*)placeholder.shared[((threadIdx.z*16) + 522)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1768)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1034)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1768)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1546)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1768)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2058)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1768)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2570)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1768)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3082)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1768)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3594)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1794)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1794)]*(float32*)placeholder.shared[((threadIdx.z*16) + 522)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1794)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1034)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1794)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1546)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1794)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2058)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1794)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2570)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1794)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3082)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1794)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3594)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1820)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1820)]*(float32*)placeholder.shared[((threadIdx.z*16) + 522)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1820)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1034)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1820)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1546)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1820)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2058)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1820)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2570)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1820)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3082)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1820)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3594)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1846)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1846)]*(float32*)placeholder.shared[((threadIdx.z*16) + 522)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1846)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1034)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1846)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1546)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1846)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2058)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1846)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2570)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1846)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3082)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1846)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3594)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1859)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1859)]*(float32*)placeholder.shared[((threadIdx.z*16) + 523)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1859)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1035)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1859)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1547)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1859)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2059)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1859)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2571)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1859)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3083)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1859)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3595)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1885)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1885)]*(float32*)placeholder.shared[((threadIdx.z*16) + 523)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1885)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1035)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1885)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1547)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1885)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2059)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1885)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2571)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1885)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3083)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1885)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3595)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1911)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1911)]*(float32*)placeholder.shared[((threadIdx.z*16) + 523)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1911)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1035)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1911)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1547)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1911)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2059)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1911)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2571)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1911)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3083)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1911)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3595)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1937)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1937)]*(float32*)placeholder.shared[((threadIdx.z*16) + 523)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1937)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1035)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1937)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1547)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1937)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2059)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1937)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2571)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1937)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3083)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1937)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3595)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1963)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1963)]*(float32*)placeholder.shared[((threadIdx.z*16) + 523)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1963)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1035)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1963)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1547)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1963)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2059)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1963)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2571)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1963)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3083)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1963)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3595)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1989)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1989)]*(float32*)placeholder.shared[((threadIdx.z*16) + 523)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1989)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1035)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1989)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1547)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1989)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2059)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1989)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2571)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1989)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3083)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1989)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3595)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2015)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2015)]*(float32*)placeholder.shared[((threadIdx.z*16) + 523)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2015)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1035)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2015)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1547)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2015)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2059)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2015)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2571)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2015)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3083)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2015)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3595)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2028)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2028)]*(float32*)placeholder.shared[((threadIdx.z*16) + 524)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2028)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1036)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2028)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1548)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2028)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2060)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2028)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2572)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2028)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3084)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2028)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3596)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2054)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2054)]*(float32*)placeholder.shared[((threadIdx.z*16) + 524)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2054)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1036)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2054)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1548)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2054)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2060)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2054)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2572)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2054)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3084)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2054)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3596)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2080)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2080)]*(float32*)placeholder.shared[((threadIdx.z*16) + 524)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2080)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1036)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2080)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1548)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2080)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2060)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2080)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2572)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2080)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3084)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2080)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3596)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2106)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2106)]*(float32*)placeholder.shared[((threadIdx.z*16) + 524)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2106)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1036)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2106)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1548)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2106)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2060)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2106)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2572)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2106)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3084)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2106)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3596)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2132)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2132)]*(float32*)placeholder.shared[((threadIdx.z*16) + 524)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2132)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1036)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2132)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1548)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2132)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2060)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2132)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2572)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2132)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3084)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2132)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3596)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2158)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2158)]*(float32*)placeholder.shared[((threadIdx.z*16) + 524)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2158)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1036)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2158)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1548)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2158)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2060)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2158)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2572)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2158)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3084)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2158)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3596)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2184)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2184)]*(float32*)placeholder.shared[((threadIdx.z*16) + 524)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2184)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1036)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2184)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1548)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2184)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2060)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2184)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2572)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2184)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3084)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2184)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3596)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2197)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2197)]*(float32*)placeholder.shared[((threadIdx.z*16) + 525)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2197)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1037)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2197)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1549)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2197)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2061)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2197)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2573)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2197)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3085)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2197)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3597)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2223)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2223)]*(float32*)placeholder.shared[((threadIdx.z*16) + 525)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2223)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1037)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2223)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1549)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2223)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2061)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2223)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2573)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2223)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3085)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2223)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3597)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2249)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2249)]*(float32*)placeholder.shared[((threadIdx.z*16) + 525)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2249)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1037)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2249)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1549)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2249)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2061)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2249)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2573)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2249)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3085)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2249)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3597)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2275)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2275)]*(float32*)placeholder.shared[((threadIdx.z*16) + 525)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2275)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1037)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2275)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1549)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2275)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2061)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2275)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2573)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2275)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3085)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2275)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3597)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2301)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2301)]*(float32*)placeholder.shared[((threadIdx.z*16) + 525)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2301)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1037)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2301)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1549)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2301)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2061)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2301)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2573)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2301)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3085)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2301)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3597)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2327)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2327)]*(float32*)placeholder.shared[((threadIdx.z*16) + 525)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2327)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1037)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2327)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1549)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2327)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2061)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2327)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2573)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2327)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3085)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2327)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3597)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2353)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2353)]*(float32*)placeholder.shared[((threadIdx.z*16) + 525)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2353)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1037)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2353)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1549)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2353)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2061)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2353)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2573)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2353)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3085)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2353)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3597)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2366)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2366)]*(float32*)placeholder.shared[((threadIdx.z*16) + 526)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2366)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1038)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2366)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1550)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2366)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2062)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2366)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2574)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2366)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3086)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2366)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3598)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2392)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2392)]*(float32*)placeholder.shared[((threadIdx.z*16) + 526)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2392)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1038)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2392)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1550)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2392)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2062)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2392)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2574)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2392)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3086)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2392)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3598)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2418)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2418)]*(float32*)placeholder.shared[((threadIdx.z*16) + 526)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2418)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1038)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2418)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1550)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2418)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2062)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2418)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2574)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2418)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3086)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2418)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3598)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2444)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2444)]*(float32*)placeholder.shared[((threadIdx.z*16) + 526)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2444)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1038)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2444)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1550)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2444)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2062)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2444)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2574)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2444)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3086)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2444)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3598)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2470)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2470)]*(float32*)placeholder.shared[((threadIdx.z*16) + 526)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2470)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1038)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2470)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1550)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2470)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2062)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2470)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2574)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2470)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3086)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2470)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3598)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2496)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2496)]*(float32*)placeholder.shared[((threadIdx.z*16) + 526)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2496)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1038)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2496)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1550)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2496)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2062)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2496)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2574)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2496)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3086)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2496)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3598)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2522)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2522)]*(float32*)placeholder.shared[((threadIdx.z*16) + 526)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2522)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1038)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2522)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1550)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2522)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2062)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2522)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2574)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2522)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3086)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2522)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3598)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2535)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2535)]*(float32*)placeholder.shared[((threadIdx.z*16) + 527)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2535)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1039)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2535)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1551)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2535)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2063)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2535)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2575)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2535)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3087)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2535)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3599)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2561)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2561)]*(float32*)placeholder.shared[((threadIdx.z*16) + 527)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2561)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1039)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2561)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1551)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2561)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2063)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2561)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2575)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2561)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3087)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2561)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3599)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2587)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2587)]*(float32*)placeholder.shared[((threadIdx.z*16) + 527)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2587)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1039)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2587)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1551)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2587)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2063)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2587)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2575)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2587)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3087)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2587)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3599)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2613)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2613)]*(float32*)placeholder.shared[((threadIdx.z*16) + 527)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2613)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1039)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2613)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1551)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2613)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2063)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2613)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2575)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2613)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3087)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2613)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3599)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2639)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2639)]*(float32*)placeholder.shared[((threadIdx.z*16) + 527)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2639)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1039)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2639)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1551)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2639)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2063)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2639)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2575)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2639)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3087)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2639)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3599)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2665)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2665)]*(float32*)placeholder.shared[((threadIdx.z*16) + 527)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2665)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1039)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2665)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1551)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2665)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2063)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2665)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2575)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2665)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3087)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2665)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3599)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2691)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2691)]*(float32*)placeholder.shared[((threadIdx.z*16) + 527)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2691)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1039)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2691)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1551)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2691)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2063)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2691)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2575)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2691)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3087)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 2691)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3599)]))
    }
    T_relu_2[(((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x)] = max((((float32*)compute[0] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*256) + threadIdx.z)]) + (float32*)placeholder_10[(((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1568)] = max((((float32*)compute[7] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 32)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1568)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3136)] = max((((float32*)compute[14] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 64)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3136)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4704)] = max((((float32*)compute[21] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 96)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4704)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6272)] = max((((float32*)compute[28] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 128)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6272)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7840)] = max((((float32*)compute[35] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 160)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7840)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9408)] = max((((float32*)compute[42] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 192)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9408)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 10976)] = max((((float32*)compute[49] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 224)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 10976)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7)] = max((((float32*)compute[1] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*256) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1575)] = max((((float32*)compute[8] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 32)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1575)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3143)] = max((((float32*)compute[15] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 64)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3143)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4711)] = max((((float32*)compute[22] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 96)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4711)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6279)] = max((((float32*)compute[29] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 128)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6279)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7847)] = max((((float32*)compute[36] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 160)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7847)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9415)] = max((((float32*)compute[43] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 192)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9415)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 10983)] = max((((float32*)compute[50] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 224)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 10983)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 14)] = max((((float32*)compute[2] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*256) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 14)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1582)] = max((((float32*)compute[9] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 32)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1582)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3150)] = max((((float32*)compute[16] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 64)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3150)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4718)] = max((((float32*)compute[23] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 96)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4718)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6286)] = max((((float32*)compute[30] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 128)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6286)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7854)] = max((((float32*)compute[37] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 160)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7854)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9422)] = max((((float32*)compute[44] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 192)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9422)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 10990)] = max((((float32*)compute[51] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 224)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 10990)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 21)] = max((((float32*)compute[3] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*256) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 21)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1589)] = max((((float32*)compute[10] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 32)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1589)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3157)] = max((((float32*)compute[17] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 64)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3157)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4725)] = max((((float32*)compute[24] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 96)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4725)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6293)] = max((((float32*)compute[31] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 128)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6293)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7861)] = max((((float32*)compute[38] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 160)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7861)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9429)] = max((((float32*)compute[45] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 192)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9429)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 10997)] = max((((float32*)compute[52] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 224)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 10997)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 28)] = max((((float32*)compute[4] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*256) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 28)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1596)] = max((((float32*)compute[11] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 32)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1596)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3164)] = max((((float32*)compute[18] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 64)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3164)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4732)] = max((((float32*)compute[25] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 96)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4732)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6300)] = max((((float32*)compute[32] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 128)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6300)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7868)] = max((((float32*)compute[39] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 160)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7868)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9436)] = max((((float32*)compute[46] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 192)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9436)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 11004)] = max((((float32*)compute[53] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 224)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 11004)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 35)] = max((((float32*)compute[5] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*256) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 35)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1603)] = max((((float32*)compute[12] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 32)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1603)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3171)] = max((((float32*)compute[19] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 64)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3171)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4739)] = max((((float32*)compute[26] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 96)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4739)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6307)] = max((((float32*)compute[33] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 128)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6307)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7875)] = max((((float32*)compute[40] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 160)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7875)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9443)] = max((((float32*)compute[47] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 192)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9443)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 11011)] = max((((float32*)compute[54] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 224)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 11011)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 42)] = max((((float32*)compute[6] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*256) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 42)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1610)] = max((((float32*)compute[13] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 32)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 1610)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3178)] = max((((float32*)compute[20] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 64)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 3178)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4746)] = max((((float32*)compute[27] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 96)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 4746)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6314)] = max((((float32*)compute[34] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 128)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 6314)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7882)] = max((((float32*)compute[41] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 160)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 7882)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9450)] = max((((float32*)compute[48] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 192)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 9450)]), 0f32)
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 11018)] = max((((float32*)compute[55] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*256) + threadIdx.z) + 224)]) + (float32*)placeholder_10[((((blockIdx.z*12544) + (threadIdx.z*49)) + threadIdx.x) + 11018)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1", "tir.noalias": True}
  buffers = {placeholder_1: Buffer(placeholder_8: handle, float32, [32, 256, 14, 14], []),
             placeholder_3: Buffer(placeholder_9: handle, float32, [4, 4, 256, 256], []),
             placeholder_2: Buffer(placeholder_10: handle, float32, [32, 256, 14, 14], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 256, 14, 14], []),
             placeholder: Buffer(placeholder_11: handle, float32, [1, 256, 1, 1], [])}
  buffer_map = {T_relu_1: T_relu, placeholder_7: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, placeholder_6: placeholder_3} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [6422528]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [6422528]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 3136;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [16]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [16]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 4) {
        for (nu: int32, 0, 4) {
          d[((eps*4) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*2) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*2) + eps) < 15)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 7)*2) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 7)*2) + nu) < 15)), (float32*)placeholder_10[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 1568), 49)*50176) + (floordiv(((blockIdx.x*128) + threadIdx.x), 1568)*196)) + (floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*28)) + (eps*14)) + (floormod(((blockIdx.x*128) + threadIdx.x), 7)*2)) + nu) - 15)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[8]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[10]*-1f32)*-1f32))
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[1]*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[2])
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1f32))
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[1])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[2])
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[9]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1f32))
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[3])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[11]*-1f32))
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[4]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[8])
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1f32))
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[6]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[9]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[10])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[5]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[6]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[9])
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[7]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[11])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[4])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[6]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[8])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[10]*-1f32))
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[5]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[6])
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[5])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[6])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[9])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[5]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[4]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[12])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[14]*-1f32))
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[6]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[14])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[5]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[6]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[13])
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[14])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[7]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[13]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[15])
      for (eps_1: int32, 0, 4) {
        for (nu_1: int32, 0, 4) {
          data_pack[((((eps_1*1605632) + (nu_1*401408)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*4) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 16;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [112]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [1024]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [896]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 14;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16 {
      for (co.c.init: int32, 0, 4) "unroll" {
        bgemm.local[co.c.init] = 0f32
        bgemm.local[(co.c.init + 28)] = 0f32
        bgemm.local[(co.c.init + 56)] = 0f32
        bgemm.local[(co.c.init + 84)] = 0f32
        bgemm.local[(co.c.init + 4)] = 0f32
        bgemm.local[(co.c.init + 32)] = 0f32
        bgemm.local[(co.c.init + 60)] = 0f32
        bgemm.local[(co.c.init + 88)] = 0f32
        bgemm.local[(co.c.init + 8)] = 0f32
        bgemm.local[(co.c.init + 36)] = 0f32
        bgemm.local[(co.c.init + 64)] = 0f32
        bgemm.local[(co.c.init + 92)] = 0f32
        bgemm.local[(co.c.init + 12)] = 0f32
        bgemm.local[(co.c.init + 40)] = 0f32
        bgemm.local[(co.c.init + 68)] = 0f32
        bgemm.local[(co.c.init + 96)] = 0f32
        bgemm.local[(co.c.init + 16)] = 0f32
        bgemm.local[(co.c.init + 44)] = 0f32
        bgemm.local[(co.c.init + 72)] = 0f32
        bgemm.local[(co.c.init + 100)] = 0f32
        bgemm.local[(co.c.init + 20)] = 0f32
        bgemm.local[(co.c.init + 48)] = 0f32
        bgemm.local[(co.c.init + 76)] = 0f32
        bgemm.local[(co.c.init + 104)] = 0f32
        bgemm.local[(co.c.init + 24)] = 0f32
        bgemm.local[(co.c.init + 52)] = 0f32
        bgemm.local[(co.c.init + 80)] = 0f32
        bgemm.local[(co.c.init + 108)] = 0f32
      }
      for (ci.outer: int32, 0, 32) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 8) "unroll" {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          placeholder.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + (threadIdx.y_1*16)) + threadIdx.x_2)] = (float32*)placeholder_9[((((((blockIdx.z*65536) + (ci.outer*2048)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*256)) + (blockIdx.y*128)) + (threadIdx.y_1*16)) + threadIdx.x_2)]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 7) "unroll" {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          data_pack.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*16)) + threadIdx.x_3)] = (float32*)data_pack[(((((blockIdx.z*401408) + (ci.outer*12544)) + (floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*16)) + threadIdx.x_3), 112)*1568)) + (blockIdx.x_1*112)) + floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*16)) + threadIdx.x_3), 112))]
        }
        for (ci.inner: int32, 0, 8) {
          for (co.c: int32, 0, 4) "unroll" {
            bgemm.local[co.c] = ((float32*)bgemm.local[co.c] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 28)] = ((float32*)bgemm.local[(co.c + 28)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 56)] = ((float32*)bgemm.local[(co.c + 56)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 84)] = ((float32*)bgemm.local[(co.c + 84)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 4)] = ((float32*)bgemm.local[(co.c + 4)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 32)] = ((float32*)bgemm.local[(co.c + 32)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 60)] = ((float32*)bgemm.local[(co.c + 60)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 88)] = ((float32*)bgemm.local[(co.c + 88)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 8)] = ((float32*)bgemm.local[(co.c + 8)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 36)] = ((float32*)bgemm.local[(co.c + 36)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 64)] = ((float32*)bgemm.local[(co.c + 64)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 92)] = ((float32*)bgemm.local[(co.c + 92)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 12)] = ((float32*)bgemm.local[(co.c + 12)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 40)] = ((float32*)bgemm.local[(co.c + 40)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 68)] = ((float32*)bgemm.local[(co.c + 68)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 96)] = ((float32*)bgemm.local[(co.c + 96)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 16)] = ((float32*)bgemm.local[(co.c + 16)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 44)] = ((float32*)bgemm.local[(co.c + 44)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 72)] = ((float32*)bgemm.local[(co.c + 72)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 100)] = ((float32*)bgemm.local[(co.c + 100)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 20)] = ((float32*)bgemm.local[(co.c + 20)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 48)] = ((float32*)bgemm.local[(co.c + 48)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 76)] = ((float32*)bgemm.local[(co.c + 76)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 104)] = ((float32*)bgemm.local[(co.c + 104)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 24)] = ((float32*)bgemm.local[(co.c + 24)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
            bgemm.local[(co.c + 52)] = ((float32*)bgemm.local[(co.c + 52)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
            bgemm.local[(co.c + 80)] = ((float32*)bgemm.local[(co.c + 80)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
            bgemm.local[(co.c + 108)] = ((float32*)bgemm.local[(co.c + 108)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 4) "unroll" {
        bgemm[((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1)] = (float32*)bgemm.local[co.inner.inner.inner]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50176)] = (float32*)bgemm.local[(co.inner.inner.inner + 28)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100352)] = (float32*)bgemm.local[(co.inner.inner.inner + 56)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150528)] = (float32*)bgemm.local[(co.inner.inner.inner + 84)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 16)] = (float32*)bgemm.local[(co.inner.inner.inner + 4)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50192)] = (float32*)bgemm.local[(co.inner.inner.inner + 32)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100368)] = (float32*)bgemm.local[(co.inner.inner.inner + 60)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150544)] = (float32*)bgemm.local[(co.inner.inner.inner + 88)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 32)] = (float32*)bgemm.local[(co.inner.inner.inner + 8)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50208)] = (float32*)bgemm.local[(co.inner.inner.inner + 36)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100384)] = (float32*)bgemm.local[(co.inner.inner.inner + 64)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150560)] = (float32*)bgemm.local[(co.inner.inner.inner + 92)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 48)] = (float32*)bgemm.local[(co.inner.inner.inner + 12)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50224)] = (float32*)bgemm.local[(co.inner.inner.inner + 40)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100400)] = (float32*)bgemm.local[(co.inner.inner.inner + 68)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150576)] = (float32*)bgemm.local[(co.inner.inner.inner + 96)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 64)] = (float32*)bgemm.local[(co.inner.inner.inner + 16)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50240)] = (float32*)bgemm.local[(co.inner.inner.inner + 44)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100416)] = (float32*)bgemm.local[(co.inner.inner.inner + 72)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150592)] = (float32*)bgemm.local[(co.inner.inner.inner + 100)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 80)] = (float32*)bgemm.local[(co.inner.inner.inner + 20)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50256)] = (float32*)bgemm.local[(co.inner.inner.inner + 48)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100432)] = (float32*)bgemm.local[(co.inner.inner.inner + 76)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150608)] = (float32*)bgemm.local[(co.inner.inner.inner + 104)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 96)] = (float32*)bgemm.local[(co.inner.inner.inner + 24)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50272)] = (float32*)bgemm.local[(co.inner.inner.inner + 52)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100448)] = (float32*)bgemm.local[(co.inner.inner.inner + 80)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150624)] = (float32*)bgemm.local[(co.inner.inner.inner + 108)]
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 3136;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [4]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 401408)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 802816)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 1605632)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3211264)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 401408)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 802816)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 1204224)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2809856)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4415488)])
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 1605632)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3211264)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4816896)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5218304)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5619712)])
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)]*-1f32)*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2809856)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4415488)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5218304)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5619712)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 6021120)])
      for (ax2.inner: int32, 0, 2) {
        for (ax3.inner: int32, 0, 2) {
          T_relu_2[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 7)*28) + (ax2.inner*14)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 7)*2)) + ax3.inner)] = max(((float32*)placeholder_8[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 7)*28) + (ax2.inner*14)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 7)*2)) + ax3.inner)] + ((float32*)inverse[((ax2.inner*2) + ax3.inner)] + (float32*)placeholder_11[floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)])), 0f32)
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu_1", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 256, 14, 14], []),
             placeholder_3: Buffer(placeholder_8: handle, float32, [1, 256, 1, 1], []),
             placeholder_2: Buffer(placeholder_9: handle, float32, [256, 128, 1, 1], []),
             placeholder: Buffer(placeholder_10: handle, float32, [32, 128, 28, 28], []),
             placeholder_1: Buffer(placeholder_11: handle, float32, [32, 256, 14, 14], [])}
  buffer_map = {placeholder_4: placeholder, placeholder_7: placeholder_1, placeholder_5: placeholder_2, placeholder_6: placeholder_3, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 32;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [112]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [2808]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [2048]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    for (ff.init: int32, 0, 16) "unroll" {
      for (yy.init: int32, 0, 7) "unroll" {
        compute[((ff.init*7) + yy.init)] = 0f32
      }
    }
    for (rc.outer: int32, 0, 16) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 13) "unroll" {
        if ((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 2808) {
          if (((threadIdx.x_1*13) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 176) {
            pad_temp.shared[(((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_10[((((((blockIdx.z*100352) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 351)*784)) + (blockIdx.y*392)) + (floordiv(floormod((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 351), 27)*28)) + floormod((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 27))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 10) "unroll" {
        if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*10) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 8)) < 256) {
          if ((((threadIdx.z_2*128) + (threadIdx.x_2*10)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 2048) {
            if (((threadIdx.x_2*10) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 128) {
              placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*10)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_9[((((threadIdx.z_2*2048) + (floordiv(((threadIdx.x_2*10) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 8)*128)) + (rc.outer*8)) + floormod(((threadIdx.x_2*10) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 8))]
            }
          }
        }
      }
      for (rc.inner: int32, 0, 8) "unroll" {
        for (ff: int32, 0, 16) "unroll" {
          for (yy: int32, 0, 7) "unroll" {
            compute[((ff*7) + yy)] = ((float32*)compute[((ff*7) + yy)] + ((float32*)pad_temp.shared[(((rc.inner*351) + (yy*54)) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*128) + (ff*8)) + rc.inner)]))
          }
        }
      }
    }
    for (ax1.inner.inner.inner: int32, 0, 16) "unroll" {
      for (ax2.inner.inner.inner: int32, 0, 7) "unroll" {
        T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*3136)) + (ax1.inner.inner.inner*196)) + (blockIdx.y*98)) + (ax2.inner.inner.inner*14)) + threadIdx.x)] = max((((float32*)compute[((ax1.inner.inner.inner*7) + ax2.inner.inner.inner)] + (float32*)placeholder_8[((threadIdx.z*16) + ax1.inner.inner.inner)]) + (float32*)placeholder_11[((((((blockIdx.z*50176) + (threadIdx.z*3136)) + (ax1.inner.inner.inner*196)) + (blockIdx.y*98)) + (ax2.inner.inner.inner*14)) + threadIdx.x)]), 0f32)
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_2", "tir.noalias": True}
  buffers = {placeholder_3: Buffer(placeholder_8: handle, float32, [32, 128, 28, 28], []),
             placeholder_2: Buffer(placeholder_9: handle, float32, [4, 4, 128, 128], []),
             placeholder_1: Buffer(placeholder_10: handle, float32, [1, 128, 1, 1], []),
             placeholder: Buffer(placeholder_11: handle, float32, [32, 128, 28, 28], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 128, 28, 28], [])}
  buffer_map = {placeholder_5: placeholder, T_relu_1: T_relu, placeholder_7: placeholder_1, placeholder_6: placeholder_2, placeholder_4: placeholder_3} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [12845056]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [12845056]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6272;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [16]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [16]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 4) {
        for (nu: int32, 0, 4) {
          d[((eps*4) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*2) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*2) + eps) < 29)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 14)*2) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 14)*2) + nu) < 29)), (float32*)placeholder_11[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 6272), 196)*100352) + (floordiv(((blockIdx.x*128) + threadIdx.x), 6272)*784)) + (floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*56)) + (eps*28)) + (floormod(((blockIdx.x*128) + threadIdx.x), 14)*2)) + nu) - 29)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[8]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[10]*-1f32)*-1f32))
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[1]*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[2])
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1f32))
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[1])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[2])
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[9]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1f32))
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[3])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[11]*-1f32))
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[4]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[8])
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1f32))
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[6]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[9]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[10])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[5]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[6]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[9])
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[7]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[11])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[4])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[6]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[8])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[10]*-1f32))
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[5]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[6])
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[5])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[6])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[9])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[5]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[4]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[12])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[14]*-1f32))
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[6]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[14])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[5]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[6]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[13])
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[14])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[7]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[13]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[15])
      for (eps_1: int32, 0, 4) {
        for (nu_1: int32, 0, 4) {
          data_pack[((((eps_1*3211264) + (nu_1*802816)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*4) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 16;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [64]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [2048]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [1024]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 98;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16 {
      for (co.c.init: int32, 0, 16) {
        for (p.c.init: int32, 0, 2) {
          bgemm.local[((co.c.init*2) + p.c.init)] = 0f32
          bgemm.local[(((co.c.init*2) + p.c.init) + 32)] = 0f32
        }
      }
      for (ci.outer: int32, 0, 8) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 16) {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          placeholder.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + (threadIdx.y_1*16)) + threadIdx.x_2)] = (float32*)placeholder_9[(((((blockIdx.z*16384) + (ci.outer*2048)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128)) + (threadIdx.y_1*16)) + threadIdx.x_2)]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 8) {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          data_pack.shared[((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + ((threadIdx.y_2*16) + threadIdx.x_3))] = (float32*)data_pack[((((((blockIdx.z*802816) + (ci.outer*100352)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*12544)) + (floordiv(((threadIdx.y_2*16) + threadIdx.x_3), 64)*6272)) + (blockIdx.x_1*64)) + floormod(((threadIdx.y_2*16) + threadIdx.x_3), 64))]
        }
        for (ci.inner: int32, 0, 16) {
          for (co.c: int32, 0, 16) {
            for (p.c: int32, 0, 2) {
              bgemm.local[((co.c*2) + p.c)] = ((float32*)bgemm.local[((co.c*2) + p.c)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*16)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*64) + (threadIdx.x_1*2)) + p.c)]))
              bgemm.local[(((co.c*2) + p.c) + 32)] = ((float32*)bgemm.local[(((co.c*2) + p.c) + 32)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*16)) + co.c)]*(float32*)data_pack.shared[((((ci.inner*64) + (threadIdx.x_1*2)) + p.c) + 32)]))
            }
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 16) {
        for (p.inner.inner.inner: int32, 0, 2) {
          bgemm[((((((blockIdx.z*802816) + (threadIdx.y*100352)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + (threadIdx.x_1*2)) + p.inner.inner.inner)] = (float32*)bgemm.local[((co.inner.inner.inner*2) + p.inner.inner.inner)]
          bgemm[(((((((blockIdx.z*802816) + (threadIdx.y*100352)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + (threadIdx.x_1*2)) + p.inner.inner.inner) + 32)] = (float32*)bgemm.local[(((co.inner.inner.inner*2) + p.inner.inner.inner) + 32)]
        }
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6272;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [4]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)])
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)])
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12042240)])
      for (ax2.inner: int32, 0, 2) {
        for (ax3.inner: int32, 0, 2) {
          T_relu_2[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 14)*56) + (ax2.inner*28)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 14)*2)) + ax3.inner)] = max(((float32*)placeholder_8[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 14)*56) + (ax2.inner*28)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 14)*2)) + ax3.inner)] + ((float32*)inverse[((ax2.inner*2) + ax3.inner)] + (float32*)placeholder_10[floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)])), 0f32)
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu_2", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 128, 28, 28], []),
             placeholder_3: Buffer(placeholder_8: handle, float32, [1, 128, 1, 1], []),
             placeholder: Buffer(placeholder_9: handle, float32, [32, 64, 56, 56], []),
             placeholder_2: Buffer(placeholder_10: handle, float32, [32, 128, 28, 28], []),
             placeholder_1: Buffer(placeholder_11: handle, float32, [128, 64, 1, 1], [])}
  buffer_map = {placeholder_4: placeholder, placeholder_5: placeholder_1, placeholder_7: placeholder_2, placeholder_6: placeholder_3, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [32]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [770]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 7;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[16] = 0f32
    compute[1] = 0f32
    compute[17] = 0f32
    compute[2] = 0f32
    compute[18] = 0f32
    compute[3] = 0f32
    compute[19] = 0f32
    compute[4] = 0f32
    compute[20] = 0f32
    compute[5] = 0f32
    compute[21] = 0f32
    compute[6] = 0f32
    compute[22] = 0f32
    compute[7] = 0f32
    compute[23] = 0f32
    compute[8] = 0f32
    compute[24] = 0f32
    compute[9] = 0f32
    compute[25] = 0f32
    compute[10] = 0f32
    compute[26] = 0f32
    compute[11] = 0f32
    compute[27] = 0f32
    compute[12] = 0f32
    compute[28] = 0f32
    compute[13] = 0f32
    compute[29] = 0f32
    compute[14] = 0f32
    compute[30] = 0f32
    compute[15] = 0f32
    compute[31] = 0f32
    for (rc.outer: int32, 0, 32) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_1*49) + (threadIdx.x_1*4)) < 770) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[((threadIdx.z_1*49) + (threadIdx.x_1*4))] = (float32*)placeholder_9[((((((floordiv(blockIdx.z, 2)*200704) + (rc.outer*6272)) + (floordiv(((threadIdx.z_1*49) + (threadIdx.x_1*4)), 385)*3136)) + (blockIdx.y*448)) + (floordiv(floormod(((threadIdx.z_1*49) + (threadIdx.x_1*4)), 385), 55)*56)) + floormod(((threadIdx.z_1*49) + (threadIdx.x_1*4)), 55))]
          }
        }
        if (((threadIdx.z_1*49) + (threadIdx.x_1*4)) < 769) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 1)] = (float32*)placeholder_9[((((((floordiv(blockIdx.z, 2)*200704) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 1), 385)*3136)) + (blockIdx.y*448)) + (floordiv(floormod((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 1), 385), 55)*56)) + floormod((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 1), 55))]
          }
        }
        if (((threadIdx.z_1*49) + (threadIdx.x_1*4)) < 768) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 2)] = (float32*)placeholder_9[((((((floordiv(blockIdx.z, 2)*200704) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 2), 385)*3136)) + (blockIdx.y*448)) + (floordiv(floormod((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 2), 385), 55)*56)) + floormod((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 2), 55))]
          }
        }
        if (((threadIdx.z_1*49) + (threadIdx.x_1*4)) < 767) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 3)] = (float32*)placeholder_9[((((((floordiv(blockIdx.z, 2)*200704) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 3), 385)*3136)) + (blockIdx.y*448)) + (floordiv(floormod((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 3), 385), 55)*56)) + floormod((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + 3), 55))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      if (((threadIdx.z_2*4) + floordiv(threadIdx.x_2, 2)) < 64) {
        if (((threadIdx.z_2*8) + threadIdx.x_2) < 128) {
          if (threadIdx.x_2 < 8) {
            placeholder.shared[((threadIdx.z_2*8) + threadIdx.x_2)] = (float32*)placeholder_11[(((((floormod(blockIdx.z, 2)*4096) + (threadIdx.z_2*256)) + (floordiv(threadIdx.x_2, 2)*64)) + (rc.outer*2)) + floormod(threadIdx.x_2, 2))]
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 110)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 138)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 220)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 248)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 330)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 358)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 110)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 138)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 220)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 248)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 330)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 358)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 110)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 138)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 220)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 248)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 330)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 358)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 110)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 138)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 220)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 248)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 330)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 358)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 385)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 413)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 495)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 523)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 605)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 633)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 715)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 743)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 385)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 413)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 495)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 523)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 605)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 633)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 715)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 743)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 385)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 413)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 495)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 523)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 605)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 633)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 715)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 743)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 385)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 413)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 495)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 523)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 605)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 633)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 715)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 743)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
    }
    T_relu_2[((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x)] = max((((float32*)compute[0] + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4))]) + (float32*)placeholder_10[((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 14)] = max((((float32*)compute[16] + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4))]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 14)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 28)] = max((((float32*)compute[1] + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4))]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 28)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 42)] = max((((float32*)compute[17] + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4))]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 42)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56)] = max((((float32*)compute[2] + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4))]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 70)] = max((((float32*)compute[18] + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4))]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 70)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 84)] = max((((float32*)compute[3] + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4))]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 84)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 98)] = max((((float32*)compute[19] + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4))]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 98)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 784)] = max((((float32*)compute[4] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 784)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 798)] = max((((float32*)compute[20] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 798)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 812)] = max((((float32*)compute[5] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 812)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 826)] = max((((float32*)compute[21] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 826)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 840)] = max((((float32*)compute[6] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 840)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 854)] = max((((float32*)compute[22] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 854)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 868)] = max((((float32*)compute[7] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 868)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 882)] = max((((float32*)compute[23] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 882)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1568)] = max((((float32*)compute[8] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1568)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1582)] = max((((float32*)compute[24] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1582)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1596)] = max((((float32*)compute[9] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1596)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1610)] = max((((float32*)compute[25] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1610)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1624)] = max((((float32*)compute[10] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1624)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1638)] = max((((float32*)compute[26] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1638)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1652)] = max((((float32*)compute[11] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1652)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1666)] = max((((float32*)compute[27] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 1666)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2352)] = max((((float32*)compute[12] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2352)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2366)] = max((((float32*)compute[28] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2366)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2380)] = max((((float32*)compute[13] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2380)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2394)] = max((((float32*)compute[29] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2394)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2408)] = max((((float32*)compute[14] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2408)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2422)] = max((((float32*)compute[30] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2422)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2436)] = max((((float32*)compute[15] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2436)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2450)] = max((((float32*)compute[31] + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_10[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 2450)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_3", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 64, 56, 56], []),
             placeholder_3: Buffer(placeholder_8: handle, float32, [1, 64, 1, 1], []),
             placeholder: Buffer(placeholder_9: handle, float32, [6, 6, 64, 64], []),
             placeholder_2: Buffer(placeholder_10: handle, float32, [32, 64, 56, 56], []),
             placeholder_1: Buffer(placeholder_11: handle, float32, [32, 64, 56, 56], [])}
  buffer_map = {placeholder_6: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, placeholder_7: placeholder_3, T_relu_1: T_relu} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [14450688]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [14450688]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 3136;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [36]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [36]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 6) {
        for (nu: int32, 0, 6) {
          d[((eps*6) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*4) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*4) + eps) < 57)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 14)*4) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 14)*4) + nu) < 57)), (float32*)placeholder_10[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 6272), 196)*200704) + (floordiv(((blockIdx.x*128) + threadIdx.x), 6272)*3136)) + (floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*224)) + (eps*56)) + (floormod(((blockIdx.x*128) + threadIdx.x), 14)*4)) + nu) - 57)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[1]*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[3]*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[4])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[6]*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[7]*-1.5f32)*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[8]*-1.5f32)*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[9]*-1.5f32)*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[10]*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[12]*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[13]*-2f32)*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[14]*-2f32)*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[15]*-2f32)*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[16]*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[18]*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[19]*1.5f32)*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[20]*1.5f32)*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[21]*1.5f32)*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[22]*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[24])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[25]*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[26]*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[27]*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[28])
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[1])
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[2]*-2.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[3]*0.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[4])
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[7]*-1.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[8]*-1.5f32)*-2.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1.5f32)*0.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[13]*-2f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[14]*-2f32)*-2.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[15]*-2f32)*0.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[16]*-2f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[19]*1.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[20]*1.5f32)*-2.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[21]*1.5f32)*0.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[22]*1.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[25])
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[26]*-2.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[27]*0.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[28])
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[1]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[2]*0.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[3]*2.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[4])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[7]*-1.5f32)*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[8]*-1.5f32)*0.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[9]*-1.5f32)*2.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[13]*-2f32)*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[14]*-2f32)*0.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[15]*-2f32)*2.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[16]*-2f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[19]*1.5f32)*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[20]*1.5f32)*0.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[21]*1.5f32)*2.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[22]*1.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[25]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[26]*0.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[27]*2.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[28])
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[2]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[3]*2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[4])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[7]*-1.5f32)*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[8]*-1.5f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1.5f32)*2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[10]*-1.5f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[13]*-2f32)*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[14]*-2f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[15]*-2f32)*2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[16]*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[19]*1.5f32)*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[20]*1.5f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[21]*1.5f32)*2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[22]*1.5f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[25]*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[26]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[27]*2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[28])
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[1]*0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[2]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[3]*-0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[4])
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[7]*-1.5f32)*0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[8]*-1.5f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[9]*-1.5f32)*-0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[13]*-2f32)*0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[14]*-2f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[15]*-2f32)*-0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[16]*-2f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[19]*1.5f32)*0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[20]*1.5f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[21]*1.5f32)*-0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[22]*1.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[25]*0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[26]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[27]*-0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[28])
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[1])
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[2]*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[3]*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[4]*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[5])
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[7]*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[8]*-1.5f32)*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[9]*-1.5f32)*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[10]*-1.5f32)*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[11]*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[13]*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[14]*-2f32)*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[15]*-2f32)*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[16]*-2f32)*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[17]*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[19]*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[20]*1.5f32)*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[21]*1.5f32)*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[22]*1.5f32)*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[23]*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[25])
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[26]*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[27]*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[28]*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[29])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[6])
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[7]*-1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[8]*-2f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[9]*1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[12]*-2.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[13]*-2.5f32)*-1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[14]*-2.5f32)*-2f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[15]*-2.5f32)*1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[16]*-2.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[18]*0.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[19]*0.5f32)*-1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[20]*0.5f32)*-2f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[21]*0.5f32)*1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[22]*0.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[24])
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[25]*-1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[26]*-2f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[27]*1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[28])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[7])
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[8]*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[10])
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[13]*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[14]*-2.5f32)*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[15]*-2.5f32)*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[16]*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[19]*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[20]*0.5f32)*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[21]*0.5f32)*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[22]*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[25])
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[26]*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[27]*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[28])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[7]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[8]*0.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[9]*2.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[10])
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[13]*-2.5f32)*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[14]*-2.5f32)*0.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[15]*-2.5f32)*2.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[16]*-2.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[19]*0.5f32)*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[20]*0.5f32)*0.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[21]*0.5f32)*2.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[22]*0.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[25]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[26]*0.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[27]*2.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[28])
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[7]*-2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[8]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[13]*-2.5f32)*-2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[14]*-2.5f32)*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[15]*-2.5f32)*2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[16]*-2.5f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[19]*0.5f32)*-2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[20]*0.5f32)*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[21]*0.5f32)*2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[22]*0.5f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[25]*-2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[26]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[27]*2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[28])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[7]*0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[8]*-1f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[9]*-0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[13]*-2.5f32)*0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[14]*-2.5f32)*-1f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[15]*-2.5f32)*-0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[16]*-2.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[19]*0.5f32)*0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[20]*0.5f32)*-1f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[21]*0.5f32)*-0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[22]*0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[25]*0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[26]*-1f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[27]*-0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[28])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[8]*-1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-2f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[10]*1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[13]*-2.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[14]*-2.5f32)*-1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[15]*-2.5f32)*-2f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[16]*-2.5f32)*1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[17]*-2.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[19]*0.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[20]*0.5f32)*-1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[21]*0.5f32)*-2f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[22]*0.5f32)*1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[23]*0.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[25])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[26]*-1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[27]*-2f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[28]*1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[29])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[6]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[7]*-1f32)*-1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[8]*-1f32)*-2f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[9]*-1f32)*1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[10]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[12]*0.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[13]*0.5f32)*-1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[14]*0.5f32)*-2f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[15]*0.5f32)*1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[16]*0.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[18]*2.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[19]*2.5f32)*-1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[20]*2.5f32)*-2f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[21]*2.5f32)*1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[22]*2.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[24])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[25]*-1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[26]*-2f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[27]*1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[28])
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[7]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[8]*-1f32)*-2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[9]*-1f32)*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[10]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[14]*0.5f32)*-2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[15]*0.5f32)*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[16]*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[19]*2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[20]*2.5f32)*-2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[21]*2.5f32)*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[22]*2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[25])
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[26]*-2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[27]*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[28])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[7]*-1f32)*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[8]*-1f32)*0.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[9]*-1f32)*2.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[10]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[13]*0.5f32)*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[14]*0.5f32)*0.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[15]*0.5f32)*2.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[16]*0.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[19]*2.5f32)*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[20]*2.5f32)*0.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[21]*2.5f32)*2.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[22]*2.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[25]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[26]*0.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[27]*2.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[28])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[7]*-1f32)*-2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[8]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[9]*-1f32)*2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[10]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[13]*0.5f32)*-2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[14]*0.5f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[15]*0.5f32)*2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[16]*0.5f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[19]*2.5f32)*-2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[20]*2.5f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[21]*2.5f32)*2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[22]*2.5f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[25]*-2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[26]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[27]*2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[28])
      data_pack.local[16] = 0f32
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[7]*-1f32)*0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[8]*-1f32)*-1f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[9]*-1f32)*-0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[10]*-1f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[13]*0.5f32)*0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[14]*0.5f32)*-1f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[15]*0.5f32)*-0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[16]*0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[19]*2.5f32)*0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[20]*2.5f32)*-1f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[21]*2.5f32)*-0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[22]*2.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[25]*0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[26]*-1f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[27]*-0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (float32*)d[28])
      data_pack.local[17] = 0f32
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[7]*-1f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[8]*-1f32)*-1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[9]*-1f32)*-2f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[10]*-1f32)*1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[11]*-1f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[13]*0.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[14]*0.5f32)*-1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[15]*0.5f32)*-2f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[16]*0.5f32)*1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[17]*0.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[19]*2.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[20]*2.5f32)*-1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[21]*2.5f32)*-2f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[22]*2.5f32)*1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[23]*2.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (float32*)d[25])
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[26]*-1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[27]*-2f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[28]*1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (float32*)d[29])
      data_pack.local[18] = 0f32
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[6]*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[7]*-2f32)*-1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[8]*-2f32)*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[9]*-2f32)*1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[10]*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[12]*-1f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[13]*-1f32)*-1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[14]*-1f32)*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[15]*-1f32)*1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[16]*-1f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[18]*2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[19]*2f32)*-1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[20]*2f32)*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[21]*2f32)*1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[22]*2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (float32*)d[24])
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[25]*-1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[26]*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[27]*1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (float32*)d[28])
      data_pack.local[19] = 0f32
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[7]*-2f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[8]*-2f32)*-2.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[9]*-2f32)*0.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[10]*-2f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[13]*-1f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[14]*-1f32)*-2.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[15]*-1f32)*0.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[16]*-1f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[19]*2f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[20]*2f32)*-2.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[21]*2f32)*0.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[22]*2f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (float32*)d[25])
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[26]*-2.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[27]*0.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (float32*)d[28])
      data_pack.local[20] = 0f32
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[7]*-2f32)*-1f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[8]*-2f32)*0.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[9]*-2f32)*2.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[10]*-2f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[13]*-1f32)*-1f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[14]*-1f32)*0.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[15]*-1f32)*2.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[16]*-1f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[19]*2f32)*-1f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[20]*2f32)*0.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[21]*2f32)*2.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[22]*2f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[25]*-1f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[26]*0.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[27]*2.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (float32*)d[28])
      data_pack.local[21] = 0f32
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[7]*-2f32)*-2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[8]*-2f32)*-1f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[9]*-2f32)*2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[10]*-2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[13]*-1f32)*-2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[14]*-1f32)*-1f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[15]*-1f32)*2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[16]*-1f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[19]*2f32)*-2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[20]*2f32)*-1f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[21]*2f32)*2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[22]*2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[25]*-2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[26]*-1f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[27]*2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (float32*)d[28])
      data_pack.local[22] = 0f32
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[7]*-2f32)*0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[8]*-2f32)*-1f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[9]*-2f32)*-0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[10]*-2f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[13]*-1f32)*0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[14]*-1f32)*-1f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[15]*-1f32)*-0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[16]*-1f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[19]*2f32)*0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[20]*2f32)*-1f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[21]*2f32)*-0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[22]*2f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[25]*0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[26]*-1f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[27]*-0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (float32*)d[28])
      data_pack.local[23] = 0f32
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[7]*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[8]*-2f32)*-1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[9]*-2f32)*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[10]*-2f32)*1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[11]*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[13]*-1f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[14]*-1f32)*-1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[15]*-1f32)*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[16]*-1f32)*1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[17]*-1f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[19]*2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[20]*2f32)*-1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[21]*2f32)*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[22]*2f32)*1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[23]*2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (float32*)d[25])
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[26]*-1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[27]*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[28]*1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (float32*)d[29])
      data_pack.local[24] = 0f32
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[6]*0.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[7]*0.5f32)*-1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[8]*0.5f32)*-2f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[9]*0.5f32)*1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[10]*0.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[12]*-1f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[13]*-1f32)*-1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[14]*-1f32)*-2f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[15]*-1f32)*1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[16]*-1f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[18]*-0.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[19]*-0.5f32)*-1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[20]*-0.5f32)*-2f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[21]*-0.5f32)*1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[22]*-0.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (float32*)d[24])
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[25]*-1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[26]*-2f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[27]*1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (float32*)d[28])
      data_pack.local[25] = 0f32
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[7]*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[8]*0.5f32)*-2.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[9]*0.5f32)*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[10]*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[13]*-1f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[14]*-1f32)*-2.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[15]*-1f32)*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[16]*-1f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[19]*-0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[20]*-0.5f32)*-2.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[21]*-0.5f32)*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[22]*-0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (float32*)d[25])
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[26]*-2.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[27]*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (float32*)d[28])
      data_pack.local[26] = 0f32
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[7]*0.5f32)*-1f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[8]*0.5f32)*0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[9]*0.5f32)*2.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[10]*0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[13]*-1f32)*-1f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[14]*-1f32)*0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[15]*-1f32)*2.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[16]*-1f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[19]*-0.5f32)*-1f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[20]*-0.5f32)*0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[21]*-0.5f32)*2.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[22]*-0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[25]*-1f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[26]*0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[27]*2.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (float32*)d[28])
      data_pack.local[27] = 0f32
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[7]*0.5f32)*-2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[8]*0.5f32)*-1f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[9]*0.5f32)*2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[10]*0.5f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[13]*-1f32)*-2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[14]*-1f32)*-1f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[15]*-1f32)*2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[16]*-1f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[19]*-0.5f32)*-2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[20]*-0.5f32)*-1f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[21]*-0.5f32)*2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[22]*-0.5f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[25]*-2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[26]*-1f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[27]*2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (float32*)d[28])
      data_pack.local[28] = 0f32
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[7]*0.5f32)*0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[8]*0.5f32)*-1f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[9]*0.5f32)*-0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[10]*0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[13]*-1f32)*0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[14]*-1f32)*-1f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[15]*-1f32)*-0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[16]*-1f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[19]*-0.5f32)*0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[20]*-0.5f32)*-1f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[21]*-0.5f32)*-0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[22]*-0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[25]*0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[26]*-1f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[27]*-0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (float32*)d[28])
      data_pack.local[29] = 0f32
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[7]*0.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[8]*0.5f32)*-1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[9]*0.5f32)*-2f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[10]*0.5f32)*1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[11]*0.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[13]*-1f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[14]*-1f32)*-1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[15]*-1f32)*-2f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[16]*-1f32)*1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[17]*-1f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[19]*-0.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[20]*-0.5f32)*-1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[21]*-0.5f32)*-2f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[22]*-0.5f32)*1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[23]*-0.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (float32*)d[25])
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[26]*-1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[27]*-2f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[28]*1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (float32*)d[29])
      data_pack.local[30] = 0f32
      data_pack.local[30] = ((float32*)data_pack.local[30] + (float32*)d[6])
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[7]*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[8]*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[9]*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (float32*)d[10])
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[12]*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[13]*-1.5f32)*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[14]*-1.5f32)*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[15]*-1.5f32)*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[16]*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[18]*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[19]*-2f32)*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[20]*-2f32)*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[21]*-2f32)*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[22]*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[24]*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[25]*1.5f32)*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[26]*1.5f32)*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[27]*1.5f32)*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[28]*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (float32*)d[30])
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[31]*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[32]*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[33]*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (float32*)d[34])
      data_pack.local[31] = 0f32
      data_pack.local[31] = ((float32*)data_pack.local[31] + (float32*)d[7])
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[8]*-2.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[9]*0.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (float32*)d[10])
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[13]*-1.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[14]*-1.5f32)*-2.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[15]*-1.5f32)*0.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[16]*-1.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[19]*-2f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[20]*-2f32)*-2.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[21]*-2f32)*0.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[22]*-2f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[25]*1.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[26]*1.5f32)*-2.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[27]*1.5f32)*0.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[28]*1.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (float32*)d[31])
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[32]*-2.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[33]*0.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (float32*)d[34])
      data_pack.local[32] = 0f32
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[7]*-1f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[8]*0.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[9]*2.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (float32*)d[10])
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[13]*-1.5f32)*-1f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[14]*-1.5f32)*0.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[15]*-1.5f32)*2.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[16]*-1.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[19]*-2f32)*-1f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[20]*-2f32)*0.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[21]*-2f32)*2.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[22]*-2f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[25]*1.5f32)*-1f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[26]*1.5f32)*0.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[27]*1.5f32)*2.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[28]*1.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[31]*-1f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[32]*0.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[33]*2.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (float32*)d[34])
      data_pack.local[33] = 0f32
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[7]*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[8]*-1f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[9]*2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (float32*)d[10])
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[13]*-1.5f32)*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[14]*-1.5f32)*-1f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[15]*-1.5f32)*2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[16]*-1.5f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[19]*-2f32)*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[20]*-2f32)*-1f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[21]*-2f32)*2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[22]*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[25]*1.5f32)*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[26]*1.5f32)*-1f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[27]*1.5f32)*2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[28]*1.5f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[31]*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[32]*-1f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[33]*2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (float32*)d[34])
      data_pack.local[34] = 0f32
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[7]*0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[8]*-1f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[9]*-0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (float32*)d[10])
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[13]*-1.5f32)*0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[14]*-1.5f32)*-1f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[15]*-1.5f32)*-0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[16]*-1.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[19]*-2f32)*0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[20]*-2f32)*-1f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[21]*-2f32)*-0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[22]*-2f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[25]*1.5f32)*0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[26]*1.5f32)*-1f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[27]*1.5f32)*-0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[28]*1.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[31]*0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[32]*-1f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[33]*-0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (float32*)d[34])
      data_pack.local[35] = 0f32
      data_pack.local[35] = ((float32*)data_pack.local[35] + (float32*)d[7])
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[8]*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[9]*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[10]*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (float32*)d[11])
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[13]*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[14]*-1.5f32)*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[15]*-1.5f32)*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[16]*-1.5f32)*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[17]*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[19]*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[20]*-2f32)*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[21]*-2f32)*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[22]*-2f32)*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[23]*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[25]*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[26]*1.5f32)*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[27]*1.5f32)*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[28]*1.5f32)*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[29]*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (float32*)d[31])
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[32]*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[33]*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[34]*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (float32*)d[35])
      for (eps_1: int32, 0, 6) {
        for (nu_1: int32, 0, 6) {
          data_pack[((((eps_1*2408448) + (nu_1*401408)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*6) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 36;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [32]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [128]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [256]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 98;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16 {
      for (co.c.init: int32, 0, 2) {
        bgemm.local[co.c.init] = 0f32
        bgemm.local[(co.c.init + 8)] = 0f32
        bgemm.local[(co.c.init + 16)] = 0f32
        bgemm.local[(co.c.init + 24)] = 0f32
        bgemm.local[(co.c.init + 2)] = 0f32
        bgemm.local[(co.c.init + 10)] = 0f32
        bgemm.local[(co.c.init + 18)] = 0f32
        bgemm.local[(co.c.init + 26)] = 0f32
        bgemm.local[(co.c.init + 4)] = 0f32
        bgemm.local[(co.c.init + 12)] = 0f32
        bgemm.local[(co.c.init + 20)] = 0f32
        bgemm.local[(co.c.init + 28)] = 0f32
        bgemm.local[(co.c.init + 6)] = 0f32
        bgemm.local[(co.c.init + 14)] = 0f32
        bgemm.local[(co.c.init + 22)] = 0f32
        bgemm.local[(co.c.init + 30)] = 0f32
      }
      for (ci.outer: int32, 0, 16) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 2) {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          placeholder.shared[((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*64) + ((threadIdx.y_1*16) + threadIdx.x_2))] = (float32*)placeholder_9[((((((blockIdx.z*4096) + (ci.outer*256)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128)) + (floordiv(((threadIdx.y_1*16) + threadIdx.x_2), 32)*64)) + (blockIdx.y*32)) + floormod(((threadIdx.y_1*16) + threadIdx.x_2), 32))]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 4) {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          data_pack.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*64) + (threadIdx.y_2*16)) + threadIdx.x_3)] = (float32*)data_pack[((((((blockIdx.z*401408) + (ci.outer*25088)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*6272)) + (blockIdx.x_1*64)) + (threadIdx.y_2*16)) + threadIdx.x_3)]
        }
        for (ci.inner: int32, 0, 4) {
          for (co.c: int32, 0, 2) {
            bgemm.local[co.c] = ((float32*)bgemm.local[co.c] + ((float32*)placeholder.shared[(((ci.inner*32) + (threadIdx.y*2)) + co.c)]*(float32*)data_pack.shared[((ci.inner*64) + threadIdx.x_1)]))
            bgemm.local[(co.c + 8)] = ((float32*)bgemm.local[(co.c + 8)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 8)]*(float32*)data_pack.shared[((ci.inner*64) + threadIdx.x_1)]))
            bgemm.local[(co.c + 16)] = ((float32*)bgemm.local[(co.c + 16)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 16)]*(float32*)data_pack.shared[((ci.inner*64) + threadIdx.x_1)]))
            bgemm.local[(co.c + 24)] = ((float32*)bgemm.local[(co.c + 24)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 24)]*(float32*)data_pack.shared[((ci.inner*64) + threadIdx.x_1)]))
            bgemm.local[(co.c + 2)] = ((float32*)bgemm.local[(co.c + 2)] + ((float32*)placeholder.shared[(((ci.inner*32) + (threadIdx.y*2)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 10)] = ((float32*)bgemm.local[(co.c + 10)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 8)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 18)] = ((float32*)bgemm.local[(co.c + 18)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 16)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 26)] = ((float32*)bgemm.local[(co.c + 26)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 24)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 4)] = ((float32*)bgemm.local[(co.c + 4)] + ((float32*)placeholder.shared[(((ci.inner*32) + (threadIdx.y*2)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 12)] = ((float32*)bgemm.local[(co.c + 12)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 8)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 20)] = ((float32*)bgemm.local[(co.c + 20)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 16)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 28)] = ((float32*)bgemm.local[(co.c + 28)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 24)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 6)] = ((float32*)bgemm.local[(co.c + 6)] + ((float32*)placeholder.shared[(((ci.inner*32) + (threadIdx.y*2)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 14)] = ((float32*)bgemm.local[(co.c + 14)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 8)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 22)] = ((float32*)bgemm.local[(co.c + 22)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 16)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 30)] = ((float32*)bgemm.local[(co.c + 30)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 24)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 48)]))
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 2) {
        bgemm[((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1)] = (float32*)bgemm.local[co.inner.inner.inner]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 50176)] = (float32*)bgemm.local[(co.inner.inner.inner + 8)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 100352)] = (float32*)bgemm.local[(co.inner.inner.inner + 16)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 150528)] = (float32*)bgemm.local[(co.inner.inner.inner + 24)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 16)] = (float32*)bgemm.local[(co.inner.inner.inner + 2)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 50192)] = (float32*)bgemm.local[(co.inner.inner.inner + 10)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 100368)] = (float32*)bgemm.local[(co.inner.inner.inner + 18)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 150544)] = (float32*)bgemm.local[(co.inner.inner.inner + 26)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 32)] = (float32*)bgemm.local[(co.inner.inner.inner + 4)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 50208)] = (float32*)bgemm.local[(co.inner.inner.inner + 12)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 100384)] = (float32*)bgemm.local[(co.inner.inner.inner + 20)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 150560)] = (float32*)bgemm.local[(co.inner.inner.inner + 28)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 48)] = (float32*)bgemm.local[(co.inner.inner.inner + 6)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 50224)] = (float32*)bgemm.local[(co.inner.inner.inner + 14)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 100400)] = (float32*)bgemm.local[(co.inner.inner.inner + 22)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 150576)] = (float32*)bgemm.local[(co.inner.inner.inner + 30)]
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 3136;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [16]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 401408)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1204224)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 401408)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1204224)]*0.5f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)]*-2f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.5f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-2f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.5f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-2f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.5f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*-2f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*0.5f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-2f32))
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 401408)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1204224)]*0.25f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)]*4f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.25f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*4f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.25f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*4f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.25f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*4f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*0.25f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*4f32))
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 401408)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1204224)]*0.125f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)]*-8f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2007040)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.125f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-8f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4415488)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.125f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-8f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6823936)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.125f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*-8f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9232384)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*0.125f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-8f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11640832)])
      inverse[4] = 0f32
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)]*-1f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32))
      inverse[4] = ((float32*)inverse[4] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[4] = ((float32*)inverse[4] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[4] = ((float32*)inverse[4] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[4] = ((float32*)inverse[4] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)])
      inverse[4] = ((float32*)inverse[4] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*0.5f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.5f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.5f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.5f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.5f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)]*-2f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-2f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-2f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-2f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-2f32))
      inverse[5] = 0f32
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32)*-1f32))
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.5f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-2f32))
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[5] = ((float32*)inverse[5] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.5f32))
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-2f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.5f32)*-1f32))
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.5f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.5f32)*0.5f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.5f32)*-2f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-2f32)*-1f32))
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-2f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-2f32)*0.5f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-2f32)*-2f32))
      inverse[6] = 0f32
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.25f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*4f32))
      inverse[6] = ((float32*)inverse[6] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[6] = ((float32*)inverse[6] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.25f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*4f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.5f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.5f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.5f32)*0.25f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.5f32)*4f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-2f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-2f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-2f32)*0.25f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-2f32)*4f32))
      inverse[7] = 0f32
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32)*-1f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.125f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-8f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4415488)]*-1f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[7] = ((float32*)inverse[7] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.125f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-8f32))
      inverse[7] = ((float32*)inverse[7] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6823936)])
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.5f32)*-1f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.5f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.5f32)*0.125f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.5f32)*-8f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9232384)]*0.5f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-2f32)*-1f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-2f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-2f32)*0.125f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-2f32)*-8f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11640832)]*-2f32))
      inverse[8] = 0f32
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*0.25f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.25f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.25f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.25f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.25f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)]*4f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*4f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*4f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*4f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*4f32))
      inverse[9] = 0f32
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[9] = ((float32*)inverse[9] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.5f32))
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-2f32))
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[9] = ((float32*)inverse[9] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.5f32))
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-2f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.25f32)*-1f32))
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.25f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.25f32)*0.5f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.25f32)*-2f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*4f32)*-1f32))
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*4f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*4f32)*0.5f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*4f32)*-2f32))
      inverse[10] = 0f32
      inverse[10] = ((float32*)inverse[10] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)])
      inverse[10] = ((float32*)inverse[10] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.25f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*4f32))
      inverse[10] = ((float32*)inverse[10] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[10] = ((float32*)inverse[10] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.25f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*4f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.25f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.25f32))
      inverse[10] = ((float32*)inverse[10] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.25f32)*0.25f32))
      inverse[10] = ((float32*)inverse[10] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.25f32)*4f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*4f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*4f32))
      inverse[10] = ((float32*)inverse[10] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*4f32)*0.25f32))
      inverse[10] = ((float32*)inverse[10] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*4f32)*4f32))
      inverse[11] = 0f32
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[11] = ((float32*)inverse[11] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.125f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-8f32))
      inverse[11] = ((float32*)inverse[11] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4415488)])
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[11] = ((float32*)inverse[11] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.125f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-8f32))
      inverse[11] = ((float32*)inverse[11] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6823936)])
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.25f32)*-1f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.25f32))
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.25f32)*0.125f32))
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.25f32)*-8f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9232384)]*0.25f32))
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*4f32)*-1f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*4f32))
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*4f32)*0.125f32))
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*4f32)*-8f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11640832)]*4f32))
      inverse[12] = 0f32
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)]*-1f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32))
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*0.125f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.125f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.125f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.125f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.125f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)]*-8f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-8f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-8f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-8f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-8f32))
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12042240)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12443648)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12845056)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13246464)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13647872)])
      inverse[13] = 0f32
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32)*-1f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.5f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-2f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[13] = ((float32*)inverse[13] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.5f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-2f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.125f32)*-1f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.125f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.125f32)*0.5f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.125f32)*-2f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-8f32)*-1f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-8f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-8f32)*0.5f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-8f32)*-2f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12443648)]*-1f32))
      inverse[13] = ((float32*)inverse[13] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12845056)])
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13246464)]*0.5f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13647872)]*-2f32))
      inverse[14] = 0f32
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.25f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*4f32))
      inverse[14] = ((float32*)inverse[14] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[14] = ((float32*)inverse[14] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.25f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*4f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.125f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.125f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.125f32)*0.25f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.125f32)*4f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-8f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-8f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-8f32)*0.25f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-8f32)*4f32))
      inverse[14] = ((float32*)inverse[14] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12443648)])
      inverse[14] = ((float32*)inverse[14] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12845056)])
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13246464)]*0.25f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13647872)]*4f32))
      inverse[15] = 0f32
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32)*-1f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.125f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-8f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4415488)]*-1f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[15] = ((float32*)inverse[15] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.125f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-8f32))
      inverse[15] = ((float32*)inverse[15] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6823936)])
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.125f32)*-1f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.125f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.125f32)*0.125f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.125f32)*-8f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9232384)]*0.125f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-8f32)*-1f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-8f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-8f32)*0.125f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-8f32)*-8f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11640832)]*-8f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12443648)]*-1f32))
      inverse[15] = ((float32*)inverse[15] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12845056)])
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13246464)]*0.125f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13647872)]*-8f32))
      inverse[15] = ((float32*)inverse[15] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 14049280)])
      for (ax2.inner: int32, 0, 4) {
        for (ax3.inner: int32, 0, 4) {
          T_relu_2[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 14)*224) + (ax2.inner*56)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 14)*4)) + ax3.inner)] = max(((float32*)placeholder_11[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 14)*224) + (ax2.inner*56)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 14)*4)) + ax3.inner)] + ((float32*)inverse[((ax2.inner*4) + ax3.inner)] + (float32*)placeholder_8[floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)])), 0f32)
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation pool.cuda for op nn.max_pool2d
primfn(placeholder_1: handle, tensor_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_max_pool2d", "tir.noalias": True}
  buffers = {tensor: Buffer(tensor_2: handle, float32, [32, 64, 56, 56], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 64, 112, 112], [])}
  buffer_map = {placeholder_1: placeholder, tensor_1: tensor} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6272;
  attr [tensor.local: handle] "storage_scope" = "local";
  allocate(tensor.local, float32, [1]);
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    tensor.local[0] = -3.40282e+38f32
    for (rv: int32, 0, 3) {
      for (rv_1: int32, 0, 3) {
        tensor.local[0] = max((float32*)tensor.local[0], @tir.if_then_else(((1 <= ((floordiv(floormod(((blockIdx.x*1024) + threadIdx.x), 3136), 56)*2) + rv)) && (1 <= ((floormod(((blockIdx.x*1024) + threadIdx.x), 56)*2) + rv_1))), (float32*)placeholder_2[(((((floordiv(((blockIdx.x*1024) + threadIdx.x), 56)*224) + (rv*112)) + (floormod(((blockIdx.x*1024) + threadIdx.x), 56)*2)) + rv_1) - 113)], -3.40282e+38f32, dtype=float32))
      }
    }
    tensor_2[((blockIdx.x*1024) + threadIdx.x)] = (float32*)tensor.local[0]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_nn_relu", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_6: handle, float32, [32, 3, 224, 224], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 64, 112, 112], []),
             placeholder_2: Buffer(placeholder_7: handle, float32, [1, 64, 1, 1], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [64, 3, 7, 7], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1221]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [1568]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 8;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 7;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 2;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 8 {
    compute[0] = 0f32
    compute[1] = 0f32
    compute[2] = 0f32
    compute[3] = 0f32
    compute[4] = 0f32
    compute[5] = 0f32
    compute[6] = 0f32
    compute[7] = 0f32
    compute[8] = 0f32
    compute[9] = 0f32
    compute[10] = 0f32
    compute[11] = 0f32
    compute[12] = 0f32
    compute[13] = 0f32
    compute[14] = 0f32
    compute[15] = 0f32
    compute[16] = 0f32
    compute[17] = 0f32
    compute[18] = 0f32
    compute[19] = 0f32
    compute[20] = 0f32
    compute[21] = 0f32
    compute[22] = 0f32
    compute[23] = 0f32
    compute[24] = 0f32
    compute[25] = 0f32
    compute[26] = 0f32
    compute[27] = 0f32
    compute[28] = 0f32
    compute[29] = 0f32
    compute[30] = 0f32
    compute[31] = 0f32
    compute[32] = 0f32
    compute[33] = 0f32
    compute[34] = 0f32
    compute[35] = 0f32
    compute[36] = 0f32
    compute[37] = 0f32
    compute[38] = 0f32
    compute[39] = 0f32
    compute[40] = 0f32
    compute[41] = 0f32
    compute[42] = 0f32
    compute[43] = 0f32
    compute[44] = 0f32
    compute[45] = 0f32
    compute[46] = 0f32
    compute[47] = 0f32
    compute[48] = 0f32
    compute[49] = 0f32
    compute[50] = 0f32
    compute[51] = 0f32
    compute[52] = 0f32
    compute[53] = 0f32
    compute[54] = 0f32
    compute[55] = 0f32
    for (rc.outer: int32, 0, 3) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 2;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 8 {
        pad_temp.shared[(((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10))] = @tir.if_then_else(((((3 <= ((blockIdx.y*28) + floordiv((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)), 37))) && (((blockIdx.y*28) + floordiv((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)), 37)) < 227)) && (3 <= ((blockIdx.x*32) + floormod((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)), 37)))) && (((blockIdx.x*32) + floormod((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)), 37)) < 227)), (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 2)*150528) + (rc.outer*50176)) + (blockIdx.y*6272)) + (floordiv((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)), 37)*224)) + (blockIdx.x*32)) + floormod((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)), 37)) - 675)], 0f32, dtype=float32)
        pad_temp.shared[((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 1)] = @tir.if_then_else(((((3 <= ((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 1), 37))) && (((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 1), 37)) < 227)) && (3 <= ((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 1), 37)))) && (((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 1), 37)) < 227)), (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 2)*150528) + (rc.outer*50176)) + (blockIdx.y*6272)) + (floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 1), 37)*224)) + (blockIdx.x*32)) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 1), 37)) - 675)], 0f32, dtype=float32)
        pad_temp.shared[((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 2)] = @tir.if_then_else(((((3 <= ((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 2), 37))) && (((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 2), 37)) < 227)) && (3 <= ((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 2), 37)))) && (((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 2), 37)) < 227)), (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 2)*150528) + (rc.outer*50176)) + (blockIdx.y*6272)) + (floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 2), 37)*224)) + (blockIdx.x*32)) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 2), 37)) - 675)], 0f32, dtype=float32)
        if ((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) < 1218) {
          pad_temp.shared[((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 3)] = @tir.if_then_else(((((3 <= ((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 3), 37))) && (((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 3), 37)) < 227)) && (3 <= ((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 3), 37)))) && (((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 3), 37)) < 227)), (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 2)*150528) + (rc.outer*50176)) + (blockIdx.y*6272)) + (floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 3), 37)*224)) + (blockIdx.x*32)) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 3), 37)) - 675)], 0f32, dtype=float32)
        }
        if ((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) < 1217) {
          pad_temp.shared[((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 4)] = @tir.if_then_else(((((3 <= ((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 4), 37))) && (((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 4), 37)) < 227)) && (3 <= ((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 4), 37)))) && (((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 4), 37)) < 227)), (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 2)*150528) + (rc.outer*50176)) + (blockIdx.y*6272)) + (floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 4), 37)*224)) + (blockIdx.x*32)) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 4), 37)) - 675)], 0f32, dtype=float32)
        }
        if ((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) < 1216) {
          pad_temp.shared[((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 5)] = @tir.if_then_else(((((3 <= ((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 5), 37))) && (((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 5), 37)) < 227)) && (3 <= ((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 5), 37)))) && (((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 5), 37)) < 227)), (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 2)*150528) + (rc.outer*50176)) + (blockIdx.y*6272)) + (floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 5), 37)*224)) + (blockIdx.x*32)) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 5), 37)) - 675)], 0f32, dtype=float32)
        }
        if ((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) < 1215) {
          if (((threadIdx.y_1*77) + (threadIdx.x_1*10)) < 147) {
            pad_temp.shared[((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 6)] = @tir.if_then_else(((((3 <= ((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 6), 37))) && (((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 6), 37)) < 227)) && (3 <= ((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 6), 37)))) && (((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 6), 37)) < 227)), (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 2)*150528) + (rc.outer*50176)) + (blockIdx.y*6272)) + (floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 6), 37)*224)) + (blockIdx.x*32)) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 6), 37)) - 675)], 0f32, dtype=float32)
          }
        }
        if ((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) < 1214) {
          if (((threadIdx.y_1*77) + (threadIdx.x_1*10)) < 146) {
            if (threadIdx.x_1 < 7) {
              pad_temp.shared[((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 7)] = @tir.if_then_else(((((3 <= ((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 7), 37))) && (((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 7), 37)) < 227)) && (3 <= ((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 7), 37)))) && (((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 7), 37)) < 227)), (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 2)*150528) + (rc.outer*50176)) + (blockIdx.y*6272)) + (floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 7), 37)*224)) + (blockIdx.x*32)) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 7), 37)) - 675)], 0f32, dtype=float32)
            }
          }
        }
        if ((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) < 1213) {
          if (((threadIdx.y_1*77) + (threadIdx.x_1*10)) < 145) {
            if (threadIdx.x_1 < 7) {
              pad_temp.shared[((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 8)] = @tir.if_then_else(((((3 <= ((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 8), 37))) && (((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 8), 37)) < 227)) && (3 <= ((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 8), 37)))) && (((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 8), 37)) < 227)), (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 2)*150528) + (rc.outer*50176)) + (blockIdx.y*6272)) + (floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 8), 37)*224)) + (blockIdx.x*32)) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 8), 37)) - 675)], 0f32, dtype=float32)
            }
          }
        }
        if ((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) < 1212) {
          if (((threadIdx.y_1*77) + (threadIdx.x_1*10)) < 144) {
            if (threadIdx.x_1 < 7) {
              pad_temp.shared[((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 9)] = @tir.if_then_else(((((3 <= ((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 9), 37))) && (((blockIdx.y*28) + floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 9), 37)) < 227)) && (3 <= ((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 9), 37)))) && (((blockIdx.x*32) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 9), 37)) < 227)), (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 2)*150528) + (rc.outer*50176)) + (blockIdx.y*6272)) + (floordiv(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 9), 37)*224)) + (blockIdx.x*32)) + floormod(((((threadIdx.z_1*153) + (threadIdx.y_1*77)) + (threadIdx.x_1*10)) + 9), 37)) - 675)], 0f32, dtype=float32)
            }
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 2;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 8 {
        placeholder.shared[(((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13))] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv((threadIdx.x_2*13), 49)*147)) + (rc.outer*49)) + floormod((threadIdx.x_2*13), 49))]
        placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 1)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 1), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 1), 49))]
        placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 2)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 2), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 2), 49))]
        placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 3)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 3), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 3), 49))]
        placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 4)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 4), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 4), 49))]
        placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 5)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 5), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 5), 49))]
        placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 6)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 6), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 6), 49))]
        if ((((threadIdx.z_2*4) + (threadIdx.y_2*2)) + floordiv(((threadIdx.x_2*13) + 7), 49)) < 32) {
          if ((((threadIdx.z_2*28) + (threadIdx.y_2*14)) + floordiv((threadIdx.x_2*13), 7)) < 223) {
            if ((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) < 1561) {
              if (((threadIdx.y_2*98) + (threadIdx.x_2*13)) < 189) {
                if (threadIdx.x_2 < 7) {
                  placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 7)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 7), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 7), 49))]
                }
              }
            }
          }
        }
        if ((((threadIdx.z_2*4) + (threadIdx.y_2*2)) + floordiv(((threadIdx.x_2*13) + 8), 49)) < 32) {
          if ((((threadIdx.z_2*28) + (threadIdx.y_2*14)) + floordiv(((threadIdx.x_2*13) + 8), 7)) < 224) {
            if ((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) < 1560) {
              if (((threadIdx.y_2*98) + (threadIdx.x_2*13)) < 188) {
                if (threadIdx.x_2 < 7) {
                  placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 8)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 8), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 8), 49))]
                }
              }
            }
          }
        }
        if ((((threadIdx.z_2*4) + (threadIdx.y_2*2)) + floordiv(((threadIdx.x_2*13) + 9), 49)) < 32) {
          if ((((threadIdx.z_2*28) + (threadIdx.y_2*14)) + floordiv(((threadIdx.x_2*13) + 9), 7)) < 224) {
            if ((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) < 1559) {
              if (((threadIdx.y_2*98) + (threadIdx.x_2*13)) < 187) {
                if (threadIdx.x_2 < 7) {
                  placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 9)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 9), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 9), 49))]
                }
              }
            }
          }
        }
        if ((((threadIdx.z_2*4) + (threadIdx.y_2*2)) + floordiv(((threadIdx.x_2*13) + 10), 49)) < 32) {
          if ((((threadIdx.z_2*28) + (threadIdx.y_2*14)) + floordiv(((threadIdx.x_2*13) + 10), 7)) < 224) {
            if ((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) < 1558) {
              if (((threadIdx.y_2*98) + (threadIdx.x_2*13)) < 186) {
                if (threadIdx.x_2 < 7) {
                  placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 10)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 10), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 10), 49))]
                }
              }
            }
          }
        }
        if ((((threadIdx.z_2*4) + (threadIdx.y_2*2)) + floordiv(((threadIdx.x_2*13) + 11), 49)) < 32) {
          if ((((threadIdx.z_2*28) + (threadIdx.y_2*14)) + floordiv(((threadIdx.x_2*13) + 11), 7)) < 224) {
            if ((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) < 1557) {
              if (((threadIdx.y_2*98) + (threadIdx.x_2*13)) < 185) {
                if (threadIdx.x_2 < 7) {
                  placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 11)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 11), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 11), 49))]
                }
              }
            }
          }
        }
        if ((((threadIdx.z_2*4) + (threadIdx.y_2*2)) + floordiv(((threadIdx.x_2*13) + 12), 49)) < 32) {
          if ((((threadIdx.z_2*28) + (threadIdx.y_2*14)) + floordiv(((threadIdx.x_2*13) + 12), 7)) < 224) {
            if ((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) < 1556) {
              if (((threadIdx.y_2*98) + (threadIdx.x_2*13)) < 184) {
                if (threadIdx.x_2 < 7) {
                  placeholder.shared[((((threadIdx.z_2*196) + (threadIdx.y_2*98)) + (threadIdx.x_2*13)) + 12)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.y_2*294)) + (floordiv(((threadIdx.x_2*13) + 12), 49)*147)) + (rc.outer*49)) + floormod(((threadIdx.x_2*13) + 12), 49))]
                }
              }
            }
          }
        }
      }
      for (ry.inner: int32, 0, 7) {
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4))]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 2)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 74)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 76)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 148)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 150)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 222)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 224)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 296)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 298)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 370)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 372)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 444)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 446)]*(float32*)placeholder.shared[((threadIdx.z*196) + (ry.inner*7))]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4))]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 74)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 76)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 148)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 150)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 222)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 224)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 296)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 298)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 444)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 446)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 49)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4))]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 74)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 76)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 148)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 150)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 222)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 224)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 296)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 298)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 444)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 446)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 98)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4))]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 74)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 76)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 148)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 150)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 222)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 224)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 296)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 298)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 444)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 446)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 147)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 3)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 75)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 77)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 149)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 151)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 223)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 225)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 297)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 299)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 373)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 445)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 447)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 1)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 3)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 75)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 77)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 149)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 151)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 223)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 225)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 297)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 299)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 373)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 445)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 447)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 50)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 3)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 75)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 77)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 149)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 151)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 223)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 225)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 297)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 299)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 373)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 445)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 447)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 99)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 3)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 75)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 77)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 149)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 151)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 223)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 225)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 297)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 299)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 373)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 445)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 447)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 148)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 76)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 78)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 150)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 152)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 224)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 226)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 298)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 300)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 374)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 446)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 448)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 2)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 76)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 78)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 150)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 152)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 224)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 226)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 298)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 300)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 374)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 446)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 448)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 51)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 76)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 78)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 150)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 152)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 224)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 226)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 298)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 300)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 374)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 446)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 448)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 100)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 76)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 78)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 150)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 152)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 224)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 226)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 298)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 300)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 374)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 446)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 448)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 149)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 3)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 5)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 77)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 79)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 151)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 153)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 225)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 227)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 299)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 301)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 373)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 375)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 447)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 449)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 3)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 3)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 5)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 77)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 79)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 151)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 153)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 225)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 227)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 299)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 301)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 373)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 375)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 447)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 449)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 52)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 3)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 5)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 77)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 79)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 151)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 153)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 225)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 227)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 299)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 301)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 373)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 375)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 447)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 449)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 101)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 3)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 5)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 77)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 79)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 151)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 153)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 225)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 227)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 299)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 301)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 373)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 375)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 447)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 449)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 150)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 6)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 78)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 80)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 152)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 154)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 226)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 300)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 302)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 374)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 376)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 448)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 450)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 4)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 6)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 78)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 80)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 152)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 154)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 226)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 300)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 302)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 374)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 376)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 448)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 450)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 53)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 6)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 78)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 80)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 152)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 154)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 226)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 300)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 302)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 374)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 376)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 448)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 450)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 102)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 6)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 78)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 80)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 152)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 154)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 226)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 300)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 302)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 374)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 376)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 448)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 450)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 151)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 5)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 7)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 79)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 81)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 153)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 155)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 227)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 301)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 303)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 375)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 377)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 449)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 451)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 5)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 5)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 7)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 79)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 81)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 153)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 155)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 227)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 301)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 303)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 375)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 377)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 449)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 451)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 54)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 5)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 7)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 79)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 81)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 153)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 155)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 227)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 301)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 303)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 375)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 377)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 449)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 451)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 103)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 5)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 7)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 79)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 81)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 153)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 155)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 227)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 301)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 303)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 375)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 377)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 449)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 451)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 152)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 6)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 8)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 80)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 82)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 154)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 156)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 302)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 304)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 376)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 378)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 450)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 452)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 6)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 6)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 8)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 80)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 82)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 154)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 156)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 302)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 304)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 376)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 378)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 450)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 452)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 55)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 6)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 8)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 80)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 82)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 154)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 156)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 302)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 304)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 376)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 378)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 450)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 452)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 104)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 6)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 8)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 80)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 82)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 154)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 156)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 302)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 304)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 376)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 378)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 450)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((((threadIdx.y*518) + (ry.inner*37)) + (threadIdx.x*4)) + 452)]*(float32*)placeholder.shared[(((threadIdx.z*196) + (ry.inner*7)) + 153)]))
      }
    }
    T_relu_2[((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2))] = max(((float32*)compute[0] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 1)] = max(((float32*)compute[1] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 112)] = max(((float32*)compute[2] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 113)] = max(((float32*)compute[3] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 224)] = max(((float32*)compute[4] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 225)] = max(((float32*)compute[5] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 336)] = max(((float32*)compute[6] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 337)] = max(((float32*)compute[7] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 448)] = max(((float32*)compute[8] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 449)] = max(((float32*)compute[9] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 560)] = max(((float32*)compute[10] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 561)] = max(((float32*)compute[11] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 672)] = max(((float32*)compute[12] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 673)] = max(((float32*)compute[13] + (float32*)placeholder_7[((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 12544)] = max(((float32*)compute[14] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 12545)] = max(((float32*)compute[15] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 12656)] = max(((float32*)compute[16] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 12657)] = max(((float32*)compute[17] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 12768)] = max(((float32*)compute[18] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 12769)] = max(((float32*)compute[19] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 12880)] = max(((float32*)compute[20] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 12881)] = max(((float32*)compute[21] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 12992)] = max(((float32*)compute[22] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 12993)] = max(((float32*)compute[23] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 13104)] = max(((float32*)compute[24] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 13105)] = max(((float32*)compute[25] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 13216)] = max(((float32*)compute[26] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 13217)] = max(((float32*)compute[27] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25088)] = max(((float32*)compute[28] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25089)] = max(((float32*)compute[29] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25200)] = max(((float32*)compute[30] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25201)] = max(((float32*)compute[31] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25312)] = max(((float32*)compute[32] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25313)] = max(((float32*)compute[33] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25424)] = max(((float32*)compute[34] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25425)] = max(((float32*)compute[35] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25536)] = max(((float32*)compute[36] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25537)] = max(((float32*)compute[37] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25648)] = max(((float32*)compute[38] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25649)] = max(((float32*)compute[39] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25760)] = max(((float32*)compute[40] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 25761)] = max(((float32*)compute[41] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 37632)] = max(((float32*)compute[42] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 37633)] = max(((float32*)compute[43] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 37744)] = max(((float32*)compute[44] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 37745)] = max(((float32*)compute[45] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 37856)] = max(((float32*)compute[46] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 37857)] = max(((float32*)compute[47] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 37968)] = max(((float32*)compute[48] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 37969)] = max(((float32*)compute[49] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 38080)] = max(((float32*)compute[50] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 38081)] = max(((float32*)compute[51] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 38192)] = max(((float32*)compute[52] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 38193)] = max(((float32*)compute[53] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 38304)] = max(((float32*)compute[54] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*50176)) + (blockIdx.y*1568)) + (threadIdx.y*784)) + (blockIdx.x*16)) + (threadIdx.x*2)) + 38305)] = max(((float32*)compute[55] + (float32*)placeholder_7[(((floormod(blockIdx.z, 2)*32) + (threadIdx.z*4)) + 3)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 64, 56, 56], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [1, 64, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 64, 56, 56], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [6, 6, 64, 64], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [14450688]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [14450688]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 3136;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [36]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [36]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 6) {
        for (nu: int32, 0, 6) {
          d[((eps*6) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*4) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*4) + eps) < 57)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 14)*4) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 14)*4) + nu) < 57)), (float32*)placeholder_7[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 6272), 196)*200704) + (floordiv(((blockIdx.x*128) + threadIdx.x), 6272)*3136)) + (floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*224)) + (eps*56)) + (floormod(((blockIdx.x*128) + threadIdx.x), 14)*4)) + nu) - 57)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[1]*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[3]*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[4])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[6]*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[7]*-1.5f32)*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[8]*-1.5f32)*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[9]*-1.5f32)*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[10]*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[12]*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[13]*-2f32)*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[14]*-2f32)*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[15]*-2f32)*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[16]*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[18]*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[19]*1.5f32)*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[20]*1.5f32)*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[21]*1.5f32)*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[22]*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[24])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[25]*-1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[26]*-2f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[27]*1.5f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[28])
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[1])
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[2]*-2.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[3]*0.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[4])
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[7]*-1.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[8]*-1.5f32)*-2.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1.5f32)*0.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[13]*-2f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[14]*-2f32)*-2.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[15]*-2f32)*0.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[16]*-2f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[19]*1.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[20]*1.5f32)*-2.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[21]*1.5f32)*0.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[22]*1.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[25])
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[26]*-2.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[27]*0.5f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[28])
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[1]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[2]*0.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[3]*2.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[4])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[7]*-1.5f32)*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[8]*-1.5f32)*0.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[9]*-1.5f32)*2.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[13]*-2f32)*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[14]*-2f32)*0.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[15]*-2f32)*2.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[16]*-2f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[19]*1.5f32)*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[20]*1.5f32)*0.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (((float32*)d[21]*1.5f32)*2.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[22]*1.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[25]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[26]*0.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[27]*2.5f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[28])
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[2]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[3]*2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[4])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[7]*-1.5f32)*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[8]*-1.5f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1.5f32)*2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[10]*-1.5f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[13]*-2f32)*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[14]*-2f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[15]*-2f32)*2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[16]*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[19]*1.5f32)*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[20]*1.5f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[21]*1.5f32)*2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[22]*1.5f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[25]*-2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[26]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[27]*2f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[28])
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[1]*0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[2]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[3]*-0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[4])
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[7]*-1.5f32)*0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[8]*-1.5f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[9]*-1.5f32)*-0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[13]*-2f32)*0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[14]*-2f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[15]*-2f32)*-0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[16]*-2f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[19]*1.5f32)*0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[20]*1.5f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[21]*1.5f32)*-0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[22]*1.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[25]*0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[26]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[27]*-0.5f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[28])
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[1])
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[2]*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[3]*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[4]*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[5])
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[7]*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[8]*-1.5f32)*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[9]*-1.5f32)*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[10]*-1.5f32)*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[11]*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[13]*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[14]*-2f32)*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[15]*-2f32)*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[16]*-2f32)*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[17]*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[19]*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[20]*1.5f32)*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[21]*1.5f32)*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[22]*1.5f32)*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[23]*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[25])
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[26]*-1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[27]*-2f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[28]*1.5f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[29])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[6])
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[7]*-1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[8]*-2f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[9]*1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[12]*-2.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[13]*-2.5f32)*-1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[14]*-2.5f32)*-2f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[15]*-2.5f32)*1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[16]*-2.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[18]*0.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[19]*0.5f32)*-1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[20]*0.5f32)*-2f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (((float32*)d[21]*0.5f32)*1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[22]*0.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[24])
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[25]*-1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[26]*-2f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[27]*1.5f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[28])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[7])
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[8]*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[10])
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[13]*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[14]*-2.5f32)*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[15]*-2.5f32)*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[16]*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[19]*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[20]*0.5f32)*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[21]*0.5f32)*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[22]*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[25])
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[26]*-2.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[27]*0.5f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[28])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[7]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[8]*0.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[9]*2.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[10])
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[13]*-2.5f32)*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[14]*-2.5f32)*0.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[15]*-2.5f32)*2.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[16]*-2.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[19]*0.5f32)*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[20]*0.5f32)*0.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (((float32*)d[21]*0.5f32)*2.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[22]*0.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[25]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[26]*0.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[27]*2.5f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[28])
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[7]*-2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[8]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[13]*-2.5f32)*-2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[14]*-2.5f32)*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[15]*-2.5f32)*2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[16]*-2.5f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[19]*0.5f32)*-2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[20]*0.5f32)*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (((float32*)d[21]*0.5f32)*2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[22]*0.5f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[25]*-2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[26]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[27]*2f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[28])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[7]*0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[8]*-1f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[9]*-0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[13]*-2.5f32)*0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[14]*-2.5f32)*-1f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[15]*-2.5f32)*-0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[16]*-2.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[19]*0.5f32)*0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[20]*0.5f32)*-1f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (((float32*)d[21]*0.5f32)*-0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[22]*0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[25]*0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[26]*-1f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + ((float32*)d[27]*-0.5f32))
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[28])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[8]*-1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-2f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[10]*1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[13]*-2.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[14]*-2.5f32)*-1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[15]*-2.5f32)*-2f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[16]*-2.5f32)*1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[17]*-2.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[19]*0.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[20]*0.5f32)*-1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[21]*0.5f32)*-2f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (((float32*)d[22]*0.5f32)*1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[23]*0.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[25])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[26]*-1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[27]*-2f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[28]*1.5f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[29])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[6]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[7]*-1f32)*-1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[8]*-1f32)*-2f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[9]*-1f32)*1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[10]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[12]*0.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[13]*0.5f32)*-1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[14]*0.5f32)*-2f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[15]*0.5f32)*1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[16]*0.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[18]*2.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[19]*2.5f32)*-1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[20]*2.5f32)*-2f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[21]*2.5f32)*1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[22]*2.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[24])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[25]*-1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[26]*-2f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[27]*1.5f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[28])
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[7]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[8]*-1f32)*-2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[9]*-1f32)*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[10]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[14]*0.5f32)*-2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[15]*0.5f32)*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[16]*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[19]*2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[20]*2.5f32)*-2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[21]*2.5f32)*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[22]*2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[25])
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[26]*-2.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[27]*0.5f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[28])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[7]*-1f32)*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[8]*-1f32)*0.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[9]*-1f32)*2.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[10]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[13]*0.5f32)*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[14]*0.5f32)*0.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[15]*0.5f32)*2.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[16]*0.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[19]*2.5f32)*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[20]*2.5f32)*0.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (((float32*)d[21]*2.5f32)*2.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[22]*2.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[25]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[26]*0.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[27]*2.5f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[28])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[7]*-1f32)*-2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[8]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[9]*-1f32)*2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[10]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[13]*0.5f32)*-2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[14]*0.5f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[15]*0.5f32)*2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[16]*0.5f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[19]*2.5f32)*-2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[20]*2.5f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[21]*2.5f32)*2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[22]*2.5f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[25]*-2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[26]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[27]*2f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[28])
      data_pack.local[16] = 0f32
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[7]*-1f32)*0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[8]*-1f32)*-1f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[9]*-1f32)*-0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[10]*-1f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[13]*0.5f32)*0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[14]*0.5f32)*-1f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[15]*0.5f32)*-0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[16]*0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[19]*2.5f32)*0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[20]*2.5f32)*-1f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (((float32*)d[21]*2.5f32)*-0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[22]*2.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[25]*0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[26]*-1f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + ((float32*)d[27]*-0.5f32))
      data_pack.local[16] = ((float32*)data_pack.local[16] + (float32*)d[28])
      data_pack.local[17] = 0f32
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[7]*-1f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[8]*-1f32)*-1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[9]*-1f32)*-2f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[10]*-1f32)*1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[11]*-1f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[13]*0.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[14]*0.5f32)*-1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[15]*0.5f32)*-2f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[16]*0.5f32)*1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[17]*0.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[19]*2.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[20]*2.5f32)*-1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[21]*2.5f32)*-2f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (((float32*)d[22]*2.5f32)*1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[23]*2.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (float32*)d[25])
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[26]*-1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[27]*-2f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + ((float32*)d[28]*1.5f32))
      data_pack.local[17] = ((float32*)data_pack.local[17] + (float32*)d[29])
      data_pack.local[18] = 0f32
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[6]*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[7]*-2f32)*-1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[8]*-2f32)*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[9]*-2f32)*1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[10]*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[12]*-1f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[13]*-1f32)*-1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[14]*-1f32)*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[15]*-1f32)*1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[16]*-1f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[18]*2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[19]*2f32)*-1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[20]*2f32)*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (((float32*)d[21]*2f32)*1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[22]*2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (float32*)d[24])
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[25]*-1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[26]*-2f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + ((float32*)d[27]*1.5f32))
      data_pack.local[18] = ((float32*)data_pack.local[18] + (float32*)d[28])
      data_pack.local[19] = 0f32
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[7]*-2f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[8]*-2f32)*-2.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[9]*-2f32)*0.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[10]*-2f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[13]*-1f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[14]*-1f32)*-2.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[15]*-1f32)*0.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[16]*-1f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[19]*2f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[20]*2f32)*-2.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (((float32*)d[21]*2f32)*0.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[22]*2f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (float32*)d[25])
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[26]*-2.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + ((float32*)d[27]*0.5f32))
      data_pack.local[19] = ((float32*)data_pack.local[19] + (float32*)d[28])
      data_pack.local[20] = 0f32
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[7]*-2f32)*-1f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[8]*-2f32)*0.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[9]*-2f32)*2.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[10]*-2f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[13]*-1f32)*-1f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[14]*-1f32)*0.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[15]*-1f32)*2.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[16]*-1f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[19]*2f32)*-1f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[20]*2f32)*0.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (((float32*)d[21]*2f32)*2.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[22]*2f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[25]*-1f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[26]*0.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + ((float32*)d[27]*2.5f32))
      data_pack.local[20] = ((float32*)data_pack.local[20] + (float32*)d[28])
      data_pack.local[21] = 0f32
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[7]*-2f32)*-2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[8]*-2f32)*-1f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[9]*-2f32)*2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[10]*-2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[13]*-1f32)*-2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[14]*-1f32)*-1f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[15]*-1f32)*2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[16]*-1f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[19]*2f32)*-2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[20]*2f32)*-1f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (((float32*)d[21]*2f32)*2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[22]*2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[25]*-2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[26]*-1f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + ((float32*)d[27]*2f32))
      data_pack.local[21] = ((float32*)data_pack.local[21] + (float32*)d[28])
      data_pack.local[22] = 0f32
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[7]*-2f32)*0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[8]*-2f32)*-1f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[9]*-2f32)*-0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[10]*-2f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[13]*-1f32)*0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[14]*-1f32)*-1f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[15]*-1f32)*-0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[16]*-1f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[19]*2f32)*0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[20]*2f32)*-1f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (((float32*)d[21]*2f32)*-0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[22]*2f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[25]*0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[26]*-1f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + ((float32*)d[27]*-0.5f32))
      data_pack.local[22] = ((float32*)data_pack.local[22] + (float32*)d[28])
      data_pack.local[23] = 0f32
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[7]*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[8]*-2f32)*-1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[9]*-2f32)*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[10]*-2f32)*1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[11]*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[13]*-1f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[14]*-1f32)*-1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[15]*-1f32)*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[16]*-1f32)*1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[17]*-1f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[19]*2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[20]*2f32)*-1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[21]*2f32)*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (((float32*)d[22]*2f32)*1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[23]*2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (float32*)d[25])
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[26]*-1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[27]*-2f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + ((float32*)d[28]*1.5f32))
      data_pack.local[23] = ((float32*)data_pack.local[23] + (float32*)d[29])
      data_pack.local[24] = 0f32
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[6]*0.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[7]*0.5f32)*-1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[8]*0.5f32)*-2f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[9]*0.5f32)*1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[10]*0.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[12]*-1f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[13]*-1f32)*-1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[14]*-1f32)*-2f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[15]*-1f32)*1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[16]*-1f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[18]*-0.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[19]*-0.5f32)*-1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[20]*-0.5f32)*-2f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (((float32*)d[21]*-0.5f32)*1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[22]*-0.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (float32*)d[24])
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[25]*-1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[26]*-2f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + ((float32*)d[27]*1.5f32))
      data_pack.local[24] = ((float32*)data_pack.local[24] + (float32*)d[28])
      data_pack.local[25] = 0f32
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[7]*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[8]*0.5f32)*-2.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[9]*0.5f32)*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[10]*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[13]*-1f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[14]*-1f32)*-2.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[15]*-1f32)*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[16]*-1f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[19]*-0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[20]*-0.5f32)*-2.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (((float32*)d[21]*-0.5f32)*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[22]*-0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (float32*)d[25])
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[26]*-2.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + ((float32*)d[27]*0.5f32))
      data_pack.local[25] = ((float32*)data_pack.local[25] + (float32*)d[28])
      data_pack.local[26] = 0f32
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[7]*0.5f32)*-1f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[8]*0.5f32)*0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[9]*0.5f32)*2.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[10]*0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[13]*-1f32)*-1f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[14]*-1f32)*0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[15]*-1f32)*2.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[16]*-1f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[19]*-0.5f32)*-1f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[20]*-0.5f32)*0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (((float32*)d[21]*-0.5f32)*2.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[22]*-0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[25]*-1f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[26]*0.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + ((float32*)d[27]*2.5f32))
      data_pack.local[26] = ((float32*)data_pack.local[26] + (float32*)d[28])
      data_pack.local[27] = 0f32
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[7]*0.5f32)*-2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[8]*0.5f32)*-1f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[9]*0.5f32)*2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[10]*0.5f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[13]*-1f32)*-2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[14]*-1f32)*-1f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[15]*-1f32)*2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[16]*-1f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[19]*-0.5f32)*-2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[20]*-0.5f32)*-1f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (((float32*)d[21]*-0.5f32)*2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[22]*-0.5f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[25]*-2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[26]*-1f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + ((float32*)d[27]*2f32))
      data_pack.local[27] = ((float32*)data_pack.local[27] + (float32*)d[28])
      data_pack.local[28] = 0f32
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[7]*0.5f32)*0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[8]*0.5f32)*-1f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[9]*0.5f32)*-0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[10]*0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[13]*-1f32)*0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[14]*-1f32)*-1f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[15]*-1f32)*-0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[16]*-1f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[19]*-0.5f32)*0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[20]*-0.5f32)*-1f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (((float32*)d[21]*-0.5f32)*-0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[22]*-0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[25]*0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[26]*-1f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + ((float32*)d[27]*-0.5f32))
      data_pack.local[28] = ((float32*)data_pack.local[28] + (float32*)d[28])
      data_pack.local[29] = 0f32
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[7]*0.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[8]*0.5f32)*-1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[9]*0.5f32)*-2f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[10]*0.5f32)*1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[11]*0.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[13]*-1f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[14]*-1f32)*-1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[15]*-1f32)*-2f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[16]*-1f32)*1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[17]*-1f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[19]*-0.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[20]*-0.5f32)*-1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[21]*-0.5f32)*-2f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (((float32*)d[22]*-0.5f32)*1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[23]*-0.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (float32*)d[25])
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[26]*-1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[27]*-2f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + ((float32*)d[28]*1.5f32))
      data_pack.local[29] = ((float32*)data_pack.local[29] + (float32*)d[29])
      data_pack.local[30] = 0f32
      data_pack.local[30] = ((float32*)data_pack.local[30] + (float32*)d[6])
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[7]*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[8]*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[9]*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (float32*)d[10])
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[12]*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[13]*-1.5f32)*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[14]*-1.5f32)*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[15]*-1.5f32)*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[16]*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[18]*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[19]*-2f32)*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[20]*-2f32)*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[21]*-2f32)*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[22]*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[24]*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[25]*1.5f32)*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[26]*1.5f32)*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (((float32*)d[27]*1.5f32)*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[28]*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (float32*)d[30])
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[31]*-1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[32]*-2f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + ((float32*)d[33]*1.5f32))
      data_pack.local[30] = ((float32*)data_pack.local[30] + (float32*)d[34])
      data_pack.local[31] = 0f32
      data_pack.local[31] = ((float32*)data_pack.local[31] + (float32*)d[7])
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[8]*-2.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[9]*0.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (float32*)d[10])
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[13]*-1.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[14]*-1.5f32)*-2.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[15]*-1.5f32)*0.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[16]*-1.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[19]*-2f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[20]*-2f32)*-2.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[21]*-2f32)*0.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[22]*-2f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[25]*1.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[26]*1.5f32)*-2.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (((float32*)d[27]*1.5f32)*0.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[28]*1.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (float32*)d[31])
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[32]*-2.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + ((float32*)d[33]*0.5f32))
      data_pack.local[31] = ((float32*)data_pack.local[31] + (float32*)d[34])
      data_pack.local[32] = 0f32
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[7]*-1f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[8]*0.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[9]*2.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (float32*)d[10])
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[13]*-1.5f32)*-1f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[14]*-1.5f32)*0.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[15]*-1.5f32)*2.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[16]*-1.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[19]*-2f32)*-1f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[20]*-2f32)*0.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[21]*-2f32)*2.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[22]*-2f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[25]*1.5f32)*-1f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[26]*1.5f32)*0.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (((float32*)d[27]*1.5f32)*2.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[28]*1.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[31]*-1f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[32]*0.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + ((float32*)d[33]*2.5f32))
      data_pack.local[32] = ((float32*)data_pack.local[32] + (float32*)d[34])
      data_pack.local[33] = 0f32
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[7]*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[8]*-1f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[9]*2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (float32*)d[10])
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[13]*-1.5f32)*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[14]*-1.5f32)*-1f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[15]*-1.5f32)*2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[16]*-1.5f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[19]*-2f32)*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[20]*-2f32)*-1f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[21]*-2f32)*2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[22]*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[25]*1.5f32)*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[26]*1.5f32)*-1f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (((float32*)d[27]*1.5f32)*2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[28]*1.5f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[31]*-2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[32]*-1f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + ((float32*)d[33]*2f32))
      data_pack.local[33] = ((float32*)data_pack.local[33] + (float32*)d[34])
      data_pack.local[34] = 0f32
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[7]*0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[8]*-1f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[9]*-0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (float32*)d[10])
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[13]*-1.5f32)*0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[14]*-1.5f32)*-1f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[15]*-1.5f32)*-0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[16]*-1.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[19]*-2f32)*0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[20]*-2f32)*-1f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[21]*-2f32)*-0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[22]*-2f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[25]*1.5f32)*0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[26]*1.5f32)*-1f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (((float32*)d[27]*1.5f32)*-0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[28]*1.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[31]*0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[32]*-1f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + ((float32*)d[33]*-0.5f32))
      data_pack.local[34] = ((float32*)data_pack.local[34] + (float32*)d[34])
      data_pack.local[35] = 0f32
      data_pack.local[35] = ((float32*)data_pack.local[35] + (float32*)d[7])
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[8]*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[9]*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[10]*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (float32*)d[11])
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[13]*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[14]*-1.5f32)*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[15]*-1.5f32)*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[16]*-1.5f32)*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[17]*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[19]*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[20]*-2f32)*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[21]*-2f32)*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[22]*-2f32)*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[23]*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[25]*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[26]*1.5f32)*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[27]*1.5f32)*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (((float32*)d[28]*1.5f32)*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[29]*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (float32*)d[31])
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[32]*-1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[33]*-2f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + ((float32*)d[34]*1.5f32))
      data_pack.local[35] = ((float32*)data_pack.local[35] + (float32*)d[35])
      for (eps_1: int32, 0, 6) {
        for (nu_1: int32, 0, 6) {
          data_pack[((((eps_1*2408448) + (nu_1*401408)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*6) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 36;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [32]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [128]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [256]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 98;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16 {
      for (co.c.init: int32, 0, 2) {
        bgemm.local[co.c.init] = 0f32
        bgemm.local[(co.c.init + 8)] = 0f32
        bgemm.local[(co.c.init + 16)] = 0f32
        bgemm.local[(co.c.init + 24)] = 0f32
        bgemm.local[(co.c.init + 2)] = 0f32
        bgemm.local[(co.c.init + 10)] = 0f32
        bgemm.local[(co.c.init + 18)] = 0f32
        bgemm.local[(co.c.init + 26)] = 0f32
        bgemm.local[(co.c.init + 4)] = 0f32
        bgemm.local[(co.c.init + 12)] = 0f32
        bgemm.local[(co.c.init + 20)] = 0f32
        bgemm.local[(co.c.init + 28)] = 0f32
        bgemm.local[(co.c.init + 6)] = 0f32
        bgemm.local[(co.c.init + 14)] = 0f32
        bgemm.local[(co.c.init + 22)] = 0f32
        bgemm.local[(co.c.init + 30)] = 0f32
      }
      for (ci.outer: int32, 0, 16) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 2) {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          placeholder.shared[((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*64) + ((threadIdx.y_1*16) + threadIdx.x_2))] = (float32*)placeholder_8[((((((blockIdx.z*4096) + (ci.outer*256)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128)) + (floordiv(((threadIdx.y_1*16) + threadIdx.x_2), 32)*64)) + (blockIdx.y*32)) + floormod(((threadIdx.y_1*16) + threadIdx.x_2), 32))]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 4) {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          data_pack.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*64) + (threadIdx.y_2*16)) + threadIdx.x_3)] = (float32*)data_pack[((((((blockIdx.z*401408) + (ci.outer*25088)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*6272)) + (blockIdx.x_1*64)) + (threadIdx.y_2*16)) + threadIdx.x_3)]
        }
        for (ci.inner: int32, 0, 4) {
          for (co.c: int32, 0, 2) {
            bgemm.local[co.c] = ((float32*)bgemm.local[co.c] + ((float32*)placeholder.shared[(((ci.inner*32) + (threadIdx.y*2)) + co.c)]*(float32*)data_pack.shared[((ci.inner*64) + threadIdx.x_1)]))
            bgemm.local[(co.c + 8)] = ((float32*)bgemm.local[(co.c + 8)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 8)]*(float32*)data_pack.shared[((ci.inner*64) + threadIdx.x_1)]))
            bgemm.local[(co.c + 16)] = ((float32*)bgemm.local[(co.c + 16)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 16)]*(float32*)data_pack.shared[((ci.inner*64) + threadIdx.x_1)]))
            bgemm.local[(co.c + 24)] = ((float32*)bgemm.local[(co.c + 24)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 24)]*(float32*)data_pack.shared[((ci.inner*64) + threadIdx.x_1)]))
            bgemm.local[(co.c + 2)] = ((float32*)bgemm.local[(co.c + 2)] + ((float32*)placeholder.shared[(((ci.inner*32) + (threadIdx.y*2)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 10)] = ((float32*)bgemm.local[(co.c + 10)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 8)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 18)] = ((float32*)bgemm.local[(co.c + 18)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 16)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 26)] = ((float32*)bgemm.local[(co.c + 26)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 24)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 4)] = ((float32*)bgemm.local[(co.c + 4)] + ((float32*)placeholder.shared[(((ci.inner*32) + (threadIdx.y*2)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 12)] = ((float32*)bgemm.local[(co.c + 12)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 8)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 20)] = ((float32*)bgemm.local[(co.c + 20)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 16)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 28)] = ((float32*)bgemm.local[(co.c + 28)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 24)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 6)] = ((float32*)bgemm.local[(co.c + 6)] + ((float32*)placeholder.shared[(((ci.inner*32) + (threadIdx.y*2)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 14)] = ((float32*)bgemm.local[(co.c + 14)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 8)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 22)] = ((float32*)bgemm.local[(co.c + 22)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 16)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 30)] = ((float32*)bgemm.local[(co.c + 30)] + ((float32*)placeholder.shared[((((ci.inner*32) + (threadIdx.y*2)) + co.c) + 24)]*(float32*)data_pack.shared[(((ci.inner*64) + threadIdx.x_1) + 48)]))
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 2) {
        bgemm[((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1)] = (float32*)bgemm.local[co.inner.inner.inner]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 50176)] = (float32*)bgemm.local[(co.inner.inner.inner + 8)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 100352)] = (float32*)bgemm.local[(co.inner.inner.inner + 16)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 150528)] = (float32*)bgemm.local[(co.inner.inner.inner + 24)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 16)] = (float32*)bgemm.local[(co.inner.inner.inner + 2)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 50192)] = (float32*)bgemm.local[(co.inner.inner.inner + 10)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 100368)] = (float32*)bgemm.local[(co.inner.inner.inner + 18)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 150544)] = (float32*)bgemm.local[(co.inner.inner.inner + 26)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 32)] = (float32*)bgemm.local[(co.inner.inner.inner + 4)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 50208)] = (float32*)bgemm.local[(co.inner.inner.inner + 12)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 100384)] = (float32*)bgemm.local[(co.inner.inner.inner + 20)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 150560)] = (float32*)bgemm.local[(co.inner.inner.inner + 28)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 48)] = (float32*)bgemm.local[(co.inner.inner.inner + 6)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 50224)] = (float32*)bgemm.local[(co.inner.inner.inner + 14)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 100400)] = (float32*)bgemm.local[(co.inner.inner.inner + 22)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*12544)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + threadIdx.x_1) + 150576)] = (float32*)bgemm.local[(co.inner.inner.inner + 30)]
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 3136;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [16]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 401408)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1204224)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 401408)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1204224)]*0.5f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)]*-2f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.5f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-2f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.5f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-2f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.5f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*-2f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*0.5f32))
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-2f32))
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 401408)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1204224)]*0.25f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)]*4f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.25f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*4f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.25f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*4f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.25f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*4f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*0.25f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*4f32))
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 401408)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1204224)]*0.125f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)]*-8f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2007040)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.125f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-8f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4415488)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.125f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-8f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6823936)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.125f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*-8f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9232384)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*0.125f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-8f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11640832)])
      inverse[4] = 0f32
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)]*-1f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32))
      inverse[4] = ((float32*)inverse[4] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[4] = ((float32*)inverse[4] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[4] = ((float32*)inverse[4] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[4] = ((float32*)inverse[4] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)])
      inverse[4] = ((float32*)inverse[4] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*0.5f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.5f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.5f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.5f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.5f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)]*-2f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-2f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-2f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-2f32))
      inverse[4] = ((float32*)inverse[4] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-2f32))
      inverse[5] = 0f32
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32)*-1f32))
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.5f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-2f32))
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[5] = ((float32*)inverse[5] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.5f32))
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-2f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.5f32)*-1f32))
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.5f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.5f32)*0.5f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.5f32)*-2f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-2f32)*-1f32))
      inverse[5] = ((float32*)inverse[5] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-2f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-2f32)*0.5f32))
      inverse[5] = ((float32*)inverse[5] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-2f32)*-2f32))
      inverse[6] = 0f32
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.25f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*4f32))
      inverse[6] = ((float32*)inverse[6] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[6] = ((float32*)inverse[6] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.25f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*4f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.5f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.5f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.5f32)*0.25f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.5f32)*4f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-2f32))
      inverse[6] = ((float32*)inverse[6] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-2f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-2f32)*0.25f32))
      inverse[6] = ((float32*)inverse[6] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-2f32)*4f32))
      inverse[7] = 0f32
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32)*-1f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.125f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-8f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4415488)]*-1f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[7] = ((float32*)inverse[7] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.125f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-8f32))
      inverse[7] = ((float32*)inverse[7] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6823936)])
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.5f32)*-1f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.5f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.5f32)*0.125f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.5f32)*-8f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9232384)]*0.5f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-2f32)*-1f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-2f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-2f32)*0.125f32))
      inverse[7] = ((float32*)inverse[7] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-2f32)*-8f32))
      inverse[7] = ((float32*)inverse[7] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11640832)]*-2f32))
      inverse[8] = 0f32
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)])
      inverse[8] = ((float32*)inverse[8] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*0.25f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.25f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.25f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.25f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.25f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)]*4f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*4f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*4f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*4f32))
      inverse[8] = ((float32*)inverse[8] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*4f32))
      inverse[9] = 0f32
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[9] = ((float32*)inverse[9] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.5f32))
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-2f32))
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[9] = ((float32*)inverse[9] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.5f32))
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-2f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.25f32)*-1f32))
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.25f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.25f32)*0.5f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.25f32)*-2f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*4f32)*-1f32))
      inverse[9] = ((float32*)inverse[9] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*4f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*4f32)*0.5f32))
      inverse[9] = ((float32*)inverse[9] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*4f32)*-2f32))
      inverse[10] = 0f32
      inverse[10] = ((float32*)inverse[10] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)])
      inverse[10] = ((float32*)inverse[10] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.25f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*4f32))
      inverse[10] = ((float32*)inverse[10] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[10] = ((float32*)inverse[10] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.25f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*4f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.25f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.25f32))
      inverse[10] = ((float32*)inverse[10] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.25f32)*0.25f32))
      inverse[10] = ((float32*)inverse[10] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.25f32)*4f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*4f32))
      inverse[10] = ((float32*)inverse[10] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*4f32))
      inverse[10] = ((float32*)inverse[10] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*4f32)*0.25f32))
      inverse[10] = ((float32*)inverse[10] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*4f32)*4f32))
      inverse[11] = 0f32
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[11] = ((float32*)inverse[11] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*0.125f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-8f32))
      inverse[11] = ((float32*)inverse[11] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4415488)])
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[11] = ((float32*)inverse[11] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.125f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-8f32))
      inverse[11] = ((float32*)inverse[11] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6823936)])
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.25f32)*-1f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.25f32))
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.25f32)*0.125f32))
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.25f32)*-8f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9232384)]*0.25f32))
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*4f32)*-1f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*4f32))
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*4f32)*0.125f32))
      inverse[11] = ((float32*)inverse[11] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*4f32)*-8f32))
      inverse[11] = ((float32*)inverse[11] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11640832)]*4f32))
      inverse[12] = 0f32
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)]*-1f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32))
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*0.125f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.125f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.125f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.125f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.125f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)]*-8f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-8f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-8f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-8f32))
      inverse[12] = ((float32*)inverse[12] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-8f32))
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12042240)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12443648)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12845056)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13246464)])
      inverse[12] = ((float32*)inverse[12] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13647872)])
      inverse[13] = 0f32
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32)*-1f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.5f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-2f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[13] = ((float32*)inverse[13] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.5f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-2f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.125f32)*-1f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.125f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.125f32)*0.5f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.125f32)*-2f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-8f32)*-1f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-8f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-8f32)*0.5f32))
      inverse[13] = ((float32*)inverse[13] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-8f32)*-2f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12443648)]*-1f32))
      inverse[13] = ((float32*)inverse[13] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12845056)])
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13246464)]*0.5f32))
      inverse[13] = ((float32*)inverse[13] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13647872)]*-2f32))
      inverse[14] = 0f32
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.25f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*4f32))
      inverse[14] = ((float32*)inverse[14] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)])
      inverse[14] = ((float32*)inverse[14] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.25f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*4f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.125f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.125f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.125f32)*0.25f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.125f32)*4f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-8f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-8f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-8f32)*0.25f32))
      inverse[14] = ((float32*)inverse[14] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-8f32)*4f32))
      inverse[14] = ((float32*)inverse[14] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12443648)])
      inverse[14] = ((float32*)inverse[14] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12845056)])
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13246464)]*0.25f32))
      inverse[14] = ((float32*)inverse[14] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13647872)]*4f32))
      inverse[15] = 0f32
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2809856)]*-1f32)*-1f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3612672)]*-1f32)*0.125f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-8f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4415488)]*-1f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5218304)]*-1f32))
      inverse[15] = ((float32*)inverse[15] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6021120)]*0.125f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)]*-8f32))
      inverse[15] = ((float32*)inverse[15] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6823936)])
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7626752)]*0.125f32)*-1f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)]*0.125f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8429568)]*0.125f32)*0.125f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)]*0.125f32)*-8f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9232384)]*0.125f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10035200)]*-8f32)*-1f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-8f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10838016)]*-8f32)*0.125f32))
      inverse[15] = ((float32*)inverse[15] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)]*-8f32)*-8f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11640832)]*-8f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12443648)]*-1f32))
      inverse[15] = ((float32*)inverse[15] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12845056)])
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13246464)]*0.125f32))
      inverse[15] = ((float32*)inverse[15] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 13647872)]*-8f32))
      inverse[15] = ((float32*)inverse[15] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 14049280)])
      for (ax2.inner: int32, 0, 4) {
        for (ax3.inner: int32, 0, 4) {
          T_relu_2[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 14)*224) + (ax2.inner*56)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 14)*4)) + ax3.inner)] = max(((float32*)inverse[((ax2.inner*4) + ax3.inner)] + (float32*)placeholder_6[floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 196)]), 0f32)
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 128, 28, 28], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [1, 128, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 128, 28, 28], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [4, 4, 128, 128], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_add_1: T_add} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [12845056]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [12845056]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6272;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [16]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [16]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 4) {
        for (nu: int32, 0, 4) {
          d[((eps*4) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*2) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*2) + eps) < 29)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 14)*2) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 14)*2) + nu) < 29)), (float32*)placeholder_7[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 6272), 196)*100352) + (floordiv(((blockIdx.x*128) + threadIdx.x), 6272)*784)) + (floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*56)) + (eps*28)) + (floormod(((blockIdx.x*128) + threadIdx.x), 14)*2)) + nu) - 29)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[8]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[10]*-1f32)*-1f32))
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[1]*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[2])
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1f32))
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[1])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[2])
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[9]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1f32))
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[3])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[11]*-1f32))
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[4]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[8])
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1f32))
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[6]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[9]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[10])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[5]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[6]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[9])
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[7]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[11])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[4])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[6]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[8])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[10]*-1f32))
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[5]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[6])
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[5])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[6])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[9])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[5]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[4]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[12])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[14]*-1f32))
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[6]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[14])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[5]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[6]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[13])
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[14])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[7]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[13]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[15])
      for (eps_1: int32, 0, 4) {
        for (nu_1: int32, 0, 4) {
          data_pack[((((eps_1*3211264) + (nu_1*802816)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*4) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 16;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [64]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [2048]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [1024]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 98;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16 {
      for (co.c.init: int32, 0, 16) {
        for (p.c.init: int32, 0, 2) {
          bgemm.local[((co.c.init*2) + p.c.init)] = 0f32
          bgemm.local[(((co.c.init*2) + p.c.init) + 32)] = 0f32
        }
      }
      for (ci.outer: int32, 0, 8) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 16) {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          placeholder.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + (threadIdx.y_1*16)) + threadIdx.x_2)] = (float32*)placeholder_8[(((((blockIdx.z*16384) + (ci.outer*2048)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128)) + (threadIdx.y_1*16)) + threadIdx.x_2)]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 8) {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          data_pack.shared[((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + ((threadIdx.y_2*16) + threadIdx.x_3))] = (float32*)data_pack[((((((blockIdx.z*802816) + (ci.outer*100352)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*12544)) + (floordiv(((threadIdx.y_2*16) + threadIdx.x_3), 64)*6272)) + (blockIdx.x_1*64)) + floormod(((threadIdx.y_2*16) + threadIdx.x_3), 64))]
        }
        for (ci.inner: int32, 0, 16) {
          for (co.c: int32, 0, 16) {
            for (p.c: int32, 0, 2) {
              bgemm.local[((co.c*2) + p.c)] = ((float32*)bgemm.local[((co.c*2) + p.c)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*16)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*64) + (threadIdx.x_1*2)) + p.c)]))
              bgemm.local[(((co.c*2) + p.c) + 32)] = ((float32*)bgemm.local[(((co.c*2) + p.c) + 32)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*16)) + co.c)]*(float32*)data_pack.shared[((((ci.inner*64) + (threadIdx.x_1*2)) + p.c) + 32)]))
            }
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 16) {
        for (p.inner.inner.inner: int32, 0, 2) {
          bgemm[((((((blockIdx.z*802816) + (threadIdx.y*100352)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + (threadIdx.x_1*2)) + p.inner.inner.inner)] = (float32*)bgemm.local[((co.inner.inner.inner*2) + p.inner.inner.inner)]
          bgemm[(((((((blockIdx.z*802816) + (threadIdx.y*100352)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + (threadIdx.x_1*2)) + p.inner.inner.inner) + 32)] = (float32*)bgemm.local[(((co.inner.inner.inner*2) + p.inner.inner.inner) + 32)]
        }
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6272;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [4]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)])
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)])
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12042240)])
      for (ax2.inner: int32, 0, 2) {
        for (ax3.inner: int32, 0, 2) {
          T_add_2[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 14)*56) + (ax2.inner*28)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 14)*2)) + ax3.inner)] = ((float32*)inverse[((ax2.inner*2) + ax3.inner)] + (float32*)placeholder_6[floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)])
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_nn_relu_1", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 128, 28, 28], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [1, 128, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 64, 56, 56], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [128, 64, 3, 3], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 32;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [112]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1710]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [2304]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[14] = 0f32
    compute[28] = 0f32
    compute[42] = 0f32
    compute[56] = 0f32
    compute[70] = 0f32
    compute[84] = 0f32
    compute[98] = 0f32
    compute[7] = 0f32
    compute[21] = 0f32
    compute[35] = 0f32
    compute[49] = 0f32
    compute[63] = 0f32
    compute[77] = 0f32
    compute[91] = 0f32
    compute[105] = 0f32
    compute[1] = 0f32
    compute[15] = 0f32
    compute[29] = 0f32
    compute[43] = 0f32
    compute[57] = 0f32
    compute[71] = 0f32
    compute[85] = 0f32
    compute[99] = 0f32
    compute[8] = 0f32
    compute[22] = 0f32
    compute[36] = 0f32
    compute[50] = 0f32
    compute[64] = 0f32
    compute[78] = 0f32
    compute[92] = 0f32
    compute[106] = 0f32
    compute[2] = 0f32
    compute[16] = 0f32
    compute[30] = 0f32
    compute[44] = 0f32
    compute[58] = 0f32
    compute[72] = 0f32
    compute[86] = 0f32
    compute[100] = 0f32
    compute[9] = 0f32
    compute[23] = 0f32
    compute[37] = 0f32
    compute[51] = 0f32
    compute[65] = 0f32
    compute[79] = 0f32
    compute[93] = 0f32
    compute[107] = 0f32
    compute[3] = 0f32
    compute[17] = 0f32
    compute[31] = 0f32
    compute[45] = 0f32
    compute[59] = 0f32
    compute[73] = 0f32
    compute[87] = 0f32
    compute[101] = 0f32
    compute[10] = 0f32
    compute[24] = 0f32
    compute[38] = 0f32
    compute[52] = 0f32
    compute[66] = 0f32
    compute[80] = 0f32
    compute[94] = 0f32
    compute[108] = 0f32
    compute[4] = 0f32
    compute[18] = 0f32
    compute[32] = 0f32
    compute[46] = 0f32
    compute[60] = 0f32
    compute[74] = 0f32
    compute[88] = 0f32
    compute[102] = 0f32
    compute[11] = 0f32
    compute[25] = 0f32
    compute[39] = 0f32
    compute[53] = 0f32
    compute[67] = 0f32
    compute[81] = 0f32
    compute[95] = 0f32
    compute[109] = 0f32
    compute[5] = 0f32
    compute[19] = 0f32
    compute[33] = 0f32
    compute[47] = 0f32
    compute[61] = 0f32
    compute[75] = 0f32
    compute[89] = 0f32
    compute[103] = 0f32
    compute[12] = 0f32
    compute[26] = 0f32
    compute[40] = 0f32
    compute[54] = 0f32
    compute[68] = 0f32
    compute[82] = 0f32
    compute[96] = 0f32
    compute[110] = 0f32
    compute[6] = 0f32
    compute[20] = 0f32
    compute[34] = 0f32
    compute[48] = 0f32
    compute[62] = 0f32
    compute[76] = 0f32
    compute[90] = 0f32
    compute[104] = 0f32
    compute[13] = 0f32
    compute[27] = 0f32
    compute[41] = 0f32
    compute[55] = 0f32
    compute[69] = 0f32
    compute[83] = 0f32
    compute[97] = 0f32
    compute[111] = 0f32
    for (rc.outer: int32, 0, 32) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        pad_temp.shared[((threadIdx.z_1*107) + (threadIdx.x_1*8))] = @tir.if_then_else(((1 <= ((blockIdx.y*14) + floordiv(floormod(((threadIdx.z_1*107) + (threadIdx.x_1*8)), 855), 57))) && (1 <= floormod(((threadIdx.z_1*107) + (threadIdx.x_1*8)), 57))), (float32*)placeholder_7[(((((((blockIdx.z*200704) + (rc.outer*6272)) + (floordiv(((threadIdx.z_1*107) + (threadIdx.x_1*8)), 855)*3136)) + (blockIdx.y*784)) + (floordiv(floormod(((threadIdx.z_1*107) + (threadIdx.x_1*8)), 855), 57)*56)) + floormod(((threadIdx.z_1*107) + (threadIdx.x_1*8)), 57)) - 57)], 0f32, dtype=float32)
        if (((threadIdx.z_1*107) + (threadIdx.x_1*8)) < 1709) {
          pad_temp.shared[(((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 1)] = @tir.if_then_else(((1 <= ((blockIdx.y*14) + floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 1), 855), 57))) && (1 <= floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 1), 57))), (float32*)placeholder_7[(((((((blockIdx.z*200704) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 1), 855)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 1), 855), 57)*56)) + floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 1), 57)) - 57)], 0f32, dtype=float32)
        }
        if (((threadIdx.z_1*107) + (threadIdx.x_1*8)) < 1708) {
          pad_temp.shared[(((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 2)] = @tir.if_then_else(((1 <= ((blockIdx.y*14) + floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 2), 855), 57))) && (1 <= floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 2), 57))), (float32*)placeholder_7[(((((((blockIdx.z*200704) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 2), 855)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 2), 855), 57)*56)) + floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 2), 57)) - 57)], 0f32, dtype=float32)
        }
        if (((threadIdx.z_1*107) + (threadIdx.x_1*8)) < 1707) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 3)] = @tir.if_then_else(((1 <= ((blockIdx.y*14) + floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 3), 855), 57))) && (1 <= floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 3), 57))), (float32*)placeholder_7[(((((((blockIdx.z*200704) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 3), 855)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 3), 855), 57)*56)) + floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 3), 57)) - 57)], 0f32, dtype=float32)
          }
        }
        if (((threadIdx.z_1*107) + (threadIdx.x_1*8)) < 1706) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 4)] = @tir.if_then_else(((1 <= ((blockIdx.y*14) + floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 4), 855), 57))) && (1 <= floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 4), 57))), (float32*)placeholder_7[(((((((blockIdx.z*200704) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 4), 855)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 4), 855), 57)*56)) + floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 4), 57)) - 57)], 0f32, dtype=float32)
          }
        }
        if (((threadIdx.z_1*107) + (threadIdx.x_1*8)) < 1705) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 5)] = @tir.if_then_else(((1 <= ((blockIdx.y*14) + floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 5), 855), 57))) && (1 <= floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 5), 57))), (float32*)placeholder_7[(((((((blockIdx.z*200704) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 5), 855)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 5), 855), 57)*56)) + floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 5), 57)) - 57)], 0f32, dtype=float32)
          }
        }
        if (((threadIdx.z_1*107) + (threadIdx.x_1*8)) < 1704) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 6)] = @tir.if_then_else(((1 <= ((blockIdx.y*14) + floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 6), 855), 57))) && (1 <= floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 6), 57))), (float32*)placeholder_7[(((((((blockIdx.z*200704) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 6), 855)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 6), 855), 57)*56)) + floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 6), 57)) - 57)], 0f32, dtype=float32)
          }
        }
        if (((threadIdx.z_1*107) + (threadIdx.x_1*8)) < 1703) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 7)] = @tir.if_then_else(((1 <= ((blockIdx.y*14) + floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 7), 855), 57))) && (1 <= floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 7), 57))), (float32*)placeholder_7[(((((((blockIdx.z*200704) + (rc.outer*6272)) + (floordiv((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 7), 855)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 7), 855), 57)*56)) + floormod((((threadIdx.z_1*107) + (threadIdx.x_1*8)) + 7), 57)) - 57)], 0f32, dtype=float32)
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        placeholder.shared[((threadIdx.z_2*144) + (threadIdx.x_2*11))] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv((threadIdx.x_2*11), 18)*576)) + (rc.outer*18)) + floormod((threadIdx.x_2*11), 18))]
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 1), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 1), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 1), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2303) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 1)] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv(((threadIdx.x_2*11) + 1), 18)*576)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 1), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 2), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 2), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 2), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2302) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 2)] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv(((threadIdx.x_2*11) + 2), 18)*576)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 2), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 3), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 3), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv((threadIdx.x_2*11), 3)) < 767) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2301) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 3)] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv(((threadIdx.x_2*11) + 3), 18)*576)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 3), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 4), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 4), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 4), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2300) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 4)] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv(((threadIdx.x_2*11) + 4), 18)*576)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 4), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 5), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 5), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 5), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2299) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 5)] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv(((threadIdx.x_2*11) + 5), 18)*576)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 5), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 6), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 6), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv((threadIdx.x_2*11), 3)) < 766) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2298) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 6)] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv(((threadIdx.x_2*11) + 6), 18)*576)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 6), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 7), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 7), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 7), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2297) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 7)] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv(((threadIdx.x_2*11) + 7), 18)*576)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 7), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 8), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 8), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 8), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2296) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 8)] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv(((threadIdx.x_2*11) + 8), 18)*576)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 8), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 9), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv((threadIdx.x_2*11), 9)) < 255) {
            if (((threadIdx.z_2*48) + floordiv((threadIdx.x_2*11), 3)) < 765) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2295) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 9)] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv(((threadIdx.x_2*11) + 9), 18)*576)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 9), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 10), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 10), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 10), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2294) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 10)] = (float32*)placeholder_8[((((threadIdx.z_2*4608) + (floordiv(((threadIdx.x_2*11) + 10), 18)*576)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 10), 18))]
                }
              }
            }
          }
        }
      }
      for (rc.inner: int32, 0, 2) {
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((rc.inner*855) + (threadIdx.x*2))]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((rc.inner*855) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((rc.inner*855) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((rc.inner*855) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[((rc.inner*855) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[((rc.inner*855) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[((rc.inner*855) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[((rc.inner*855) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 28)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[((threadIdx.z*18) + (rc.inner*9))]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 288)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 576)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 864)]))
        compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1152)]))
        compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1440)]))
        compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1728)]))
        compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2016)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 29)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 29)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 29)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 29)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 29)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 29)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 29)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 29)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 289)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 577)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 865)]))
        compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1153)]))
        compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1441)]))
        compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1729)]))
        compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2017)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 30)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 30)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 30)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 30)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 30)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 30)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 30)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 30)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 290)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 578)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 866)]))
        compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1154)]))
        compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1442)]))
        compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1730)]))
        compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2018)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 57)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 57)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 57)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 57)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 57)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 57)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 57)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 57)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 85)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 85)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 85)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 85)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 85)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 85)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 85)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 85)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 171)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 171)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 171)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 171)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 171)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 171)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 171)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 171)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 199)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 199)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 199)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 199)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 199)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 199)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 199)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 199)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 285)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 285)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 285)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 285)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 285)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 285)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 285)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 285)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 313)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 313)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 313)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 313)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 313)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 313)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 313)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 313)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 399)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 399)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 399)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 399)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 399)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 399)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 399)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 399)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 427)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 427)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 427)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 427)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 427)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 427)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 427)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 427)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 513)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 513)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 513)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 513)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 513)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 513)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 513)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 513)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 541)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 541)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 541)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 541)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 541)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 541)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 541)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 541)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 627)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 627)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 627)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 627)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 627)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 627)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 627)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 627)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 655)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 655)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 655)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 655)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 655)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 655)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 655)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 655)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 741)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 741)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 741)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 741)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 741)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 741)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 741)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 741)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 769)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 3)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 769)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 291)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 769)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 579)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 769)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 867)]))
        compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 769)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1155)]))
        compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 769)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1443)]))
        compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 769)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1731)]))
        compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 769)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2019)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 86)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 86)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 86)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 86)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 86)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 86)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 86)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 86)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 172)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 172)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 172)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 172)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 172)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 172)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 172)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 172)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 200)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 200)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 200)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 200)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 200)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 200)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 200)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 200)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 286)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 286)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 286)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 286)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 286)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 286)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 286)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 286)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 314)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 314)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 314)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 314)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 314)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 314)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 314)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 314)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 400)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 400)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 400)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 400)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 400)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 400)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 400)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 400)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 428)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 428)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 428)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 428)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 428)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 428)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 428)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 428)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 514)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 514)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 514)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 514)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 514)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 514)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 514)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 514)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 542)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 542)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 542)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 542)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 542)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 542)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 542)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 542)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 628)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 628)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 628)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 628)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 628)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 628)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 628)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 628)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 656)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 656)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 656)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 656)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 656)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 656)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 656)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 656)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 742)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 742)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 742)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 742)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 742)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 742)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 742)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 742)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 770)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 4)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 770)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 292)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 770)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 580)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 770)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 868)]))
        compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 770)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1156)]))
        compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 770)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1444)]))
        compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 770)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1732)]))
        compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 770)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2020)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 87)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 87)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 87)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 87)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 87)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 87)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 87)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 87)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 173)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 173)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 173)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 173)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 173)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 173)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 173)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 173)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 201)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 201)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 201)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 201)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 201)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 201)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 201)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 201)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 287)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 287)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 287)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 287)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 287)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 287)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 287)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 287)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 315)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 315)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 315)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 315)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 315)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 315)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 315)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 315)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 401)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 401)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 401)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 401)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 401)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 401)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 401)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 401)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 429)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 429)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 429)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 429)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 429)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 429)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 429)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 429)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 515)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 515)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 515)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 515)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 515)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 515)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 515)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 515)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 543)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 543)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 543)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 543)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 543)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 543)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 543)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 543)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 629)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 629)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 629)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 629)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 629)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 629)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 629)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 629)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 657)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 657)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 657)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 657)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 657)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 657)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 657)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 657)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 743)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 743)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 743)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 743)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 743)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 743)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 743)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 743)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 771)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 5)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 771)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 293)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 771)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 581)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 771)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 869)]))
        compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 771)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1157)]))
        compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 771)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1445)]))
        compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 771)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1733)]))
        compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 771)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2021)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 114)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 142)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 228)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 256)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 342)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 370)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 456)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 484)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 570)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 598)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 684)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 712)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 798)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 798)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 798)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 798)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 798)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 798)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 798)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 798)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 826)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 6)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 826)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 294)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 826)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 582)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 826)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 870)]))
        compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 826)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1158)]))
        compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 826)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1446)]))
        compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 826)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1734)]))
        compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 826)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2022)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 115)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 143)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 229)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 257)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 343)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 371)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 457)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 485)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 571)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 599)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 685)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 713)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 799)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 799)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 799)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 799)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 799)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 799)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 799)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 799)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 827)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 7)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 827)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 295)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 827)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 583)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 827)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 871)]))
        compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 827)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1159)]))
        compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 827)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1447)]))
        compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 827)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1735)]))
        compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 827)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2023)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 144)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 230)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 258)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 344)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 372)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 458)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 486)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 572)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 600)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 686)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 714)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 800)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 800)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 800)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 800)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 800)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 800)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 800)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 800)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 828)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 8)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 828)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 296)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 828)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 584)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 828)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 872)]))
        compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 828)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1160)]))
        compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 828)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1448)]))
        compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 828)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 1736)]))
        compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[(((rc.inner*855) + (threadIdx.x*2)) + 828)]*(float32*)placeholder.shared[(((threadIdx.z*18) + (rc.inner*9)) + 2024)]))
      }
    }
    T_relu_2[((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x)] = max(((float32*)compute[0] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12544)] = max(((float32*)compute[14] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25088)] = max(((float32*)compute[28] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37632)] = max(((float32*)compute[42] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50176)] = max(((float32*)compute[56] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62720)] = max(((float32*)compute[70] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75264)] = max(((float32*)compute[84] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87808)] = max(((float32*)compute[98] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 14)] = max(((float32*)compute[7] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12558)] = max(((float32*)compute[21] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25102)] = max(((float32*)compute[35] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37646)] = max(((float32*)compute[49] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50190)] = max(((float32*)compute[63] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62734)] = max(((float32*)compute[77] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75278)] = max(((float32*)compute[91] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87822)] = max(((float32*)compute[105] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 28)] = max(((float32*)compute[1] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12572)] = max(((float32*)compute[15] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25116)] = max(((float32*)compute[29] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37660)] = max(((float32*)compute[43] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50204)] = max(((float32*)compute[57] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62748)] = max(((float32*)compute[71] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75292)] = max(((float32*)compute[85] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87836)] = max(((float32*)compute[99] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 42)] = max(((float32*)compute[8] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12586)] = max(((float32*)compute[22] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25130)] = max(((float32*)compute[36] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37674)] = max(((float32*)compute[50] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50218)] = max(((float32*)compute[64] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62762)] = max(((float32*)compute[78] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75306)] = max(((float32*)compute[92] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87850)] = max(((float32*)compute[106] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 56)] = max(((float32*)compute[2] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12600)] = max(((float32*)compute[16] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25144)] = max(((float32*)compute[30] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37688)] = max(((float32*)compute[44] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50232)] = max(((float32*)compute[58] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62776)] = max(((float32*)compute[72] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75320)] = max(((float32*)compute[86] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87864)] = max(((float32*)compute[100] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 70)] = max(((float32*)compute[9] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12614)] = max(((float32*)compute[23] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25158)] = max(((float32*)compute[37] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37702)] = max(((float32*)compute[51] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50246)] = max(((float32*)compute[65] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62790)] = max(((float32*)compute[79] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75334)] = max(((float32*)compute[93] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87878)] = max(((float32*)compute[107] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 84)] = max(((float32*)compute[3] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12628)] = max(((float32*)compute[17] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25172)] = max(((float32*)compute[31] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37716)] = max(((float32*)compute[45] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50260)] = max(((float32*)compute[59] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62804)] = max(((float32*)compute[73] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75348)] = max(((float32*)compute[87] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87892)] = max(((float32*)compute[101] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 98)] = max(((float32*)compute[10] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12642)] = max(((float32*)compute[24] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25186)] = max(((float32*)compute[38] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37730)] = max(((float32*)compute[52] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50274)] = max(((float32*)compute[66] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62818)] = max(((float32*)compute[80] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75362)] = max(((float32*)compute[94] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87906)] = max(((float32*)compute[108] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 112)] = max(((float32*)compute[4] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12656)] = max(((float32*)compute[18] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25200)] = max(((float32*)compute[32] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37744)] = max(((float32*)compute[46] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50288)] = max(((float32*)compute[60] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62832)] = max(((float32*)compute[74] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75376)] = max(((float32*)compute[88] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87920)] = max(((float32*)compute[102] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 126)] = max(((float32*)compute[11] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12670)] = max(((float32*)compute[25] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25214)] = max(((float32*)compute[39] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37758)] = max(((float32*)compute[53] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50302)] = max(((float32*)compute[67] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62846)] = max(((float32*)compute[81] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75390)] = max(((float32*)compute[95] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87934)] = max(((float32*)compute[109] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 140)] = max(((float32*)compute[5] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12684)] = max(((float32*)compute[19] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25228)] = max(((float32*)compute[33] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37772)] = max(((float32*)compute[47] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50316)] = max(((float32*)compute[61] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62860)] = max(((float32*)compute[75] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75404)] = max(((float32*)compute[89] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87948)] = max(((float32*)compute[103] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 154)] = max(((float32*)compute[12] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12698)] = max(((float32*)compute[26] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25242)] = max(((float32*)compute[40] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37786)] = max(((float32*)compute[54] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50330)] = max(((float32*)compute[68] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62874)] = max(((float32*)compute[82] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75418)] = max(((float32*)compute[96] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87962)] = max(((float32*)compute[110] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 168)] = max(((float32*)compute[6] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12712)] = max(((float32*)compute[20] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25256)] = max(((float32*)compute[34] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37800)] = max(((float32*)compute[48] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50344)] = max(((float32*)compute[62] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62888)] = max(((float32*)compute[76] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75432)] = max(((float32*)compute[90] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87976)] = max(((float32*)compute[104] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 182)] = max(((float32*)compute[13] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 12726)] = max(((float32*)compute[27] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 25270)] = max(((float32*)compute[41] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 37814)] = max(((float32*)compute[55] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 50358)] = max(((float32*)compute[69] + (float32*)placeholder_6[(threadIdx.z + 64)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 62902)] = max(((float32*)compute[83] + (float32*)placeholder_6[(threadIdx.z + 80)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 75446)] = max(((float32*)compute[97] + (float32*)placeholder_6[(threadIdx.z + 96)]), 0f32)
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*196)) + threadIdx.x) + 87990)] = max(((float32*)compute[111] + (float32*)placeholder_6[(threadIdx.z + 112)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 128, 28, 28], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [1, 128, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 128, 28, 28], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [4, 4, 128, 128], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [12845056]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [12845056]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6272;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [16]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [16]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 4) {
        for (nu: int32, 0, 4) {
          d[((eps*4) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*2) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*2) + eps) < 29)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 14)*2) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 14)*2) + nu) < 29)), (float32*)placeholder_7[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 6272), 196)*100352) + (floordiv(((blockIdx.x*128) + threadIdx.x), 6272)*784)) + (floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*56)) + (eps*28)) + (floormod(((blockIdx.x*128) + threadIdx.x), 14)*2)) + nu) - 29)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[8]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[10]*-1f32)*-1f32))
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[1]*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[2])
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1f32))
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[1])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[2])
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[9]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1f32))
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[3])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[11]*-1f32))
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[4]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[8])
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1f32))
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[6]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[9]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[10])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[5]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[6]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[9])
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[7]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[11])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[4])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[6]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[8])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[10]*-1f32))
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[5]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[6])
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[5])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[6])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[9])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[5]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[4]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[12])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[14]*-1f32))
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[6]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[14])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[5]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[6]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[13])
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[14])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[7]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[13]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[15])
      for (eps_1: int32, 0, 4) {
        for (nu_1: int32, 0, 4) {
          data_pack[((((eps_1*3211264) + (nu_1*802816)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*4) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 16;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [64]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [2048]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [1024]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 98;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16 {
      for (co.c.init: int32, 0, 16) {
        for (p.c.init: int32, 0, 2) {
          bgemm.local[((co.c.init*2) + p.c.init)] = 0f32
          bgemm.local[(((co.c.init*2) + p.c.init) + 32)] = 0f32
        }
      }
      for (ci.outer: int32, 0, 8) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 16) {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          placeholder.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + (threadIdx.y_1*16)) + threadIdx.x_2)] = (float32*)placeholder_8[(((((blockIdx.z*16384) + (ci.outer*2048)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128)) + (threadIdx.y_1*16)) + threadIdx.x_2)]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 8) {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          data_pack.shared[((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + ((threadIdx.y_2*16) + threadIdx.x_3))] = (float32*)data_pack[((((((blockIdx.z*802816) + (ci.outer*100352)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*12544)) + (floordiv(((threadIdx.y_2*16) + threadIdx.x_3), 64)*6272)) + (blockIdx.x_1*64)) + floormod(((threadIdx.y_2*16) + threadIdx.x_3), 64))]
        }
        for (ci.inner: int32, 0, 16) {
          for (co.c: int32, 0, 16) {
            for (p.c: int32, 0, 2) {
              bgemm.local[((co.c*2) + p.c)] = ((float32*)bgemm.local[((co.c*2) + p.c)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*16)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*64) + (threadIdx.x_1*2)) + p.c)]))
              bgemm.local[(((co.c*2) + p.c) + 32)] = ((float32*)bgemm.local[(((co.c*2) + p.c) + 32)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*16)) + co.c)]*(float32*)data_pack.shared[((((ci.inner*64) + (threadIdx.x_1*2)) + p.c) + 32)]))
            }
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 16) {
        for (p.inner.inner.inner: int32, 0, 2) {
          bgemm[((((((blockIdx.z*802816) + (threadIdx.y*100352)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + (threadIdx.x_1*2)) + p.inner.inner.inner)] = (float32*)bgemm.local[((co.inner.inner.inner*2) + p.inner.inner.inner)]
          bgemm[(((((((blockIdx.z*802816) + (threadIdx.y*100352)) + (co.inner.inner.inner*6272)) + (blockIdx.x_1*64)) + (threadIdx.x_1*2)) + p.inner.inner.inner) + 32)] = (float32*)bgemm.local[(((co.inner.inner.inner*2) + p.inner.inner.inner) + 32)]
        }
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6272;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [4]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 802816)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 1605632)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 2408448)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)])
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 3211264)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 6422528)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 9633792)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)])
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4014080)]*-1f32)*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 4816896)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 5619712)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 7225344)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8028160)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 8830976)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 10436608)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 11239424)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)*6272) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 25088)*196)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 196)) + 12042240)])
      for (ax2.inner: int32, 0, 2) {
        for (ax3.inner: int32, 0, 2) {
          T_relu_2[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 14)*56) + (ax2.inner*28)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 14)*2)) + ax3.inner)] = max(((float32*)inverse[((ax2.inner*2) + ax3.inner)] + (float32*)placeholder_6[floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 25088), 196)]), 0f32)
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_1", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 256, 14, 14], []),
             placeholder: Buffer(placeholder_6: handle, float32, [32, 256, 14, 14], []),
             placeholder_2: Buffer(placeholder_7: handle, float32, [1, 256, 1, 1], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [4, 4, 256, 256], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_add_1: T_add} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [6422528]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [6422528]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 3136;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [16]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [16]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 4) {
        for (nu: int32, 0, 4) {
          d[((eps*4) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*2) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*2) + eps) < 15)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 7)*2) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 7)*2) + nu) < 15)), (float32*)placeholder_6[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 1568), 49)*50176) + (floordiv(((blockIdx.x*128) + threadIdx.x), 1568)*196)) + (floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*28)) + (eps*14)) + (floormod(((blockIdx.x*128) + threadIdx.x), 7)*2)) + nu) - 15)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[8]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[10]*-1f32)*-1f32))
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[1]*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[2])
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1f32))
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[1])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[2])
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[9]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1f32))
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[3])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[11]*-1f32))
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[4]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[8])
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1f32))
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[6]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[9]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[10])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[5]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[6]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[9])
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[7]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[11])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[4])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[6]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[8])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[10]*-1f32))
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[5]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[6])
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[5])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[6])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[9])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[5]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[4]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[12])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[14]*-1f32))
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[6]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[14])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[5]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[6]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[13])
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[14])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[7]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[13]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[15])
      for (eps_1: int32, 0, 4) {
        for (nu_1: int32, 0, 4) {
          data_pack[((((eps_1*1605632) + (nu_1*401408)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*4) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 16;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [112]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [1024]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [896]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 14;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16 {
      for (co.c.init: int32, 0, 4) "unroll" {
        bgemm.local[co.c.init] = 0f32
        bgemm.local[(co.c.init + 28)] = 0f32
        bgemm.local[(co.c.init + 56)] = 0f32
        bgemm.local[(co.c.init + 84)] = 0f32
        bgemm.local[(co.c.init + 4)] = 0f32
        bgemm.local[(co.c.init + 32)] = 0f32
        bgemm.local[(co.c.init + 60)] = 0f32
        bgemm.local[(co.c.init + 88)] = 0f32
        bgemm.local[(co.c.init + 8)] = 0f32
        bgemm.local[(co.c.init + 36)] = 0f32
        bgemm.local[(co.c.init + 64)] = 0f32
        bgemm.local[(co.c.init + 92)] = 0f32
        bgemm.local[(co.c.init + 12)] = 0f32
        bgemm.local[(co.c.init + 40)] = 0f32
        bgemm.local[(co.c.init + 68)] = 0f32
        bgemm.local[(co.c.init + 96)] = 0f32
        bgemm.local[(co.c.init + 16)] = 0f32
        bgemm.local[(co.c.init + 44)] = 0f32
        bgemm.local[(co.c.init + 72)] = 0f32
        bgemm.local[(co.c.init + 100)] = 0f32
        bgemm.local[(co.c.init + 20)] = 0f32
        bgemm.local[(co.c.init + 48)] = 0f32
        bgemm.local[(co.c.init + 76)] = 0f32
        bgemm.local[(co.c.init + 104)] = 0f32
        bgemm.local[(co.c.init + 24)] = 0f32
        bgemm.local[(co.c.init + 52)] = 0f32
        bgemm.local[(co.c.init + 80)] = 0f32
        bgemm.local[(co.c.init + 108)] = 0f32
      }
      for (ci.outer: int32, 0, 32) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 8) "unroll" {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          placeholder.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + (threadIdx.y_1*16)) + threadIdx.x_2)] = (float32*)placeholder_8[((((((blockIdx.z*65536) + (ci.outer*2048)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*256)) + (blockIdx.y*128)) + (threadIdx.y_1*16)) + threadIdx.x_2)]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 7) "unroll" {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          data_pack.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*16)) + threadIdx.x_3)] = (float32*)data_pack[(((((blockIdx.z*401408) + (ci.outer*12544)) + (floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*16)) + threadIdx.x_3), 112)*1568)) + (blockIdx.x_1*112)) + floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*16)) + threadIdx.x_3), 112))]
        }
        for (ci.inner: int32, 0, 8) {
          for (co.c: int32, 0, 4) "unroll" {
            bgemm.local[co.c] = ((float32*)bgemm.local[co.c] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 28)] = ((float32*)bgemm.local[(co.c + 28)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 56)] = ((float32*)bgemm.local[(co.c + 56)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 84)] = ((float32*)bgemm.local[(co.c + 84)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 4)] = ((float32*)bgemm.local[(co.c + 4)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 32)] = ((float32*)bgemm.local[(co.c + 32)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 60)] = ((float32*)bgemm.local[(co.c + 60)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 88)] = ((float32*)bgemm.local[(co.c + 88)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 8)] = ((float32*)bgemm.local[(co.c + 8)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 36)] = ((float32*)bgemm.local[(co.c + 36)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 64)] = ((float32*)bgemm.local[(co.c + 64)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 92)] = ((float32*)bgemm.local[(co.c + 92)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 12)] = ((float32*)bgemm.local[(co.c + 12)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 40)] = ((float32*)bgemm.local[(co.c + 40)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 68)] = ((float32*)bgemm.local[(co.c + 68)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 96)] = ((float32*)bgemm.local[(co.c + 96)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 16)] = ((float32*)bgemm.local[(co.c + 16)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 44)] = ((float32*)bgemm.local[(co.c + 44)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 72)] = ((float32*)bgemm.local[(co.c + 72)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 100)] = ((float32*)bgemm.local[(co.c + 100)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 20)] = ((float32*)bgemm.local[(co.c + 20)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 48)] = ((float32*)bgemm.local[(co.c + 48)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 76)] = ((float32*)bgemm.local[(co.c + 76)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 104)] = ((float32*)bgemm.local[(co.c + 104)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 24)] = ((float32*)bgemm.local[(co.c + 24)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
            bgemm.local[(co.c + 52)] = ((float32*)bgemm.local[(co.c + 52)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
            bgemm.local[(co.c + 80)] = ((float32*)bgemm.local[(co.c + 80)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
            bgemm.local[(co.c + 108)] = ((float32*)bgemm.local[(co.c + 108)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 4) "unroll" {
        bgemm[((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1)] = (float32*)bgemm.local[co.inner.inner.inner]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50176)] = (float32*)bgemm.local[(co.inner.inner.inner + 28)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100352)] = (float32*)bgemm.local[(co.inner.inner.inner + 56)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150528)] = (float32*)bgemm.local[(co.inner.inner.inner + 84)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 16)] = (float32*)bgemm.local[(co.inner.inner.inner + 4)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50192)] = (float32*)bgemm.local[(co.inner.inner.inner + 32)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100368)] = (float32*)bgemm.local[(co.inner.inner.inner + 60)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150544)] = (float32*)bgemm.local[(co.inner.inner.inner + 88)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 32)] = (float32*)bgemm.local[(co.inner.inner.inner + 8)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50208)] = (float32*)bgemm.local[(co.inner.inner.inner + 36)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100384)] = (float32*)bgemm.local[(co.inner.inner.inner + 64)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150560)] = (float32*)bgemm.local[(co.inner.inner.inner + 92)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 48)] = (float32*)bgemm.local[(co.inner.inner.inner + 12)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50224)] = (float32*)bgemm.local[(co.inner.inner.inner + 40)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100400)] = (float32*)bgemm.local[(co.inner.inner.inner + 68)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150576)] = (float32*)bgemm.local[(co.inner.inner.inner + 96)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 64)] = (float32*)bgemm.local[(co.inner.inner.inner + 16)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50240)] = (float32*)bgemm.local[(co.inner.inner.inner + 44)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100416)] = (float32*)bgemm.local[(co.inner.inner.inner + 72)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150592)] = (float32*)bgemm.local[(co.inner.inner.inner + 100)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 80)] = (float32*)bgemm.local[(co.inner.inner.inner + 20)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50256)] = (float32*)bgemm.local[(co.inner.inner.inner + 48)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100432)] = (float32*)bgemm.local[(co.inner.inner.inner + 76)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150608)] = (float32*)bgemm.local[(co.inner.inner.inner + 104)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 96)] = (float32*)bgemm.local[(co.inner.inner.inner + 24)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50272)] = (float32*)bgemm.local[(co.inner.inner.inner + 52)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100448)] = (float32*)bgemm.local[(co.inner.inner.inner + 80)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150624)] = (float32*)bgemm.local[(co.inner.inner.inner + 108)]
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 3136;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [4]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 401408)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 802816)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 1605632)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3211264)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 401408)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 802816)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 1204224)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2809856)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4415488)])
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 1605632)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3211264)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4816896)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5218304)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5619712)])
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)]*-1f32)*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2809856)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4415488)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5218304)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5619712)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 6021120)])
      for (ax2.inner: int32, 0, 2) {
        for (ax3.inner: int32, 0, 2) {
          T_add_2[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 7)*28) + (ax2.inner*14)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 7)*2)) + ax3.inner)] = ((float32*)inverse[((ax2.inner*2) + ax3.inner)] + (float32*)placeholder_7[floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)])
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_nn_relu_2", "tir.noalias": True}
  buffers = {placeholder_2: Buffer(placeholder_6: handle, float32, [1, 256, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 128, 28, 28], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 256, 14, 14], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [256, 128, 3, 3], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [112]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1682]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [2304]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[8] = 0f32
    compute[16] = 0f32
    compute[24] = 0f32
    compute[32] = 0f32
    compute[40] = 0f32
    compute[48] = 0f32
    compute[56] = 0f32
    compute[64] = 0f32
    compute[72] = 0f32
    compute[80] = 0f32
    compute[88] = 0f32
    compute[96] = 0f32
    compute[104] = 0f32
    compute[1] = 0f32
    compute[9] = 0f32
    compute[17] = 0f32
    compute[25] = 0f32
    compute[33] = 0f32
    compute[41] = 0f32
    compute[49] = 0f32
    compute[57] = 0f32
    compute[65] = 0f32
    compute[73] = 0f32
    compute[81] = 0f32
    compute[89] = 0f32
    compute[97] = 0f32
    compute[105] = 0f32
    compute[2] = 0f32
    compute[10] = 0f32
    compute[18] = 0f32
    compute[26] = 0f32
    compute[34] = 0f32
    compute[42] = 0f32
    compute[50] = 0f32
    compute[58] = 0f32
    compute[66] = 0f32
    compute[74] = 0f32
    compute[82] = 0f32
    compute[90] = 0f32
    compute[98] = 0f32
    compute[106] = 0f32
    compute[3] = 0f32
    compute[11] = 0f32
    compute[19] = 0f32
    compute[27] = 0f32
    compute[35] = 0f32
    compute[43] = 0f32
    compute[51] = 0f32
    compute[59] = 0f32
    compute[67] = 0f32
    compute[75] = 0f32
    compute[83] = 0f32
    compute[91] = 0f32
    compute[99] = 0f32
    compute[107] = 0f32
    compute[4] = 0f32
    compute[12] = 0f32
    compute[20] = 0f32
    compute[28] = 0f32
    compute[36] = 0f32
    compute[44] = 0f32
    compute[52] = 0f32
    compute[60] = 0f32
    compute[68] = 0f32
    compute[76] = 0f32
    compute[84] = 0f32
    compute[92] = 0f32
    compute[100] = 0f32
    compute[108] = 0f32
    compute[5] = 0f32
    compute[13] = 0f32
    compute[21] = 0f32
    compute[29] = 0f32
    compute[37] = 0f32
    compute[45] = 0f32
    compute[53] = 0f32
    compute[61] = 0f32
    compute[69] = 0f32
    compute[77] = 0f32
    compute[85] = 0f32
    compute[93] = 0f32
    compute[101] = 0f32
    compute[109] = 0f32
    compute[6] = 0f32
    compute[14] = 0f32
    compute[22] = 0f32
    compute[30] = 0f32
    compute[38] = 0f32
    compute[46] = 0f32
    compute[54] = 0f32
    compute[62] = 0f32
    compute[70] = 0f32
    compute[78] = 0f32
    compute[86] = 0f32
    compute[94] = 0f32
    compute[102] = 0f32
    compute[110] = 0f32
    compute[7] = 0f32
    compute[15] = 0f32
    compute[23] = 0f32
    compute[31] = 0f32
    compute[39] = 0f32
    compute[47] = 0f32
    compute[55] = 0f32
    compute[63] = 0f32
    compute[71] = 0f32
    compute[79] = 0f32
    compute[87] = 0f32
    compute[95] = 0f32
    compute[103] = 0f32
    compute[111] = 0f32
    for (rc.outer: int32, 0, 64) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_1*106) + (threadIdx.x_1*8)) < 1682) {
          pad_temp.shared[((threadIdx.z_1*106) + (threadIdx.x_1*8))] = @tir.if_then_else(((29 <= floormod(((threadIdx.z_1*106) + (threadIdx.x_1*8)), 841)) && (1 <= floormod(((threadIdx.z_1*106) + (threadIdx.x_1*8)), 29))), (float32*)placeholder_7[((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*1568)) + (floordiv(((threadIdx.z_1*106) + (threadIdx.x_1*8)), 841)*784)) + (floordiv(floormod(((threadIdx.z_1*106) + (threadIdx.x_1*8)), 841), 29)*28)) + floormod(((threadIdx.z_1*106) + (threadIdx.x_1*8)), 29)) - 29)], 0f32, dtype=float32)
        }
        if (((threadIdx.z_1*106) + (threadIdx.x_1*8)) < 1681) {
          pad_temp.shared[(((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 1)] = @tir.if_then_else(((29 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 1), 841)) && (1 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 1), 29))), (float32*)placeholder_7[((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*1568)) + (floordiv((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 1), 841)*784)) + (floordiv(floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 1), 841), 29)*28)) + floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 1), 29)) - 29)], 0f32, dtype=float32)
        }
        if (((threadIdx.z_1*106) + (threadIdx.x_1*8)) < 1680) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 2)] = @tir.if_then_else(((29 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 2), 841)) && (1 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 2), 29))), (float32*)placeholder_7[((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*1568)) + (floordiv((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 2), 841)*784)) + (floordiv(floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 2), 841), 29)*28)) + floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 2), 29)) - 29)], 0f32, dtype=float32)
          }
        }
        if (((threadIdx.z_1*106) + (threadIdx.x_1*8)) < 1679) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 3)] = @tir.if_then_else(((29 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 3), 841)) && (1 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 3), 29))), (float32*)placeholder_7[((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*1568)) + (floordiv((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 3), 841)*784)) + (floordiv(floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 3), 841), 29)*28)) + floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 3), 29)) - 29)], 0f32, dtype=float32)
          }
        }
        if (((threadIdx.z_1*106) + (threadIdx.x_1*8)) < 1678) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 4)] = @tir.if_then_else(((29 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 4), 841)) && (1 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 4), 29))), (float32*)placeholder_7[((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*1568)) + (floordiv((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 4), 841)*784)) + (floordiv(floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 4), 841), 29)*28)) + floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 4), 29)) - 29)], 0f32, dtype=float32)
          }
        }
        if (((threadIdx.z_1*106) + (threadIdx.x_1*8)) < 1677) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 5)] = @tir.if_then_else(((29 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 5), 841)) && (1 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 5), 29))), (float32*)placeholder_7[((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*1568)) + (floordiv((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 5), 841)*784)) + (floordiv(floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 5), 841), 29)*28)) + floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 5), 29)) - 29)], 0f32, dtype=float32)
          }
        }
        if (((threadIdx.z_1*106) + (threadIdx.x_1*8)) < 1676) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 6)] = @tir.if_then_else(((29 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 6), 841)) && (1 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 6), 29))), (float32*)placeholder_7[((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*1568)) + (floordiv((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 6), 841)*784)) + (floordiv(floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 6), 841), 29)*28)) + floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 6), 29)) - 29)], 0f32, dtype=float32)
          }
        }
        if (((threadIdx.z_1*106) + (threadIdx.x_1*8)) < 1675) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 7)] = @tir.if_then_else(((29 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 7), 841)) && (1 <= floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 7), 29))), (float32*)placeholder_7[((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*1568)) + (floordiv((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 7), 841)*784)) + (floordiv(floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 7), 841), 29)*28)) + floormod((((threadIdx.z_1*106) + (threadIdx.x_1*8)) + 7), 29)) - 29)], 0f32, dtype=float32)
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        placeholder.shared[((threadIdx.z_2*144) + (threadIdx.x_2*11))] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv((threadIdx.x_2*11), 18)*1152)) + (rc.outer*18)) + floormod((threadIdx.x_2*11), 18))]
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 1), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 1), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 1), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2303) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 1)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + 1), 18)*1152)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 1), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 2), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 2), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 2), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2302) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 2)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + 2), 18)*1152)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 2), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 3), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 3), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv((threadIdx.x_2*11), 3)) < 767) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2301) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 3)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + 3), 18)*1152)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 3), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 4), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 4), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 4), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2300) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 4)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + 4), 18)*1152)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 4), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 5), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 5), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 5), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2299) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 5)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + 5), 18)*1152)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 5), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 6), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 6), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv((threadIdx.x_2*11), 3)) < 766) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2298) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 6)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + 6), 18)*1152)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 6), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 7), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 7), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 7), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2297) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 7)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + 7), 18)*1152)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 7), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 8), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 8), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 8), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2296) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 8)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + 8), 18)*1152)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 8), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 9), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv((threadIdx.x_2*11), 9)) < 255) {
            if (((threadIdx.z_2*48) + floordiv((threadIdx.x_2*11), 3)) < 765) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2295) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 9)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + 9), 18)*1152)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 9), 18))]
                }
              }
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + 10), 18)) < 128) {
          if (((threadIdx.z_2*16) + floordiv(((threadIdx.x_2*11) + 10), 9)) < 256) {
            if (((threadIdx.z_2*48) + floordiv(((threadIdx.x_2*11) + 10), 3)) < 768) {
              if (((threadIdx.z_2*144) + (threadIdx.x_2*11)) < 2294) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*144) + (threadIdx.x_2*11)) + 10)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*147456) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + 10), 18)*1152)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + 10), 18))]
                }
              }
            }
          }
        }
      }
      for (rc.inner: int32, 0, 2) {
        for (ry.inner: int32, 0, 3) {
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 174)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 232)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 290)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 348)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 406)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 464)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 522)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 580)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 638)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 696)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 754)]*(float32*)placeholder.shared[(((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3))]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2))]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 174)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 232)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 290)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 348)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 406)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 464)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 522)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 580)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 638)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 696)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 754)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 18)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2))]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 174)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 232)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 290)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 348)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 406)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 464)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 522)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 580)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 638)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 696)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 754)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 36)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2))]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 174)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 232)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 290)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 348)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 406)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 464)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 522)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 580)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 638)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 696)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 754)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 54)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2))]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 174)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 232)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 290)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 348)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 406)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 464)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 522)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 580)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 638)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 696)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 754)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 72)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2))]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 174)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 232)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 290)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 348)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 406)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 464)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 522)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 580)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 638)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 696)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 754)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 90)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2))]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 174)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 232)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 290)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 348)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 406)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 464)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 522)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 580)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 638)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 696)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 754)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 108)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2))]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 58)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 116)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 174)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 232)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 290)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 348)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 406)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 464)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 522)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 580)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 638)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 696)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 754)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 126)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 117)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 175)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 233)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 291)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 349)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 407)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 465)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 523)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 581)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 639)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 697)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 755)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 1)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 117)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 175)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 233)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 291)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 349)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 407)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 465)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 523)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 581)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 639)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 697)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 755)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 19)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 117)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 175)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 233)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 291)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 349)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 407)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 465)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 523)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 581)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 639)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 697)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 755)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 37)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 117)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 175)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 233)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 291)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 349)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 407)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 465)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 523)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 581)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 639)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 697)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 755)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 55)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 117)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 175)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 233)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 291)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 349)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 407)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 465)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 523)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 581)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 639)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 697)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 755)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 73)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 117)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 175)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 233)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 291)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 349)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 407)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 465)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 523)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 581)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 639)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 697)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 755)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 91)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 117)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 175)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 233)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 291)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 349)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 407)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 465)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 523)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 581)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 639)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 697)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 755)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 109)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 1)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 59)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 117)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 175)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 233)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 291)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 349)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 407)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 465)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 523)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 581)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 639)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 697)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 755)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 127)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 60)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 118)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 176)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 234)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 292)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 350)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 408)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[64] = ((float32*)compute[64] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 466)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[72] = ((float32*)compute[72] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 524)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[80] = ((float32*)compute[80] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 582)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[88] = ((float32*)compute[88] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 640)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[96] = ((float32*)compute[96] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 698)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[104] = ((float32*)compute[104] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 756)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 2)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 60)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 118)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 176)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 234)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 292)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 350)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 408)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[65] = ((float32*)compute[65] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 466)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[73] = ((float32*)compute[73] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 524)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[81] = ((float32*)compute[81] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 582)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[89] = ((float32*)compute[89] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 640)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[97] = ((float32*)compute[97] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 698)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[105] = ((float32*)compute[105] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 756)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 20)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 60)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 118)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 176)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 234)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 292)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 350)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 408)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[66] = ((float32*)compute[66] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 466)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[74] = ((float32*)compute[74] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 524)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[82] = ((float32*)compute[82] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 582)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[90] = ((float32*)compute[90] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 640)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[98] = ((float32*)compute[98] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 698)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[106] = ((float32*)compute[106] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 756)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 38)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 60)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 118)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 176)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 234)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 292)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 350)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 408)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[67] = ((float32*)compute[67] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 466)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[75] = ((float32*)compute[75] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 524)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[83] = ((float32*)compute[83] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 582)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[91] = ((float32*)compute[91] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 640)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[99] = ((float32*)compute[99] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 698)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[107] = ((float32*)compute[107] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 756)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 56)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 60)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 118)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 176)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 234)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 292)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 350)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 408)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[68] = ((float32*)compute[68] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 466)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[76] = ((float32*)compute[76] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 524)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[84] = ((float32*)compute[84] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 582)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[92] = ((float32*)compute[92] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 640)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[100] = ((float32*)compute[100] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 698)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[108] = ((float32*)compute[108] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 756)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 74)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 60)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 118)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 176)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 234)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 292)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 350)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 408)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[69] = ((float32*)compute[69] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 466)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[77] = ((float32*)compute[77] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 524)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[85] = ((float32*)compute[85] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 582)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[93] = ((float32*)compute[93] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 640)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[101] = ((float32*)compute[101] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 698)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[109] = ((float32*)compute[109] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 756)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 92)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 60)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 118)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 176)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 234)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 292)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 350)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 408)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[70] = ((float32*)compute[70] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 466)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[78] = ((float32*)compute[78] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 524)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[86] = ((float32*)compute[86] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 582)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[94] = ((float32*)compute[94] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 640)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[102] = ((float32*)compute[102] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 698)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[110] = ((float32*)compute[110] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 756)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 110)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 2)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 60)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 118)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 176)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 234)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 292)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 350)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 408)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[71] = ((float32*)compute[71] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 466)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[79] = ((float32*)compute[79] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 524)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[87] = ((float32*)compute[87] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 582)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[95] = ((float32*)compute[95] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 640)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[103] = ((float32*)compute[103] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 698)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
          compute[111] = ((float32*)compute[111] + ((float32*)pad_temp.shared[((((rc.inner*841) + (ry.inner*29)) + (threadIdx.x*2)) + 756)]*(float32*)placeholder.shared[((((threadIdx.z*144) + (rc.inner*9)) + (ry.inner*3)) + 128)]))
        }
      }
    }
    T_relu_2[(((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x)] = max(((float32*)compute[0] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 14)] = max(((float32*)compute[8] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 28)] = max(((float32*)compute[16] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 42)] = max(((float32*)compute[24] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 56)] = max(((float32*)compute[32] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 70)] = max(((float32*)compute[40] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 84)] = max(((float32*)compute[48] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 98)] = max(((float32*)compute[56] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 112)] = max(((float32*)compute[64] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 126)] = max(((float32*)compute[72] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 140)] = max(((float32*)compute[80] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 154)] = max(((float32*)compute[88] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 168)] = max(((float32*)compute[96] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 182)] = max(((float32*)compute[104] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8))]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 196)] = max(((float32*)compute[1] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 210)] = max(((float32*)compute[9] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 224)] = max(((float32*)compute[17] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 238)] = max(((float32*)compute[25] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 252)] = max(((float32*)compute[33] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 266)] = max(((float32*)compute[41] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 280)] = max(((float32*)compute[49] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 294)] = max(((float32*)compute[57] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 308)] = max(((float32*)compute[65] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 322)] = max(((float32*)compute[73] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 336)] = max(((float32*)compute[81] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 350)] = max(((float32*)compute[89] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 364)] = max(((float32*)compute[97] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 378)] = max(((float32*)compute[105] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 392)] = max(((float32*)compute[2] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 406)] = max(((float32*)compute[10] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 420)] = max(((float32*)compute[18] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 434)] = max(((float32*)compute[26] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 448)] = max(((float32*)compute[34] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 462)] = max(((float32*)compute[42] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 476)] = max(((float32*)compute[50] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 490)] = max(((float32*)compute[58] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 504)] = max(((float32*)compute[66] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 518)] = max(((float32*)compute[74] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 532)] = max(((float32*)compute[82] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 546)] = max(((float32*)compute[90] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 560)] = max(((float32*)compute[98] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 574)] = max(((float32*)compute[106] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 588)] = max(((float32*)compute[3] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 602)] = max(((float32*)compute[11] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 616)] = max(((float32*)compute[19] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 630)] = max(((float32*)compute[27] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 644)] = max(((float32*)compute[35] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 658)] = max(((float32*)compute[43] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 672)] = max(((float32*)compute[51] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 686)] = max(((float32*)compute[59] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 700)] = max(((float32*)compute[67] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 714)] = max(((float32*)compute[75] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 728)] = max(((float32*)compute[83] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 742)] = max(((float32*)compute[91] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 756)] = max(((float32*)compute[99] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 770)] = max(((float32*)compute[107] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 784)] = max(((float32*)compute[4] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 798)] = max(((float32*)compute[12] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 812)] = max(((float32*)compute[20] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 826)] = max(((float32*)compute[28] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 840)] = max(((float32*)compute[36] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 854)] = max(((float32*)compute[44] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 868)] = max(((float32*)compute[52] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 882)] = max(((float32*)compute[60] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 896)] = max(((float32*)compute[68] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 910)] = max(((float32*)compute[76] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 924)] = max(((float32*)compute[84] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 938)] = max(((float32*)compute[92] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 952)] = max(((float32*)compute[100] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 966)] = max(((float32*)compute[108] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 4)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 980)] = max(((float32*)compute[5] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 994)] = max(((float32*)compute[13] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1008)] = max(((float32*)compute[21] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1022)] = max(((float32*)compute[29] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1036)] = max(((float32*)compute[37] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1050)] = max(((float32*)compute[45] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1064)] = max(((float32*)compute[53] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1078)] = max(((float32*)compute[61] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1092)] = max(((float32*)compute[69] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1106)] = max(((float32*)compute[77] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1120)] = max(((float32*)compute[85] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1134)] = max(((float32*)compute[93] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1148)] = max(((float32*)compute[101] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1162)] = max(((float32*)compute[109] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 5)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1176)] = max(((float32*)compute[6] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1190)] = max(((float32*)compute[14] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1204)] = max(((float32*)compute[22] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1218)] = max(((float32*)compute[30] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1232)] = max(((float32*)compute[38] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1246)] = max(((float32*)compute[46] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1260)] = max(((float32*)compute[54] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1274)] = max(((float32*)compute[62] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1288)] = max(((float32*)compute[70] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1302)] = max(((float32*)compute[78] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1316)] = max(((float32*)compute[86] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1330)] = max(((float32*)compute[94] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1344)] = max(((float32*)compute[102] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1358)] = max(((float32*)compute[110] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 6)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1372)] = max(((float32*)compute[7] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1386)] = max(((float32*)compute[15] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1400)] = max(((float32*)compute[23] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1414)] = max(((float32*)compute[31] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1428)] = max(((float32*)compute[39] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1442)] = max(((float32*)compute[47] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1456)] = max(((float32*)compute[55] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1470)] = max(((float32*)compute[63] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1484)] = max(((float32*)compute[71] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1498)] = max(((float32*)compute[79] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1512)] = max(((float32*)compute[87] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1526)] = max(((float32*)compute[95] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1540)] = max(((float32*)compute[103] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
    T_relu_2[((((blockIdx.z*25088) + (threadIdx.z*1568)) + threadIdx.x) + 1554)] = max(((float32*)compute[111] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*128) + (threadIdx.z*8)) + 7)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 256, 14, 14], []),
             placeholder: Buffer(placeholder_6: handle, float32, [32, 256, 14, 14], []),
             placeholder_2: Buffer(placeholder_7: handle, float32, [1, 256, 1, 1], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [4, 4, 256, 256], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [6422528]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [6422528]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 3136;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [16]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [16]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 4) {
        for (nu: int32, 0, 4) {
          d[((eps*4) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*2) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*2) + eps) < 15)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 7)*2) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 7)*2) + nu) < 15)), (float32*)placeholder_6[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 1568), 49)*50176) + (floordiv(((blockIdx.x*128) + threadIdx.x), 1568)*196)) + (floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*28)) + (eps*14)) + (floormod(((blockIdx.x*128) + threadIdx.x), 7)*2)) + nu) - 15)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[8]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[10]*-1f32)*-1f32))
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[1]*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[2])
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1f32))
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[1])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[2])
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[9]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1f32))
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[3])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[11]*-1f32))
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[4]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[8])
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1f32))
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[6]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[9]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[10])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[5]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[6]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[9])
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[7]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[11])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[4])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[6]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[8])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[10]*-1f32))
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[5]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[6])
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[5])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[6])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[9])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[5]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[4]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[12])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[14]*-1f32))
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[6]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[14])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[5]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[6]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[13])
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[14])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[7]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[13]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[15])
      for (eps_1: int32, 0, 4) {
        for (nu_1: int32, 0, 4) {
          data_pack[((((eps_1*1605632) + (nu_1*401408)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*4) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 16;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [112]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [1024]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [896]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 14;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16 {
      for (co.c.init: int32, 0, 4) "unroll" {
        bgemm.local[co.c.init] = 0f32
        bgemm.local[(co.c.init + 28)] = 0f32
        bgemm.local[(co.c.init + 56)] = 0f32
        bgemm.local[(co.c.init + 84)] = 0f32
        bgemm.local[(co.c.init + 4)] = 0f32
        bgemm.local[(co.c.init + 32)] = 0f32
        bgemm.local[(co.c.init + 60)] = 0f32
        bgemm.local[(co.c.init + 88)] = 0f32
        bgemm.local[(co.c.init + 8)] = 0f32
        bgemm.local[(co.c.init + 36)] = 0f32
        bgemm.local[(co.c.init + 64)] = 0f32
        bgemm.local[(co.c.init + 92)] = 0f32
        bgemm.local[(co.c.init + 12)] = 0f32
        bgemm.local[(co.c.init + 40)] = 0f32
        bgemm.local[(co.c.init + 68)] = 0f32
        bgemm.local[(co.c.init + 96)] = 0f32
        bgemm.local[(co.c.init + 16)] = 0f32
        bgemm.local[(co.c.init + 44)] = 0f32
        bgemm.local[(co.c.init + 72)] = 0f32
        bgemm.local[(co.c.init + 100)] = 0f32
        bgemm.local[(co.c.init + 20)] = 0f32
        bgemm.local[(co.c.init + 48)] = 0f32
        bgemm.local[(co.c.init + 76)] = 0f32
        bgemm.local[(co.c.init + 104)] = 0f32
        bgemm.local[(co.c.init + 24)] = 0f32
        bgemm.local[(co.c.init + 52)] = 0f32
        bgemm.local[(co.c.init + 80)] = 0f32
        bgemm.local[(co.c.init + 108)] = 0f32
      }
      for (ci.outer: int32, 0, 32) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 8) "unroll" {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          placeholder.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + (threadIdx.y_1*16)) + threadIdx.x_2)] = (float32*)placeholder_8[((((((blockIdx.z*65536) + (ci.outer*2048)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*256)) + (blockIdx.y*128)) + (threadIdx.y_1*16)) + threadIdx.x_2)]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 7) "unroll" {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 16;
          data_pack.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*16)) + threadIdx.x_3)] = (float32*)data_pack[(((((blockIdx.z*401408) + (ci.outer*12544)) + (floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*16)) + threadIdx.x_3), 112)*1568)) + (blockIdx.x_1*112)) + floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*16)) + threadIdx.x_3), 112))]
        }
        for (ci.inner: int32, 0, 8) {
          for (co.c: int32, 0, 4) "unroll" {
            bgemm.local[co.c] = ((float32*)bgemm.local[co.c] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 28)] = ((float32*)bgemm.local[(co.c + 28)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 56)] = ((float32*)bgemm.local[(co.c + 56)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 84)] = ((float32*)bgemm.local[(co.c + 84)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[((ci.inner*112) + threadIdx.x_1)]))
            bgemm.local[(co.c + 4)] = ((float32*)bgemm.local[(co.c + 4)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 32)] = ((float32*)bgemm.local[(co.c + 32)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 60)] = ((float32*)bgemm.local[(co.c + 60)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 88)] = ((float32*)bgemm.local[(co.c + 88)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 16)]))
            bgemm.local[(co.c + 8)] = ((float32*)bgemm.local[(co.c + 8)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 36)] = ((float32*)bgemm.local[(co.c + 36)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 64)] = ((float32*)bgemm.local[(co.c + 64)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 92)] = ((float32*)bgemm.local[(co.c + 92)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 32)]))
            bgemm.local[(co.c + 12)] = ((float32*)bgemm.local[(co.c + 12)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 40)] = ((float32*)bgemm.local[(co.c + 40)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 68)] = ((float32*)bgemm.local[(co.c + 68)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 96)] = ((float32*)bgemm.local[(co.c + 96)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 48)]))
            bgemm.local[(co.c + 16)] = ((float32*)bgemm.local[(co.c + 16)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 44)] = ((float32*)bgemm.local[(co.c + 44)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 72)] = ((float32*)bgemm.local[(co.c + 72)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 100)] = ((float32*)bgemm.local[(co.c + 100)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 64)]))
            bgemm.local[(co.c + 20)] = ((float32*)bgemm.local[(co.c + 20)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 48)] = ((float32*)bgemm.local[(co.c + 48)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 76)] = ((float32*)bgemm.local[(co.c + 76)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 104)] = ((float32*)bgemm.local[(co.c + 104)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 80)]))
            bgemm.local[(co.c + 24)] = ((float32*)bgemm.local[(co.c + 24)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*4)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
            bgemm.local[(co.c + 52)] = ((float32*)bgemm.local[(co.c + 52)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 32)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
            bgemm.local[(co.c + 80)] = ((float32*)bgemm.local[(co.c + 80)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 64)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
            bgemm.local[(co.c + 108)] = ((float32*)bgemm.local[(co.c + 108)] + ((float32*)placeholder.shared[((((ci.inner*128) + (threadIdx.y*4)) + co.c) + 96)]*(float32*)data_pack.shared[(((ci.inner*112) + threadIdx.x_1) + 96)]))
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 4) "unroll" {
        bgemm[((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1)] = (float32*)bgemm.local[co.inner.inner.inner]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50176)] = (float32*)bgemm.local[(co.inner.inner.inner + 28)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100352)] = (float32*)bgemm.local[(co.inner.inner.inner + 56)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150528)] = (float32*)bgemm.local[(co.inner.inner.inner + 84)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 16)] = (float32*)bgemm.local[(co.inner.inner.inner + 4)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50192)] = (float32*)bgemm.local[(co.inner.inner.inner + 32)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100368)] = (float32*)bgemm.local[(co.inner.inner.inner + 60)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150544)] = (float32*)bgemm.local[(co.inner.inner.inner + 88)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 32)] = (float32*)bgemm.local[(co.inner.inner.inner + 8)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50208)] = (float32*)bgemm.local[(co.inner.inner.inner + 36)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100384)] = (float32*)bgemm.local[(co.inner.inner.inner + 64)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150560)] = (float32*)bgemm.local[(co.inner.inner.inner + 92)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 48)] = (float32*)bgemm.local[(co.inner.inner.inner + 12)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50224)] = (float32*)bgemm.local[(co.inner.inner.inner + 40)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100400)] = (float32*)bgemm.local[(co.inner.inner.inner + 68)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150576)] = (float32*)bgemm.local[(co.inner.inner.inner + 96)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 64)] = (float32*)bgemm.local[(co.inner.inner.inner + 16)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50240)] = (float32*)bgemm.local[(co.inner.inner.inner + 44)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100416)] = (float32*)bgemm.local[(co.inner.inner.inner + 72)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150592)] = (float32*)bgemm.local[(co.inner.inner.inner + 100)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 80)] = (float32*)bgemm.local[(co.inner.inner.inner + 20)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50256)] = (float32*)bgemm.local[(co.inner.inner.inner + 48)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100432)] = (float32*)bgemm.local[(co.inner.inner.inner + 76)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150608)] = (float32*)bgemm.local[(co.inner.inner.inner + 104)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 96)] = (float32*)bgemm.local[(co.inner.inner.inner + 24)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 50272)] = (float32*)bgemm.local[(co.inner.inner.inner + 52)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 100448)] = (float32*)bgemm.local[(co.inner.inner.inner + 80)]
        bgemm[(((((((blockIdx.z*401408) + (blockIdx.y*200704)) + (threadIdx.y*6272)) + (co.inner.inner.inner*1568)) + (blockIdx.x_1*112)) + threadIdx.x_1) + 150624)] = (float32*)bgemm.local[(co.inner.inner.inner + 108)]
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 3136;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [4]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 401408)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 802816)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 1605632)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3211264)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 401408)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 802816)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 1204224)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2809856)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4415488)])
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 1605632)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3211264)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4816896)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5218304)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5619712)])
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + (((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2007040)]*-1f32)*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2408448)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 2809856)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 3612672)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4014080)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 4415488)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5218304)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 5619712)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)*1568) + (floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 12544)*49)) + floormod(((blockIdx.x_2*128) + threadIdx.x_4), 49)) + 6021120)])
      for (ax2.inner: int32, 0, 2) {
        for (ax3.inner: int32, 0, 2) {
          T_relu_2[((((floordiv(((blockIdx.x_2*128) + threadIdx.x_4), 7)*28) + (ax2.inner*14)) + (floormod(((blockIdx.x_2*128) + threadIdx.x_4), 7)*2)) + ax3.inner)] = max(((float32*)inverse[((ax2.inner*2) + ax3.inner)] + (float32*)placeholder_7[floordiv(floormod(((blockIdx.x_2*128) + threadIdx.x_4), 12544), 49)]), 0f32)
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_2", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 512, 7, 7], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [1, 512, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 512, 7, 7], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [4, 4, 512, 512], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_add_1: T_add} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [4194304]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [4194304]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2048;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [16]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [16]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 4) {
        for (nu: int32, 0, 4) {
          d[((eps*4) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(threadIdx.x, 16), 4)*2) + eps)) && (((floordiv(floormod(threadIdx.x, 16), 4)*2) + eps) < 8)) && (1 <= ((floormod(threadIdx.x, 4)*2) + nu))) && (((floormod(threadIdx.x, 4)*2) + nu) < 8)), (float32*)placeholder_7[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 512), 16)*25088) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*49)) + (floordiv(floormod(threadIdx.x, 16), 4)*14)) + (eps*7)) + (floormod(threadIdx.x, 4)*2)) + nu) - 8)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[8]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[10]*-1f32)*-1f32))
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[1]*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[2])
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1f32))
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[1])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[2])
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[9]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1f32))
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[3])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[11]*-1f32))
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[4]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[8])
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1f32))
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[6]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[9]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[10])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[5]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[6]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[9])
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[7]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[11])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[4])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[6]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[8])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[10]*-1f32))
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[5]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[6])
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[5])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[6])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[9])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[5]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[4]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[12])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[14]*-1f32))
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[6]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[14])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[5]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[6]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[13])
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[14])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[7]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[13]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[15])
      for (eps_1: int32, 0, 4) {
        for (nu_1: int32, 0, 4) {
          data_pack[((((eps_1*1048576) + (nu_1*262144)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*4) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 16;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [128]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [1024]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [1024]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 4;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
      for (co.c.init: int32, 0, 32) "unroll" {
        for (p.c.init: int32, 0, 4) "unroll" {
          bgemm.local[((co.c.init*4) + p.c.init)] = 0f32
        }
      }
      for (ci.outer: int32, 0, 64) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 8) "unroll" {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          placeholder.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + (threadIdx.y_1*32)) + threadIdx.x_2)] = (float32*)placeholder_8[((((((blockIdx.z*262144) + (ci.outer*4096)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*512)) + (blockIdx.y*128)) + (threadIdx.y_1*32)) + threadIdx.x_2)]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 8) "unroll" {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          data_pack.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*32)) + threadIdx.x_3)] = (float32*)data_pack[((((((blockIdx.z*262144) + (ci.outer*4096)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*512)) + (blockIdx.x_1*128)) + (threadIdx.y_2*32)) + threadIdx.x_3)]
        }
        for (ci.inner: int32, 0, 8) "unroll" {
          for (co.c: int32, 0, 32) "unroll" {
            for (p.c: int32, 0, 4) "unroll" {
              bgemm.local[((co.c*4) + p.c)] = ((float32*)bgemm.local[((co.c*4) + p.c)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*32)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*128) + (threadIdx.x_1*4)) + p.c)]))
            }
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 32) "unroll" {
        for (p.inner.inner.inner: int32, 0, 4) "unroll" {
          bgemm[(((((((blockIdx.z*262144) + (blockIdx.y*65536)) + (threadIdx.y*16384)) + (co.inner.inner.inner*512)) + (blockIdx.x_1*128)) + (threadIdx.x_1*4)) + p.inner.inner.inner)] = (float32*)bgemm.local[((co.inner.inner.inner*4) + p.inner.inner.inner)]
        }
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2048;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [4]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 262144)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 524288)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1048576)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2097152)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 262144)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 524288)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 786432)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1835008)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2883584)])
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1048576)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2097152)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3145728)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3407872)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3670016)])
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + (((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)]*-1f32)*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1835008)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2883584)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3407872)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3670016)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3932160)])
      for (ax2.inner: int32, 0, 2) {
        for (ax3.inner: int32, 0, 2) {
          if (((floordiv(floormod(threadIdx.x_4, 16), 4)*2) + ax2.inner) < 7) {
            if (((floormod(threadIdx.x_4, 4)*2) + ax3.inner) < 7) {
              T_add_2[((((((blockIdx.x_2*392) + (floordiv(threadIdx.x_4, 16)*49)) + (floordiv(floormod(threadIdx.x_4, 16), 4)*14)) + (ax2.inner*7)) + (floormod(threadIdx.x_4, 4)*2)) + ax3.inner)] = ((float32*)inverse[((ax2.inner*2) + ax3.inner)] + (float32*)placeholder_6[floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)])
            }
          }
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_nn_relu_3", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 512, 7, 7], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [1, 512, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 256, 14, 14], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [512, 256, 3, 3], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 128;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [450]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [2304]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    for (yy.init: int32, 0, 7) {
      compute[yy.init] = 0f32
      compute[(yy.init + 7)] = 0f32
      compute[(yy.init + 14)] = 0f32
      compute[(yy.init + 21)] = 0f32
    }
    for (rc.outer: int32, 0, 128) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 3) {
        if ((floordiv(((threadIdx.x_1*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 15) + threadIdx.z_1) < 30) {
          if ((((threadIdx.z_1*15) + (threadIdx.x_1*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 450) {
            if (((threadIdx.x_1*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 15) {
              if ((floordiv(threadIdx.z_1, 30) + floordiv(blockIdx.z, 4)) < 32) {
                pad_temp.shared[(((threadIdx.z_1*15) + (threadIdx.x_1*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = @tir.if_then_else(((1 <= floormod(threadIdx.z_1, 15)) && (1 <= ((threadIdx.x_1*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner))), (float32*)placeholder_7[((((((((floordiv(threadIdx.z_1, 30)*50176) + (floordiv(blockIdx.z, 4)*50176)) + (rc.outer*392)) + (floordiv(floormod(threadIdx.z_1, 30), 15)*196)) + (floormod(threadIdx.z_1, 15)*14)) + (threadIdx.x_1*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) - 15)], 0f32, dtype=float32)
              }
            }
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 11) {
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*11) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 18)) < 128) {
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*11) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 9)) < 256) {
            if (((threadIdx.z_2*24) + floordiv(((threadIdx.x_2*11) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 3)) < 768) {
              if ((((threadIdx.z_2*72) + (threadIdx.x_2*11)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 2304) {
                if (((threadIdx.x_2*11) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 72) {
                  placeholder.shared[(((threadIdx.z_2*72) + (threadIdx.x_2*11)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 4)*294912) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*11) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 18)*2304)) + (rc.outer*18)) + floormod(((threadIdx.x_2*11) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 18))]
                }
              }
            }
          }
        }
      }
      for (rc.inner: int32, 0, 2) {
        for (ry.inner: int32, 0, 3) {
          for (rx.inner: int32, 0, 3) {
            for (yy: int32, 0, 7) {
              compute[yy] = ((float32*)compute[yy] + ((float32*)pad_temp.shared[(((((rc.inner*225) + (yy*30)) + (ry.inner*15)) + (threadIdx.x*2)) + rx.inner)]*(float32*)placeholder.shared[((((threadIdx.z*18) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
              compute[(yy + 7)] = ((float32*)compute[(yy + 7)] + ((float32*)pad_temp.shared[(((((rc.inner*225) + (yy*30)) + (ry.inner*15)) + (threadIdx.x*2)) + rx.inner)]*(float32*)placeholder.shared[(((((threadIdx.z*18) + (rc.inner*9)) + (ry.inner*3)) + rx.inner) + 576)]))
              compute[(yy + 14)] = ((float32*)compute[(yy + 14)] + ((float32*)pad_temp.shared[(((((rc.inner*225) + (yy*30)) + (ry.inner*15)) + (threadIdx.x*2)) + rx.inner)]*(float32*)placeholder.shared[(((((threadIdx.z*18) + (rc.inner*9)) + (ry.inner*3)) + rx.inner) + 1152)]))
              compute[(yy + 21)] = ((float32*)compute[(yy + 21)] + ((float32*)pad_temp.shared[(((((rc.inner*225) + (yy*30)) + (ry.inner*15)) + (threadIdx.x*2)) + rx.inner)]*(float32*)placeholder.shared[(((((threadIdx.z*18) + (rc.inner*9)) + (ry.inner*3)) + rx.inner) + 1728)]))
            }
          }
        }
      }
    }
    for (ax2.inner.inner.inner: int32, 0, 7) {
      T_relu_2[((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x)] = max(((float32*)compute[ax2.inner.inner.inner] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*128) + threadIdx.z)]), 0f32)
      T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x) + 1568)] = max(((float32*)compute[(ax2.inner.inner.inner + 7)] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*128) + threadIdx.z) + 32)]), 0f32)
      T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x) + 3136)] = max(((float32*)compute[(ax2.inner.inner.inner + 14)] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*128) + threadIdx.z) + 64)]), 0f32)
      T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x) + 4704)] = max(((float32*)compute[(ax2.inner.inner.inner + 21)] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*128) + threadIdx.z) + 96)]), 0f32)
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw_winograd_without_weight_transform.cuda for op nn.contrib_conv2d_winograd_without_weight_transform
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 512, 7, 7], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [1, 512, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 512, 7, 7], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [4, 4, 512, 512], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [data_pack: handle] "storage_scope" = "global";
  allocate(data_pack, float32, [4194304]);
  attr [bgemm: handle] "storage_scope" = "global";
  allocate(bgemm, float32, [4194304]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2048;
    attr [d: handle] "storage_scope" = "local";
    allocate(d, float32, [16]);
    attr [data_pack.local: handle] "storage_scope" = "local";
    allocate(data_pack.local, float32, [16]);
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      for (eps: int32, 0, 4) {
        for (nu: int32, 0, 4) {
          d[((eps*4) + nu)] = @tir.if_then_else(((((1 <= ((floordiv(floormod(threadIdx.x, 16), 4)*2) + eps)) && (((floordiv(floormod(threadIdx.x, 16), 4)*2) + eps) < 8)) && (1 <= ((floormod(threadIdx.x, 4)*2) + nu))) && (((floormod(threadIdx.x, 4)*2) + nu) < 8)), (float32*)placeholder_7[(((((((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 512), 16)*25088) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*49)) + (floordiv(floormod(threadIdx.x, 16), 4)*14)) + (eps*7)) + (floormod(threadIdx.x, 4)*2)) + nu) - 8)], 0f32, dtype=float32)
        }
      }
      data_pack.local[0] = 0f32
      data_pack.local[0] = ((float32*)data_pack.local[0] + (float32*)d[0])
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[2]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + ((float32*)d[8]*-1f32))
      data_pack.local[0] = ((float32*)data_pack.local[0] + (((float32*)d[10]*-1f32)*-1f32))
      data_pack.local[1] = 0f32
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[1]*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + (float32*)d[2])
      data_pack.local[1] = ((float32*)data_pack.local[1] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[1] = ((float32*)data_pack.local[1] + ((float32*)d[10]*-1f32))
      data_pack.local[2] = 0f32
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[1])
      data_pack.local[2] = ((float32*)data_pack.local[2] + (float32*)d[2])
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[9]*-1f32))
      data_pack.local[2] = ((float32*)data_pack.local[2] + ((float32*)d[10]*-1f32))
      data_pack.local[3] = 0f32
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[1]*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + (float32*)d[3])
      data_pack.local[3] = ((float32*)data_pack.local[3] + (((float32*)d[9]*-1f32)*-1f32))
      data_pack.local[3] = ((float32*)data_pack.local[3] + ((float32*)d[11]*-1f32))
      data_pack.local[4] = 0f32
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[4]*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[4] = ((float32*)data_pack.local[4] + (float32*)d[8])
      data_pack.local[4] = ((float32*)data_pack.local[4] + ((float32*)d[10]*-1f32))
      data_pack.local[5] = 0f32
      data_pack.local[5] = ((float32*)data_pack.local[5] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[6]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + ((float32*)d[9]*-1f32))
      data_pack.local[5] = ((float32*)data_pack.local[5] + (float32*)d[10])
      data_pack.local[6] = 0f32
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[5]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + ((float32*)d[6]*-1f32))
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[9])
      data_pack.local[6] = ((float32*)data_pack.local[6] + (float32*)d[10])
      data_pack.local[7] = 0f32
      data_pack.local[7] = ((float32*)data_pack.local[7] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[7]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + ((float32*)d[9]*-1f32))
      data_pack.local[7] = ((float32*)data_pack.local[7] + (float32*)d[11])
      data_pack.local[8] = 0f32
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[4])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[6]*-1f32))
      data_pack.local[8] = ((float32*)data_pack.local[8] + (float32*)d[8])
      data_pack.local[8] = ((float32*)data_pack.local[8] + ((float32*)d[10]*-1f32))
      data_pack.local[9] = 0f32
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[5]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[6])
      data_pack.local[9] = ((float32*)data_pack.local[9] + ((float32*)d[9]*-1f32))
      data_pack.local[9] = ((float32*)data_pack.local[9] + (float32*)d[10])
      data_pack.local[10] = 0f32
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[5])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[6])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[9])
      data_pack.local[10] = ((float32*)data_pack.local[10] + (float32*)d[10])
      data_pack.local[11] = 0f32
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[5]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[7])
      data_pack.local[11] = ((float32*)data_pack.local[11] + ((float32*)d[9]*-1f32))
      data_pack.local[11] = ((float32*)data_pack.local[11] + (float32*)d[11])
      data_pack.local[12] = 0f32
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[4]*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (((float32*)d[6]*-1f32)*-1f32))
      data_pack.local[12] = ((float32*)data_pack.local[12] + (float32*)d[12])
      data_pack.local[12] = ((float32*)data_pack.local[12] + ((float32*)d[14]*-1f32))
      data_pack.local[13] = 0f32
      data_pack.local[13] = ((float32*)data_pack.local[13] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[6]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + ((float32*)d[13]*-1f32))
      data_pack.local[13] = ((float32*)data_pack.local[13] + (float32*)d[14])
      data_pack.local[14] = 0f32
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[5]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + ((float32*)d[6]*-1f32))
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[13])
      data_pack.local[14] = ((float32*)data_pack.local[14] + (float32*)d[14])
      data_pack.local[15] = 0f32
      data_pack.local[15] = ((float32*)data_pack.local[15] + (((float32*)d[5]*-1f32)*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[7]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + ((float32*)d[13]*-1f32))
      data_pack.local[15] = ((float32*)data_pack.local[15] + (float32*)d[15])
      for (eps_1: int32, 0, 4) {
        for (nu_1: int32, 0, 4) {
          data_pack[((((eps_1*1048576) + (nu_1*262144)) + (blockIdx.x*128)) + threadIdx.x)] = (float32*)data_pack.local[((eps_1*4) + nu_1)]
        }
      }
    }
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 16;
    attr [bgemm.local: handle] "storage_scope" = "local";
    allocate(bgemm.local, float32, [128]);
    attr [placeholder.shared: handle] "storage_scope" = "shared";
    allocate(placeholder.shared, float32, [1024]);
    attr [data_pack.shared: handle] "storage_scope" = "shared";
    allocate(data_pack.shared, float32, [1024]);
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 4;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
      for (co.c.init: int32, 0, 32) "unroll" {
        for (p.c.init: int32, 0, 4) "unroll" {
          bgemm.local[((co.c.init*4) + p.c.init)] = 0f32
        }
      }
      for (ci.outer: int32, 0, 64) {
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer: int32, 0, 8) "unroll" {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          placeholder.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + (threadIdx.y_1*32)) + threadIdx.x_2)] = (float32*)placeholder_8[((((((blockIdx.z*262144) + (ci.outer*4096)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*512)) + (blockIdx.y*128)) + (threadIdx.y_1*32)) + threadIdx.x_2)]
        }
        for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1: int32, 0, 8) "unroll" {
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          data_pack.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*128) + (threadIdx.y_2*32)) + threadIdx.x_3)] = (float32*)data_pack[((((((blockIdx.z*262144) + (ci.outer*4096)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer_1*512)) + (blockIdx.x_1*128)) + (threadIdx.y_2*32)) + threadIdx.x_3)]
        }
        for (ci.inner: int32, 0, 8) "unroll" {
          for (co.c: int32, 0, 32) "unroll" {
            for (p.c: int32, 0, 4) "unroll" {
              bgemm.local[((co.c*4) + p.c)] = ((float32*)bgemm.local[((co.c*4) + p.c)] + ((float32*)placeholder.shared[(((ci.inner*128) + (threadIdx.y*32)) + co.c)]*(float32*)data_pack.shared[(((ci.inner*128) + (threadIdx.x_1*4)) + p.c)]))
            }
          }
        }
      }
      for (co.inner.inner.inner: int32, 0, 32) "unroll" {
        for (p.inner.inner.inner: int32, 0, 4) "unroll" {
          bgemm[(((((((blockIdx.z*262144) + (blockIdx.y*65536)) + (threadIdx.y*16384)) + (co.inner.inner.inner*512)) + (blockIdx.x_1*128)) + (threadIdx.x_1*4)) + p.inner.inner.inner)] = (float32*)bgemm.local[((co.inner.inner.inner*4) + p.inner.inner.inner)]
        }
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2048;
    attr [inverse: handle] "storage_scope" = "local";
    allocate(inverse, float32, [4]);
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
      inverse[0] = 0f32
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[(((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16))])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 262144)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 524288)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1048576)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2097152)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)])
      inverse[0] = ((float32*)inverse[0] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[1] = 0f32
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 262144)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 524288)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 786432)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1835008)])
      inverse[1] = ((float32*)inverse[1] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)]*-1f32))
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[1] = ((float32*)inverse[1] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2883584)])
      inverse[2] = 0f32
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1048576)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)]*-1f32))
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2097152)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3145728)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3407872)])
      inverse[2] = ((float32*)inverse[2] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3670016)])
      inverse[3] = 0f32
      inverse[3] = ((float32*)inverse[3] + (((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1310720)]*-1f32)*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1572864)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 1835008)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2359296)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2621440)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 2883584)])
      inverse[3] = ((float32*)inverse[3] + ((float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3407872)]*-1f32))
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3670016)])
      inverse[3] = ((float32*)inverse[3] + (float32*)bgemm[((((floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*512) + (floordiv(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)*16)) + floormod(threadIdx.x_4, 16)) + 3932160)])
      for (ax2.inner: int32, 0, 2) {
        for (ax3.inner: int32, 0, 2) {
          if (((floordiv(floormod(threadIdx.x_4, 16), 4)*2) + ax2.inner) < 7) {
            if (((floormod(threadIdx.x_4, 4)*2) + ax3.inner) < 7) {
              T_relu_2[((((((blockIdx.x_2*392) + (floordiv(threadIdx.x_4, 16)*49)) + (floordiv(floormod(threadIdx.x_4, 16), 4)*14)) + (ax2.inner*7)) + (floormod(threadIdx.x_4, 4)*2)) + ax3.inner)] = max(((float32*)inverse[((ax2.inner*2) + ax3.inner)] + (float32*)placeholder_6[floormod(((blockIdx.x_2*8) + floordiv(threadIdx.x_4, 16)), 512)]), 0f32)
            }
          }
        }
      }
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
