Script started on 2021-07-25 15:41:20+0900
(base) ]0;woongkyu@watson: ~/hago-profilewoongkyu@watson:~/hago-profile$ conda activate tvm--[Kbuild
(tvm-build) ]0;woongkyu@watson: ~/hago-profilewoongkyu@watson:~/hago-profile$ python3 autotvm_learning_based.py -int8[K[K[K[Kp int9[K8
[15:41:34] src/io/iter_image_recordio_2.cc:178: ImageRecordIOParser2: /home/woongkyu/imagenet/val.rec, use 4 threads for decoding..
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [64], []),
             placeholder: Buffer(placeholder_4: handle, float32, [64], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 4) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + broadcast((float32*)placeholder_5[0], 16))
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op sqrt
primfn(placeholder_1: handle, T_sqrt_1: handle) -> ()
  attr = {"global_symbol": "fused_sqrt", "tir.noalias": True}
  buffers = {T_sqrt: Buffer(T_sqrt_2: handle, float32, [64], []),
             placeholder: Buffer(placeholder_2: handle, float32, [64], [])}
  buffer_map = {placeholder_1: placeholder, T_sqrt_1: T_sqrt} {
  for (ax0.outer: int32, 0, 4) {
    T_sqrt_2[ramp((ax0.outer*16), 1, 16)] = @tir.sqrt((float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)], dtype=float32x16)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op divide
primfn(placeholder_2: handle, placeholder_3: handle, T_divide_1: handle) -> ()
  attr = {"global_symbol": "fused_divide", "tir.noalias": True}
  buffers = {T_divide: Buffer(T_divide_2: handle, float32, [64], []),
             placeholder: Buffer(placeholder_4: handle, float32, [], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_divide_1: T_divide} {
  for (ax0.outer: int32, 0, 4) {
    T_divide_2[ramp((ax0.outer*16), 1, 16)] = (broadcast((float32*)placeholder_4[0], 16) / (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [64], []),
             placeholder: Buffer(placeholder_4: handle, float32, [64], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.outer: int32, 0, 4) {
    T_multiply_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)]*(float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [64, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [64], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 64) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op negative
primfn(placeholder_1: handle, T_negative_1: handle) -> ()
  attr = {"global_symbol": "fused_negative", "tir.noalias": True}
  buffers = {T_negative: Buffer(T_negative_2: handle, float32, [64], []),
             placeholder: Buffer(placeholder_2: handle, float32, [64], [])}
  buffer_map = {placeholder_1: placeholder, T_negative_1: T_negative} {
  for (ax0.outer: int32, 0, 4) {
    T_negative_2[ramp((ax0.outer*16), 1, 16)] = (broadcast(0f32, 16) - (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_1", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [64], []),
             placeholder: Buffer(placeholder_4: handle, float32, [64], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 4) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_1", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [256, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [256], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 256) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_2", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [256], []),
             placeholder: Buffer(placeholder_4: handle, float32, [256], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 16) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + broadcast((float32*)placeholder_5[0], 16))
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op sqrt
primfn(placeholder_1: handle, T_sqrt_1: handle) -> ()
  attr = {"global_symbol": "fused_sqrt_1", "tir.noalias": True}
  buffers = {T_sqrt: Buffer(T_sqrt_2: handle, float32, [256], []),
             placeholder: Buffer(placeholder_2: handle, float32, [256], [])}
  buffer_map = {placeholder_1: placeholder, T_sqrt_1: T_sqrt} {
  for (ax0.outer: int32, 0, 16) {
    T_sqrt_2[ramp((ax0.outer*16), 1, 16)] = @tir.sqrt((float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)], dtype=float32x16)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op divide
primfn(placeholder_2: handle, placeholder_3: handle, T_divide_1: handle) -> ()
  attr = {"global_symbol": "fused_divide_1", "tir.noalias": True}
  buffers = {T_divide: Buffer(T_divide_2: handle, float32, [256], []),
             placeholder: Buffer(placeholder_4: handle, float32, [], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_divide_1: T_divide} {
  for (ax0.outer: int32, 0, 16) {
    T_divide_2[ramp((ax0.outer*16), 1, 16)] = (broadcast((float32*)placeholder_4[0], 16) / (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_1", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [256], []),
             placeholder: Buffer(placeholder_4: handle, float32, [256], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.outer: int32, 0, 16) {
    T_multiply_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)]*(float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op negative
primfn(placeholder_1: handle, T_negative_1: handle) -> ()
  attr = {"global_symbol": "fused_negative_1", "tir.noalias": True}
  buffers = {T_negative: Buffer(T_negative_2: handle, float32, [256], []),
             placeholder: Buffer(placeholder_2: handle, float32, [256], [])}
  buffer_map = {placeholder_1: placeholder, T_negative_1: T_negative} {
  for (ax0.outer: int32, 0, 16) {
    T_negative_2[ramp((ax0.outer*16), 1, 16)] = (broadcast(0f32, 16) - (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_3", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [256], []),
             placeholder: Buffer(placeholder_4: handle, float32, [256], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 16) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_2", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [128, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [128], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 128) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_4", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [128], []),
             placeholder: Buffer(placeholder_4: handle, float32, [128], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 8) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + broadcast((float32*)placeholder_5[0], 16))
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op sqrt
primfn(placeholder_1: handle, T_sqrt_1: handle) -> ()
  attr = {"global_symbol": "fused_sqrt_2", "tir.noalias": True}
  buffers = {T_sqrt: Buffer(T_sqrt_2: handle, float32, [128], []),
             placeholder: Buffer(placeholder_2: handle, float32, [128], [])}
  buffer_map = {placeholder_1: placeholder, T_sqrt_1: T_sqrt} {
  for (ax0.outer: int32, 0, 8) {
    T_sqrt_2[ramp((ax0.outer*16), 1, 16)] = @tir.sqrt((float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)], dtype=float32x16)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op divide
primfn(placeholder_2: handle, placeholder_3: handle, T_divide_1: handle) -> ()
  attr = {"global_symbol": "fused_divide_2", "tir.noalias": True}
  buffers = {T_divide: Buffer(T_divide_2: handle, float32, [128], []),
             placeholder: Buffer(placeholder_4: handle, float32, [], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_divide_1: T_divide} {
  for (ax0.outer: int32, 0, 8) {
    T_divide_2[ramp((ax0.outer*16), 1, 16)] = (broadcast((float32*)placeholder_4[0], 16) / (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_2", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [128], []),
             placeholder: Buffer(placeholder_4: handle, float32, [128], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.outer: int32, 0, 8) {
    T_multiply_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)]*(float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op negative
primfn(placeholder_1: handle, T_negative_1: handle) -> ()
  attr = {"global_symbol": "fused_negative_2", "tir.noalias": True}
  buffers = {T_negative: Buffer(T_negative_2: handle, float32, [128], []),
             placeholder: Buffer(placeholder_2: handle, float32, [128], [])}
  buffer_map = {placeholder_1: placeholder, T_negative_1: T_negative} {
  for (ax0.outer: int32, 0, 8) {
    T_negative_2[ramp((ax0.outer*16), 1, 16)] = (broadcast(0f32, 16) - (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_5", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [128], []),
             placeholder: Buffer(placeholder_4: handle, float32, [128], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 8) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_3", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [512, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [512], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 512) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_6", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [512], []),
             placeholder: Buffer(placeholder_4: handle, float32, [512], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 32) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + broadcast((float32*)placeholder_5[0], 16))
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op sqrt
primfn(placeholder_1: handle, T_sqrt_1: handle) -> ()
  attr = {"global_symbol": "fused_sqrt_3", "tir.noalias": True}
  buffers = {T_sqrt: Buffer(T_sqrt_2: handle, float32, [512], []),
             placeholder: Buffer(placeholder_2: handle, float32, [512], [])}
  buffer_map = {placeholder_1: placeholder, T_sqrt_1: T_sqrt} {
  for (ax0.outer: int32, 0, 32) {
    T_sqrt_2[ramp((ax0.outer*16), 1, 16)] = @tir.sqrt((float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)], dtype=float32x16)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op divide
primfn(placeholder_2: handle, placeholder_3: handle, T_divide_1: handle) -> ()
  attr = {"global_symbol": "fused_divide_3", "tir.noalias": True}
  buffers = {T_divide: Buffer(T_divide_2: handle, float32, [512], []),
             placeholder: Buffer(placeholder_4: handle, float32, [], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_divide_1: T_divide} {
  for (ax0.outer: int32, 0, 32) {
    T_divide_2[ramp((ax0.outer*16), 1, 16)] = (broadcast((float32*)placeholder_4[0], 16) / (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_3", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [512], []),
             placeholder: Buffer(placeholder_4: handle, float32, [512], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.outer: int32, 0, 32) {
    T_multiply_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)]*(float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op negative
primfn(placeholder_1: handle, T_negative_1: handle) -> ()
  attr = {"global_symbol": "fused_negative_3", "tir.noalias": True}
  buffers = {T_negative: Buffer(T_negative_2: handle, float32, [512], []),
             placeholder: Buffer(placeholder_2: handle, float32, [512], [])}
  buffer_map = {placeholder_1: placeholder, T_negative_1: T_negative} {
  for (ax0.outer: int32, 0, 32) {
    T_negative_2[ramp((ax0.outer*16), 1, 16)] = (broadcast(0f32, 16) - (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_7", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [512], []),
             placeholder: Buffer(placeholder_4: handle, float32, [512], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 32) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_4", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [1024, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [1024], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 1024) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_8", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [1024], []),
             placeholder: Buffer(placeholder_4: handle, float32, [1024], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 64) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + broadcast((float32*)placeholder_5[0], 16))
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op sqrt
primfn(placeholder_1: handle, T_sqrt_1: handle) -> ()
  attr = {"global_symbol": "fused_sqrt_4", "tir.noalias": True}
  buffers = {T_sqrt: Buffer(T_sqrt_2: handle, float32, [1024], []),
             placeholder: Buffer(placeholder_2: handle, float32, [1024], [])}
  buffer_map = {placeholder_1: placeholder, T_sqrt_1: T_sqrt} {
  for (ax0.outer: int32, 0, 64) {
    T_sqrt_2[ramp((ax0.outer*16), 1, 16)] = @tir.sqrt((float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)], dtype=float32x16)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op divide
primfn(placeholder_2: handle, placeholder_3: handle, T_divide_1: handle) -> ()
  attr = {"global_symbol": "fused_divide_4", "tir.noalias": True}
  buffers = {T_divide: Buffer(T_divide_2: handle, float32, [1024], []),
             placeholder: Buffer(placeholder_4: handle, float32, [], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1024], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_divide_1: T_divide} {
  for (ax0.outer: int32, 0, 64) {
    T_divide_2[ramp((ax0.outer*16), 1, 16)] = (broadcast((float32*)placeholder_4[0], 16) / (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_4", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [1024], []),
             placeholder: Buffer(placeholder_4: handle, float32, [1024], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1024], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.outer: int32, 0, 64) {
    T_multiply_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)]*(float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op negative
primfn(placeholder_1: handle, T_negative_1: handle) -> ()
  attr = {"global_symbol": "fused_negative_4", "tir.noalias": True}
  buffers = {T_negative: Buffer(T_negative_2: handle, float32, [1024], []),
             placeholder: Buffer(placeholder_2: handle, float32, [1024], [])}
  buffer_map = {placeholder_1: placeholder, T_negative_1: T_negative} {
  for (ax0.outer: int32, 0, 64) {
    T_negative_2[ramp((ax0.outer*16), 1, 16)] = (broadcast(0f32, 16) - (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_9", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [1024], []),
             placeholder: Buffer(placeholder_4: handle, float32, [1024], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1024], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 64) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_5", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [2048, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [2048], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 2048) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_10", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [2048], []),
             placeholder: Buffer(placeholder_4: handle, float32, [2048], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 128) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + broadcast((float32*)placeholder_5[0], 16))
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op sqrt
primfn(placeholder_1: handle, T_sqrt_1: handle) -> ()
  attr = {"global_symbol": "fused_sqrt_5", "tir.noalias": True}
  buffers = {T_sqrt: Buffer(T_sqrt_2: handle, float32, [2048], []),
             placeholder: Buffer(placeholder_2: handle, float32, [2048], [])}
  buffer_map = {placeholder_1: placeholder, T_sqrt_1: T_sqrt} {
  for (ax0.outer: int32, 0, 128) {
    T_sqrt_2[ramp((ax0.outer*16), 1, 16)] = @tir.sqrt((float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)], dtype=float32x16)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op divide
primfn(placeholder_2: handle, placeholder_3: handle, T_divide_1: handle) -> ()
  attr = {"global_symbol": "fused_divide_5", "tir.noalias": True}
  buffers = {T_divide: Buffer(T_divide_2: handle, float32, [2048], []),
             placeholder: Buffer(placeholder_4: handle, float32, [], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [2048], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_divide_1: T_divide} {
  for (ax0.outer: int32, 0, 128) {
    T_divide_2[ramp((ax0.outer*16), 1, 16)] = (broadcast((float32*)placeholder_4[0], 16) / (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_5", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [2048], []),
             placeholder: Buffer(placeholder_4: handle, float32, [2048], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [2048], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.outer: int32, 0, 128) {
    T_multiply_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)]*(float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op negative
primfn(placeholder_1: handle, T_negative_1: handle) -> ()
  attr = {"global_symbol": "fused_negative_5", "tir.noalias": True}
  buffers = {T_negative: Buffer(T_negative_2: handle, float32, [2048], []),
             placeholder: Buffer(placeholder_2: handle, float32, [2048], [])}
  buffer_map = {placeholder_1: placeholder, T_negative_1: T_negative} {
  for (ax0.outer: int32, 0, 128) {
    T_negative_2[ramp((ax0.outer*16), 1, 16)] = (broadcast(0f32, 16) - (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_11", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [2048], []),
             placeholder: Buffer(placeholder_4: handle, float32, [2048], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [2048], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  for (ax0.outer: int32, 0, 128) {
    T_add_2[ramp((ax0.outer*16), 1, 16)] = ((float32x16*)placeholder_4[ramp((ax0.outer*16), 1, 16)] + (float32x16*)placeholder_5[ramp((ax0.outer*16), 1, 16)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op squeeze
primfn(placeholder_1: handle, T_squeeze_1: handle) -> ()
  attr = {"global_symbol": "fused_squeeze", "tir.noalias": True}
  buffers = {T_squeeze: Buffer(T_squeeze_2: handle, float32, [64], []),
             placeholder: Buffer(placeholder_2: handle, float32, [64, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, T_squeeze_1: T_squeeze} {
  for (ax0.outer: int32, 0, 4) {
    T_squeeze_2[ramp((ax0.outer*16), 1, 16)] = (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_6", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [64, 1, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [64], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 64) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_6", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [64, 3, 7, 7], []),
             placeholder: Buffer(placeholder_4: handle, float32, [64, 3, 7, 7], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 192) "parallel" {
    for (ax2: int32, 0, 7) {
      T_multiply_2[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] = ((float32x7*)placeholder_4[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)]*broadcast((float32*)placeholder_5[floordiv(ax0.ax1.fused, 3)], 7))
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_7", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [64, 64, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [64, 64, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 4096) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 64)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_8", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [64, 1, 1], []),
             T_multiply: Buffer(T_multiply_2: handle, float32, [64, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 64) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[ax0.ax1.fused])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_9", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [64, 64, 3, 3], []),
             T_multiply: Buffer(T_multiply_2: handle, float32, [64, 64, 3, 3], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 4096) "parallel" {
    for (ax2: int32, 0, 3) {
      T_multiply_2[ramp(((ax0.ax1.fused*9) + (ax2*3)), 1, 3)] = ((float32x3*)placeholder_4[ramp(((ax0.ax1.fused*9) + (ax2*3)), 1, 3)]*broadcast((float32*)placeholder_5[floordiv(ax0.ax1.fused, 64)], 3))
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op squeeze
primfn(placeholder_1: handle, T_squeeze_1: handle) -> ()
  attr = {"global_symbol": "fused_squeeze_1", "tir.noalias": True}
  buffers = {T_squeeze: Buffer(T_squeeze_2: handle, float32, [256], []),
             placeholder: Buffer(placeholder_2: handle, float32, [256, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, T_squeeze_1: T_squeeze} {
  for (ax0.outer: int32, 0, 16) {
    T_squeeze_2[ramp((ax0.outer*16), 1, 16)] = (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_7", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [256, 1, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [256], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 256) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_10", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [256, 64, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [256, 64, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 16384) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 64)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_11", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [256, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [256, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 256) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[ax0.ax1.fused])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_12", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [64, 256, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [64, 256, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 16384) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 256)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op squeeze
primfn(placeholder_1: handle, T_squeeze_1: handle) -> ()
  attr = {"global_symbol": "fused_squeeze_2", "tir.noalias": True}
  buffers = {T_squeeze: Buffer(T_squeeze_2: handle, float32, [128], []),
             placeholder: Buffer(placeholder_2: handle, float32, [128, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, T_squeeze_1: T_squeeze} {
  for (ax0.outer: int32, 0, 8) {
    T_squeeze_2[ramp((ax0.outer*16), 1, 16)] = (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_8", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [128, 1, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [128], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 128) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_13", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [128, 256, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [128, 256, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 32768) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 256)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_14", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [128, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [128, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 128) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[ax0.ax1.fused])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_15", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [128, 128, 3, 3], []),
             placeholder: Buffer(placeholder_4: handle, float32, [128, 128, 3, 3], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 16384) "parallel" {
    for (ax2: int32, 0, 3) {
      T_multiply_2[ramp(((ax0.ax1.fused*9) + (ax2*3)), 1, 3)] = ((float32x3*)placeholder_4[ramp(((ax0.ax1.fused*9) + (ax2*3)), 1, 3)]*broadcast((float32*)placeholder_5[floordiv(ax0.ax1.fused, 128)], 3))
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op squeeze
primfn(placeholder_1: handle, T_squeeze_1: handle) -> ()
  attr = {"global_symbol": "fused_squeeze_3", "tir.noalias": True}
  buffers = {T_squeeze: Buffer(T_squeeze_2: handle, float32, [512], []),
             placeholder: Buffer(placeholder_2: handle, float32, [512, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, T_squeeze_1: T_squeeze} {
  for (ax0.outer: int32, 0, 32) {
    T_squeeze_2[ramp((ax0.outer*16), 1, 16)] = (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_9", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [512, 1, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [512], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 512) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_16", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [512, 128, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [512, 128, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 65536) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 128)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_17", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [512, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [512, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 512) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[ax0.ax1.fused])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_18", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [512, 256, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [512, 256, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 131072) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 256)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_19", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [128, 512, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [128, 512, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 65536) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 512)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_20", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [256, 512, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [256, 512, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 131072) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 512)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_21", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [256, 256, 3, 3], []),
             placeholder: Buffer(placeholder_4: handle, float32, [256, 256, 3, 3], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 65536) "parallel" {
    for (ax2: int32, 0, 3) {
      T_multiply_2[ramp(((ax0.ax1.fused*9) + (ax2*3)), 1, 3)] = ((float32x3*)placeholder_4[ramp(((ax0.ax1.fused*9) + (ax2*3)), 1, 3)]*broadcast((float32*)placeholder_5[floordiv(ax0.ax1.fused, 256)], 3))
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op squeeze
primfn(placeholder_1: handle, T_squeeze_1: handle) -> ()
  attr = {"global_symbol": "fused_squeeze_4", "tir.noalias": True}
  buffers = {T_squeeze: Buffer(T_squeeze_2: handle, float32, [1024], []),
             placeholder: Buffer(placeholder_2: handle, float32, [1024, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, T_squeeze_1: T_squeeze} {
  for (ax0.outer: int32, 0, 64) {
    T_squeeze_2[ramp((ax0.outer*16), 1, 16)] = (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_10", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [1024, 1, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [1024], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 1024) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_22", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [1024, 256, 1, 1], []),
             T_multiply: Buffer(T_multiply_2: handle, float32, [1024, 256, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1024, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 262144) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 256)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_23", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [1024, 1, 1], []),
             T_multiply: Buffer(T_multiply_2: handle, float32, [1024, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1024, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 1024) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[ax0.ax1.fused])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_24", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [1024, 512, 1, 1], []),
             T_multiply: Buffer(T_multiply_2: handle, float32, [1024, 512, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1024, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 524288) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 512)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_25", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [256, 1024, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [256, 1024, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 262144) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 1024)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_26", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [512, 1024, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [512, 1024, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 524288) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 1024)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_27", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [512, 512, 3, 3], []),
             placeholder: Buffer(placeholder_4: handle, float32, [512, 512, 3, 3], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 262144) "parallel" {
    for (ax2: int32, 0, 3) {
      T_multiply_2[ramp(((ax0.ax1.fused*9) + (ax2*3)), 1, 3)] = ((float32x3*)placeholder_4[ramp(((ax0.ax1.fused*9) + (ax2*3)), 1, 3)]*broadcast((float32*)placeholder_5[floordiv(ax0.ax1.fused, 512)], 3))
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op squeeze
primfn(placeholder_1: handle, T_squeeze_1: handle) -> ()
  attr = {"global_symbol": "fused_squeeze_5", "tir.noalias": True}
  buffers = {T_squeeze: Buffer(T_squeeze_2: handle, float32, [2048], []),
             placeholder: Buffer(placeholder_2: handle, float32, [2048, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, T_squeeze_1: T_squeeze} {
  for (ax0.outer: int32, 0, 128) {
    T_squeeze_2[ramp((ax0.outer*16), 1, 16)] = (float32x16*)placeholder_2[ramp((ax0.outer*16), 1, 16)]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op expand_dims
primfn(placeholder_1: handle, T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "fused_expand_dims_11", "tir.noalias": True}
  buffers = {T_expand_dims: Buffer(T_expand_dims_2: handle, float32, [2048, 1, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [2048], [])}
  buffer_map = {placeholder_1: placeholder, T_expand_dims_1: T_expand_dims} {
  for (ax0.ax1.fused: int32, 0, 2048) "parallel" {
    T_expand_dims_2[ax0.ax1.fused] = (float32*)placeholder_2[ax0.ax1.fused]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_28", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [2048, 512, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [2048, 512, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [2048, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 1048576) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 512)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_29", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [2048, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [2048, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [2048, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 2048) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[ax0.ax1.fused])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_30", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [2048, 1024, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [2048, 1024, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [2048, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 2097152) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 1024)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cpu for op multiply
primfn(placeholder_2: handle, placeholder_3: handle, T_multiply_1: handle) -> ()
  attr = {"global_symbol": "fused_multiply_31", "tir.noalias": True}
  buffers = {T_multiply: Buffer(T_multiply_2: handle, float32, [512, 2048, 1, 1], []),
             placeholder: Buffer(placeholder_4: handle, float32, [512, 2048, 1, 1], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 1, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_multiply_1: T_multiply} {
  for (ax0.ax1.fused: int32, 0, 1048576) "parallel" {
    T_multiply_2[ax0.ax1.fused] = ((float32*)placeholder_4[ax0.ax1.fused]*(float32*)placeholder_5[floordiv(ax0.ax1.fused, 2048)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
DEBUG:root:original
DEBUG:root:v0.0.4
fn (%data: Tensor[(32, 3, 224, 224), float32]) -> Tensor[(32, 1000), float32] {
  %0 = nn.conv2d(%data, meta[relay.Constant][0] /* ty=Tensor[(64, 3, 7, 7), float32] */ /* ty=Tensor[(64, 3, 7, 7), float32] */, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(32, 64, 112, 112), float32] */;
  %1 = add(%0, meta[relay.Constant][1] /* ty=Tensor[(64, 1, 1), float32] */ /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(32, 64, 112, 112), float32] */;
  %2 = nn.relu(%1) /* ty=Tensor[(32, 64, 112, 112), float32] */;
  %3 = nn.max_pool2d(%2, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %4 = nn.conv2d(%3, meta[relay.Constant][2] /* ty=Tensor[(64, 64, 1, 1), float32] */ /* ty=Tensor[(64, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %5 = add(%4, meta[relay.Constant][3] /* ty=Tensor[(64, 1, 1), float32] */ /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %6 = add(%5, meta[relay.Constant][4] /* ty=Tensor[(64, 1, 1), float32] */ /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %7 = nn.relu(%6) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %8 = nn.conv2d(%7, meta[relay.Constant][5] /* ty=Tensor[(64, 64, 3, 3), float32] */ /* ty=Tensor[(64, 64, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %9 = add(%8, meta[relay.Constant][6] /* ty=Tensor[(64, 1, 1), float32] */ /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %10 = nn.relu(%9) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %11 = nn.conv2d(%10, meta[relay.Constant][7] /* ty=Tensor[(256, 64, 1, 1), float32] */ /* ty=Tensor[(256, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %12 = add(%11, meta[relay.Constant][8] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %13 = add(%12, meta[relay.Constant][9] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %14 = nn.conv2d(%3, meta[relay.Constant][10] /* ty=Tensor[(256, 64, 1, 1), float32] */ /* ty=Tensor[(256, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %15 = add(%14, meta[relay.Constant][11] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %16 = add(%13, %15) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %17 = nn.relu(%16) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %18 = nn.conv2d(%17, meta[relay.Constant][12] /* ty=Tensor[(64, 256, 1, 1), float32] */ /* ty=Tensor[(64, 256, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %19 = add(%18, meta[relay.Constant][13] /* ty=Tensor[(64, 1, 1), float32] */ /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %20 = add(%19, meta[relay.Constant][14] /* ty=Tensor[(64, 1, 1), float32] */ /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %21 = nn.relu(%20) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %22 = nn.conv2d(%21, meta[relay.Constant][15] /* ty=Tensor[(64, 64, 3, 3), float32] */ /* ty=Tensor[(64, 64, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %23 = add(%22, meta[relay.Constant][16] /* ty=Tensor[(64, 1, 1), float32] */ /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %24 = nn.relu(%23) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %25 = nn.conv2d(%24, meta[relay.Constant][17] /* ty=Tensor[(256, 64, 1, 1), float32] */ /* ty=Tensor[(256, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %26 = add(%25, meta[relay.Constant][18] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %27 = add(%26, meta[relay.Constant][19] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %28 = add(%27, %17) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %29 = nn.relu(%28) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %30 = nn.conv2d(%29, meta[relay.Constant][20] /* ty=Tensor[(64, 256, 1, 1), float32] */ /* ty=Tensor[(64, 256, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %31 = add(%30, meta[relay.Constant][21] /* ty=Tensor[(64, 1, 1), float32] */ /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %32 = add(%31, meta[relay.Constant][22] /* ty=Tensor[(64, 1, 1), float32] */ /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %33 = nn.relu(%32) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %34 = nn.conv2d(%33, meta[relay.Constant][23] /* ty=Tensor[(64, 64, 3, 3), float32] */ /* ty=Tensor[(64, 64, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %35 = add(%34, meta[relay.Constant][24] /* ty=Tensor[(64, 1, 1), float32] */ /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %36 = nn.relu(%35) /* ty=Tensor[(32, 64, 56, 56), float32] */;
  %37 = nn.conv2d(%36, meta[relay.Constant][25] /* ty=Tensor[(256, 64, 1, 1), float32] */ /* ty=Tensor[(256, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %38 = add(%37, meta[relay.Constant][26] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %39 = add(%38, meta[relay.Constant][27] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %40 = add(%39, %29) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %41 = nn.relu(%40) /* ty=Tensor[(32, 256, 56, 56), float32] */;
  %42 = nn.conv2d(%41, meta[relay.Constant][28] /* ty=Tensor[(128, 256, 1, 1), float32] */ /* ty=Tensor[(128, 256, 1, 1), float32] */, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %43 = add(%42, meta[relay.Constant][29] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %44 = add(%43, meta[relay.Constant][30] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %45 = nn.relu(%44) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %46 = nn.conv2d(%45, meta[relay.Constant][31] /* ty=Tensor[(128, 128, 3, 3), float32] */ /* ty=Tensor[(128, 128, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %47 = add(%46, meta[relay.Constant][32] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %48 = nn.relu(%47) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %49 = nn.conv2d(%48, meta[relay.Constant][33] /* ty=Tensor[(512, 128, 1, 1), float32] */ /* ty=Tensor[(512, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %50 = add(%49, meta[relay.Constant][34] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %51 = add(%50, meta[relay.Constant][35] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %52 = nn.conv2d(%41, meta[relay.Constant][36] /* ty=Tensor[(512, 256, 1, 1), float32] */ /* ty=Tensor[(512, 256, 1, 1), float32] */, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %53 = add(%52, meta[relay.Constant][37] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %54 = add(%51, %53) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %55 = nn.relu(%54) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %56 = nn.conv2d(%55, meta[relay.Constant][38] /* ty=Tensor[(128, 512, 1, 1), float32] */ /* ty=Tensor[(128, 512, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %57 = add(%56, meta[relay.Constant][39] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %58 = add(%57, meta[relay.Constant][40] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %59 = nn.relu(%58) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %60 = nn.conv2d(%59, meta[relay.Constant][41] /* ty=Tensor[(128, 128, 3, 3), float32] */ /* ty=Tensor[(128, 128, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %61 = add(%60, meta[relay.Constant][42] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %62 = nn.relu(%61) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %63 = nn.conv2d(%62, meta[relay.Constant][43] /* ty=Tensor[(512, 128, 1, 1), float32] */ /* ty=Tensor[(512, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %64 = add(%63, meta[relay.Constant][44] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %65 = add(%64, meta[relay.Constant][45] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %66 = add(%65, %55) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %67 = nn.relu(%66) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %68 = nn.conv2d(%67, meta[relay.Constant][46] /* ty=Tensor[(128, 512, 1, 1), float32] */ /* ty=Tensor[(128, 512, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %69 = add(%68, meta[relay.Constant][47] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %70 = add(%69, meta[relay.Constant][48] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %71 = nn.relu(%70) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %72 = nn.conv2d(%71, meta[relay.Constant][49] /* ty=Tensor[(128, 128, 3, 3), float32] */ /* ty=Tensor[(128, 128, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %73 = add(%72, meta[relay.Constant][50] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %74 = nn.relu(%73) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %75 = nn.conv2d(%74, meta[relay.Constant][51] /* ty=Tensor[(512, 128, 1, 1), float32] */ /* ty=Tensor[(512, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %76 = add(%75, meta[relay.Constant][52] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %77 = add(%76, meta[relay.Constant][53] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %78 = add(%77, %67) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %79 = nn.relu(%78) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %80 = nn.conv2d(%79, meta[relay.Constant][54] /* ty=Tensor[(128, 512, 1, 1), float32] */ /* ty=Tensor[(128, 512, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %81 = add(%80, meta[relay.Constant][55] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %82 = add(%81, meta[relay.Constant][56] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %83 = nn.relu(%82) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %84 = nn.conv2d(%83, meta[relay.Constant][57] /* ty=Tensor[(128, 128, 3, 3), float32] */ /* ty=Tensor[(128, 128, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %85 = add(%84, meta[relay.Constant][58] /* ty=Tensor[(128, 1, 1), float32] */ /* ty=Tensor[(128, 1, 1), float32] */) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %86 = nn.relu(%85) /* ty=Tensor[(32, 128, 28, 28), float32] */;
  %87 = nn.conv2d(%86, meta[relay.Constant][59] /* ty=Tensor[(512, 128, 1, 1), float32] */ /* ty=Tensor[(512, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %88 = add(%87, meta[relay.Constant][60] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %89 = add(%88, meta[relay.Constant][61] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %90 = add(%89, %79) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %91 = nn.relu(%90) /* ty=Tensor[(32, 512, 28, 28), float32] */;
  %92 = nn.conv2d(%91, meta[relay.Constant][62] /* ty=Tensor[(256, 512, 1, 1), float32] */ /* ty=Tensor[(256, 512, 1, 1), float32] */, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %93 = add(%92, meta[relay.Constant][63] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %94 = add(%93, meta[relay.Constant][64] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %95 = nn.relu(%94) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %96 = nn.conv2d(%95, meta[relay.Constant][65] /* ty=Tensor[(256, 256, 3, 3), float32] */ /* ty=Tensor[(256, 256, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %97 = add(%96, meta[relay.Constant][66] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %98 = nn.relu(%97) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %99 = nn.conv2d(%98, meta[relay.Constant][67] /* ty=Tensor[(1024, 256, 1, 1), float32] */ /* ty=Tensor[(1024, 256, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %100 = add(%99, meta[relay.Constant][68] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %101 = add(%100, meta[relay.Constant][69] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %102 = nn.conv2d(%91, meta[relay.Constant][70] /* ty=Tensor[(1024, 512, 1, 1), float32] */ /* ty=Tensor[(1024, 512, 1, 1), float32] */, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %103 = add(%102, meta[relay.Constant][71] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %104 = add(%101, %103) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %105 = nn.relu(%104) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %106 = nn.conv2d(%105, meta[relay.Constant][72] /* ty=Tensor[(256, 1024, 1, 1), float32] */ /* ty=Tensor[(256, 1024, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %107 = add(%106, meta[relay.Constant][73] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %108 = add(%107, meta[relay.Constant][74] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %109 = nn.relu(%108) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %110 = nn.conv2d(%109, meta[relay.Constant][75] /* ty=Tensor[(256, 256, 3, 3), float32] */ /* ty=Tensor[(256, 256, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %111 = add(%110, meta[relay.Constant][76] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %112 = nn.relu(%111) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %113 = nn.conv2d(%112, meta[relay.Constant][77] /* ty=Tensor[(1024, 256, 1, 1), float32] */ /* ty=Tensor[(1024, 256, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %114 = add(%113, meta[relay.Constant][78] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %115 = add(%114, meta[relay.Constant][79] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %116 = add(%115, %105) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %117 = nn.relu(%116) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %118 = nn.conv2d(%117, meta[relay.Constant][80] /* ty=Tensor[(256, 1024, 1, 1), float32] */ /* ty=Tensor[(256, 1024, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %119 = add(%118, meta[relay.Constant][81] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %120 = add(%119, meta[relay.Constant][82] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %121 = nn.relu(%120) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %122 = nn.conv2d(%121, meta[relay.Constant][83] /* ty=Tensor[(256, 256, 3, 3), float32] */ /* ty=Tensor[(256, 256, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %123 = add(%122, meta[relay.Constant][84] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %124 = nn.relu(%123) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %125 = nn.conv2d(%124, meta[relay.Constant][85] /* ty=Tensor[(1024, 256, 1, 1), float32] */ /* ty=Tensor[(1024, 256, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %126 = add(%125, meta[relay.Constant][86] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %127 = add(%126, meta[relay.Constant][87] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %128 = add(%127, %117) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %129 = nn.relu(%128) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %130 = nn.conv2d(%129, meta[relay.Constant][88] /* ty=Tensor[(256, 1024, 1, 1), float32] */ /* ty=Tensor[(256, 1024, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %131 = add(%130, meta[relay.Constant][89] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %132 = add(%131, meta[relay.Constant][90] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %133 = nn.relu(%132) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %134 = nn.conv2d(%133, meta[relay.Constant][91] /* ty=Tensor[(256, 256, 3, 3), float32] */ /* ty=Tensor[(256, 256, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %135 = add(%134, meta[relay.Constant][92] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %136 = nn.relu(%135) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %137 = nn.conv2d(%136, meta[relay.Constant][93] /* ty=Tensor[(1024, 256, 1, 1), float32] */ /* ty=Tensor[(1024, 256, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %138 = add(%137, meta[relay.Constant][94] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %139 = add(%138, meta[relay.Constant][95] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %140 = add(%139, %129) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %141 = nn.relu(%140) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %142 = nn.conv2d(%141, meta[relay.Constant][96] /* ty=Tensor[(256, 1024, 1, 1), float32] */ /* ty=Tensor[(256, 1024, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %143 = add(%142, meta[relay.Constant][97] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %144 = add(%143, meta[relay.Constant][98] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %145 = nn.relu(%144) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %146 = nn.conv2d(%145, meta[relay.Constant][99] /* ty=Tensor[(256, 256, 3, 3), float32] */ /* ty=Tensor[(256, 256, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %147 = add(%146, meta[relay.Constant][100] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %148 = nn.relu(%147) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %149 = nn.conv2d(%148, meta[relay.Constant][101] /* ty=Tensor[(1024, 256, 1, 1), float32] */ /* ty=Tensor[(1024, 256, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %150 = add(%149, meta[relay.Constant][102] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %151 = add(%150, meta[relay.Constant][103] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %152 = add(%151, %141) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %153 = nn.relu(%152) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %154 = nn.conv2d(%153, meta[relay.Constant][104] /* ty=Tensor[(256, 1024, 1, 1), float32] */ /* ty=Tensor[(256, 1024, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %155 = add(%154, meta[relay.Constant][105] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %156 = add(%155, meta[relay.Constant][106] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %157 = nn.relu(%156) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %158 = nn.conv2d(%157, meta[relay.Constant][107] /* ty=Tensor[(256, 256, 3, 3), float32] */ /* ty=Tensor[(256, 256, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %159 = add(%158, meta[relay.Constant][108] /* ty=Tensor[(256, 1, 1), float32] */ /* ty=Tensor[(256, 1, 1), float32] */) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %160 = nn.relu(%159) /* ty=Tensor[(32, 256, 14, 14), float32] */;
  %161 = nn.conv2d(%160, meta[relay.Constant][109] /* ty=Tensor[(1024, 256, 1, 1), float32] */ /* ty=Tensor[(1024, 256, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %162 = add(%161, meta[relay.Constant][110] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %163 = add(%162, meta[relay.Constant][111] /* ty=Tensor[(1024, 1, 1), float32] */ /* ty=Tensor[(1024, 1, 1), float32] */) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %164 = add(%163, %153) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %165 = nn.relu(%164) /* ty=Tensor[(32, 1024, 14, 14), float32] */;
  %166 = nn.conv2d(%165, meta[relay.Constant][112] /* ty=Tensor[(512, 1024, 1, 1), float32] */ /* ty=Tensor[(512, 1024, 1, 1), float32] */, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %167 = add(%166, meta[relay.Constant][113] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %168 = add(%167, meta[relay.Constant][114] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %169 = nn.relu(%168) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %170 = nn.conv2d(%169, meta[relay.Constant][115] /* ty=Tensor[(512, 512, 3, 3), float32] */ /* ty=Tensor[(512, 512, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %171 = add(%170, meta[relay.Constant][116] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %172 = nn.relu(%171) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %173 = nn.conv2d(%172, meta[relay.Constant][117] /* ty=Tensor[(2048, 512, 1, 1), float32] */ /* ty=Tensor[(2048, 512, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %174 = add(%173, meta[relay.Constant][118] /* ty=Tensor[(2048, 1, 1), float32] */ /* ty=Tensor[(2048, 1, 1), float32] */) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %175 = add(%174, meta[relay.Constant][119] /* ty=Tensor[(2048, 1, 1), float32] */ /* ty=Tensor[(2048, 1, 1), float32] */) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %176 = nn.conv2d(%165, meta[relay.Constant][120] /* ty=Tensor[(2048, 1024, 1, 1), float32] */ /* ty=Tensor[(2048, 1024, 1, 1), float32] */, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %177 = add(%176, meta[relay.Constant][121] /* ty=Tensor[(2048, 1, 1), float32] */ /* ty=Tensor[(2048, 1, 1), float32] */) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %178 = add(%175, %177) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %179 = nn.relu(%178) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %180 = nn.conv2d(%179, meta[relay.Constant][122] /* ty=Tensor[(512, 2048, 1, 1), float32] */ /* ty=Tensor[(512, 2048, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %181 = add(%180, meta[relay.Constant][123] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %182 = add(%181, meta[relay.Constant][124] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %183 = nn.relu(%182) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %184 = nn.conv2d(%183, meta[relay.Constant][125] /* ty=Tensor[(512, 512, 3, 3), float32] */ /* ty=Tensor[(512, 512, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %185 = add(%184, meta[relay.Constant][126] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %186 = nn.relu(%185) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %187 = nn.conv2d(%186, meta[relay.Constant][127] /* ty=Tensor[(2048, 512, 1, 1), float32] */ /* ty=Tensor[(2048, 512, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %188 = add(%187, meta[relay.Constant][128] /* ty=Tensor[(2048, 1, 1), float32] */ /* ty=Tensor[(2048, 1, 1), float32] */) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %189 = add(%188, meta[relay.Constant][129] /* ty=Tensor[(2048, 1, 1), float32] */ /* ty=Tensor[(2048, 1, 1), float32] */) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %190 = add(%189, %179) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %191 = nn.relu(%190) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %192 = nn.conv2d(%191, meta[relay.Constant][130] /* ty=Tensor[(512, 2048, 1, 1), float32] */ /* ty=Tensor[(512, 2048, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %193 = add(%192, meta[relay.Constant][131] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %194 = add(%193, meta[relay.Constant][132] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %195 = nn.relu(%194) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %196 = nn.conv2d(%195, meta[relay.Constant][133] /* ty=Tensor[(512, 512, 3, 3), float32] */ /* ty=Tensor[(512, 512, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %197 = add(%196, meta[relay.Constant][134] /* ty=Tensor[(512, 1, 1), float32] */ /* ty=Tensor[(512, 1, 1), float32] */) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %198 = nn.relu(%197) /* ty=Tensor[(32, 512, 7, 7), float32] */;
  %199 = nn.conv2d(%198, meta[relay.Constant][135] /* ty=Tensor[(2048, 512, 1, 1), float32] */ /* ty=Tensor[(2048, 512, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %200 = add(%199, meta[relay.Constant][136] /* ty=Tensor[(2048, 1, 1), float32] */ /* ty=Tensor[(2048, 1, 1), float32] */) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %201 = add(%200, meta[relay.Constant][137] /* ty=Tensor[(2048, 1, 1), float32] */ /* ty=Tensor[(2048, 1, 1), float32] */) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %202 = add(%201, %191) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %203 = nn.relu(%202) /* ty=Tensor[(32, 2048, 7, 7), float32] */;
  %204 = nn.global_avg_pool2d(%203) /* ty=Tensor[(32, 2048, 1, 1), float32] */;
  %205 = nn.batch_flatten(%204) /* ty=Tensor[(32, 2048), float32] */;
  %206 = nn.dense(%205, meta[relay.Constant][138] /* ty=Tensor[(1000, 2048), float32] */ /* ty=Tensor[(1000, 2048), float32] */, units=1000) /* ty=Tensor[(32, 1000), float32] */;
  add(%206, meta[relay.Constant][139] /* ty=Tensor[(1000), float32] */ /* ty=Tensor[(1000), float32] */) /* ty=Tensor[(32, 1000), float32] */
}
// meta data omitted. you can use show_meta_data=True to include meta data
DEBUG:root:current quantize config
DEBUG:root:<tvm.hago.base.QConfig object at 0x7fc3e0eb3cd0>
data
constant
nn.conv2d
constant
add
nn.relu
nn.max_pool2d
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
constant
nn.conv2d
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
constant
nn.conv2d
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
constant
nn.conv2d
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
constant
nn.conv2d
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
nn.global_avg_pool2d
nn.batch_flatten
constant
nn.dense
constant
add
data -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.max_pool2d
nn.max_pool2d -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
nn.max_pool2d -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
add -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
add -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
add -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
add -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.global_avg_pool2d
nn.global_avg_pool2d -> nn.batch_flatten
nn.batch_flatten -> nn.dense
constant -> nn.dense
nn.dense -> add
constant -> add
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.max_pool2d
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.global_avg_pool2d
[]
[OpDesc[in_dtypes=float32, out_dtypes=float32]]
nn.batch_flatten
[]
[OpDesc[in_dtypes=float32, out_dtypes=float32]]
nn.dense
[]
[OpDesc[in_dtypes=float32, out_dtypes=float32]]
add
[]
[OpDesc[in_dtypes=float32, out_dtypes=float32]]
analyzed condition
node_conds: [False, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, False, False, False, False, False]
edge_conds: [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False]
bit limit
[8, 8, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 8, 8, 32, 32, 32, 8, 8, 32, 32, 32, 32, 32, 32, 32]
--------
nn.conv2d[%2]: [32]
  data[%0] -> nn.conv2d[%2] : 8
  constant[%1] -> nn.conv2d[%2] : 8
--------
add[%4]: [32]
  nn.conv2d[%2] -> add[%4] : 32
  constant[%3] -> add[%4] : 32
--------
nn.relu[%5]: [32]
  add[%4] -> nn.relu[%5] : 32
--------
nn.max_pool2d[%6]: [8, 8]
  nn.relu[%5] -> nn.max_pool2d[%6] : 32
--------
nn.conv2d[%8]: [32]
  nn.max_pool2d[%6] -> nn.conv2d[%8] : 8
  constant[%7] -> nn.conv2d[%8] : 8
--------
add[%10]: [32]
  nn.conv2d[%8] -> add[%10] : 32
  constant[%9] -> add[%10] : 32
--------
add[%12]: [32]
  add[%10] -> add[%12] : 32
  constant[%11] -> add[%12] : 32
--------
nn.relu[%13]: [8]
  add[%12] -> nn.relu[%13] : 32
--------
nn.conv2d[%15]: [32]
  nn.relu[%13] -> nn.conv2d[%15] : 8
  constant[%14] -> nn.conv2d[%15] : 8
--------
add[%17]: [32]
  nn.conv2d[%15] -> add[%17] : 32
  constant[%16] -> add[%17] : 32
--------
nn.relu[%18]: [8]
  add[%17] -> nn.relu[%18] : 32
--------
nn.conv2d[%20]: [32]
  nn.relu[%18] -> nn.conv2d[%20] : 8
  constant[%19] -> nn.conv2d[%20] : 8
--------
add[%22]: [32]
  nn.conv2d[%20] -> add[%22] : 32
  constant[%21] -> add[%22] : 32
--------
add[%24]: [32]
  add[%22] -> add[%24] : 32
  constant[%23] -> add[%24] : 32
--------
nn.conv2d[%26]: [32]
  nn.max_pool2d[%6] -> nn.conv2d[%26] : 8
  constant[%25] -> nn.conv2d[%26] : 8
--------
add[%28]: [32]
  nn.conv2d[%26] -> add[%28] : 32
  constant[%27] -> add[%28] : 32
--------
add[%29]: [32]
  add[%24] -> add[%29] : 32
  add[%28] -> add[%29] : 32
--------
nn.relu[%30]: [8, 32]
  add[%29] -> nn.relu[%30] : 32
--------
nn.conv2d[%32]: [32]
  nn.relu[%30] -> nn.conv2d[%32] : 8
  constant[%31] -> nn.conv2d[%32] : 8
--------
add[%34]: [32]
  nn.conv2d[%32] -> add[%34] : 32
  constant[%33] -> add[%34] : 32
--------
add[%36]: [32]
  add[%34] -> add[%36] : 32
  constant[%35] -> add[%36] : 32
--------
nn.relu[%37]: [8]
  add[%36] -> nn.relu[%37] : 32
--------
nn.conv2d[%39]: [32]
  nn.relu[%37] -> nn.conv2d[%39] : 8
  constant[%38] -> nn.conv2d[%39] : 8
--------
add[%41]: [32]
  nn.conv2d[%39] -> add[%41] : 32
  constant[%40] -> add[%41] : 32
--------
nn.relu[%42]: [8]
  add[%41] -> nn.relu[%42] : 32
--------
nn.conv2d[%44]: [32]
  nn.relu[%42] -> nn.conv2d[%44] : 8
  constant[%43] -> nn.conv2d[%44] : 8
--------
add[%46]: [32]
  nn.conv2d[%44] -> add[%46] : 32
  constant[%45] -> add[%46] : 32
--------
add[%48]: [32]
  add[%46] -> add[%48] : 32
  constant[%47] -> add[%48] : 32
--------
add[%49]: [32]
  add[%48] -> add[%49] : 32
  nn.relu[%30] -> add[%49] : 32
--------
nn.relu[%50]: [8, 32]
  add[%49] -> nn.relu[%50] : 32
--------
nn.conv2d[%52]: [32]
  nn.relu[%50] -> nn.conv2d[%52] : 8
  constant[%51] -> nn.conv2d[%52] : 8
--------
add[%54]: [32]
  nn.conv2d[%52] -> add[%54] : 32
  constant[%53] -> add[%54] : 32
--------
add[%56]: [32]
  add[%54] -> add[%56] : 32
  constant[%55] -> add[%56] : 32
--------
nn.relu[%57]: [8]
  add[%56] -> nn.relu[%57] : 32
--------
nn.conv2d[%59]: [32]
  nn.relu[%57] -> nn.conv2d[%59] : 8
  constant[%58] -> nn.conv2d[%59] : 8
--------
add[%61]: [32]
  nn.conv2d[%59] -> add[%61] : 32
  constant[%60] -> add[%61] : 32
--------
nn.relu[%62]: [8]
  add[%61] -> nn.relu[%62] : 32
--------
nn.conv2d[%64]: [32]
  nn.relu[%62] -> nn.conv2d[%64] : 8
  constant[%63] -> nn.conv2d[%64] : 8
--------
add[%66]: [32]
  nn.conv2d[%64] -> add[%66] : 32
  constant[%65] -> add[%66] : 32
--------
add[%68]: [32]
  add[%66] -> add[%68] : 32
  constant[%67] -> add[%68] : 32
--------
add[%69]: [32]
  add[%68] -> add[%69] : 32
  nn.relu[%50] -> add[%69] : 32
--------
nn.relu[%70]: [8, 8]
  add[%69] -> nn.relu[%70] : 32
--------
nn.conv2d[%72]: [32]
  nn.relu[%70] -> nn.conv2d[%72] : 8
  constant[%71] -> nn.conv2d[%72] : 8
--------
add[%74]: [32]
  nn.conv2d[%72] -> add[%74] : 32
  constant[%73] -> add[%74] : 32
--------
add[%76]: [32]
  add[%74] -> add[%76] : 32
  constant[%75] -> add[%76] : 32
--------
nn.relu[%77]: [8]
  add[%76] -> nn.relu[%77] : 32
--------
nn.conv2d[%79]: [32]
  nn.relu[%77] -> nn.conv2d[%79] : 8
  constant[%78] -> nn.conv2d[%79] : 8
--------
add[%81]: [32]
  nn.conv2d[%79] -> add[%81] : 32
  constant[%80] -> add[%81] : 32
--------
nn.relu[%82]: [8]
  add[%81] -> nn.relu[%82] : 32
--------
nn.conv2d[%84]: [32]
  nn.relu[%82] -> nn.conv2d[%84] : 8
  constant[%83] -> nn.conv2d[%84] : 8
--------
add[%86]: [32]
  nn.conv2d[%84] -> add[%86] : 32
  constant[%85] -> add[%86] : 32
--------
add[%88]: [32]
  add[%86] -> add[%88] : 32
  constant[%87] -> add[%88] : 32
--------
nn.conv2d[%90]: [32]
  nn.relu[%70] -> nn.conv2d[%90] : 8
  constant[%89] -> nn.conv2d[%90] : 8
--------
add[%92]: [32]
  nn.conv2d[%90] -> add[%92] : 32
  constant[%91] -> add[%92] : 32
--------
add[%93]: [32]
  add[%88] -> add[%93] : 32
  add[%92] -> add[%93] : 32
--------
nn.relu[%94]: [8, 32]
  add[%93] -> nn.relu[%94] : 32
--------
nn.conv2d[%96]: [32]
  nn.relu[%94] -> nn.conv2d[%96] : 8
  constant[%95] -> nn.conv2d[%96] : 8
--------
add[%98]: [32]
  nn.conv2d[%96] -> add[%98] : 32
  constant[%97] -> add[%98] : 32
--------
add[%100]: [32]
  add[%98] -> add[%100] : 32
  constant[%99] -> add[%100] : 32
--------
nn.relu[%101]: [8]
  add[%100] -> nn.relu[%101] : 32
--------
nn.conv2d[%103]: [32]
  nn.relu[%101] -> nn.conv2d[%103] : 8
  constant[%102] -> nn.conv2d[%103] : 8
--------
add[%105]: [32]
  nn.conv2d[%103] -> add[%105] : 32
  constant[%104] -> add[%105] : 32
--------
nn.relu[%106]: [8]
  add[%105] -> nn.relu[%106] : 32
--------
nn.conv2d[%108]: [32]
  nn.relu[%106] -> nn.conv2d[%108] : 8
  constant[%107] -> nn.conv2d[%108] : 8
--------
add[%110]: [32]
  nn.conv2d[%108] -> add[%110] : 32
  constant[%109] -> add[%110] : 32
--------
add[%112]: [32]
  add[%110] -> add[%112] : 32
  constant[%111] -> add[%112] : 32
--------
add[%113]: [32]
  add[%112] -> add[%113] : 32
  nn.relu[%94] -> add[%113] : 32
--------
nn.relu[%114]: [8, 32]
  add[%113] -> nn.relu[%114] : 32
--------
nn.conv2d[%116]: [32]
  nn.relu[%114] -> nn.conv2d[%116] : 8
  constant[%115] -> nn.conv2d[%116] : 8
--------
add[%118]: [32]
  nn.conv2d[%116] -> add[%118] : 32
  constant[%117] -> add[%118] : 32
--------
add[%120]: [32]
  add[%118] -> add[%120] : 32
  constant[%119] -> add[%120] : 32
--------
nn.relu[%121]: [8]
  add[%120] -> nn.relu[%121] : 32
--------
nn.conv2d[%123]: [32]
  nn.relu[%121] -> nn.conv2d[%123] : 8
  constant[%122] -> nn.conv2d[%123] : 8
--------
add[%125]: [32]
  nn.conv2d[%123] -> add[%125] : 32
  constant[%124] -> add[%125] : 32
--------
nn.relu[%126]: [8]
  add[%125] -> nn.relu[%126] : 32
--------
nn.conv2d[%128]: [32]
  nn.relu[%126] -> nn.conv2d[%128] : 8
  constant[%127] -> nn.conv2d[%128] : 8
--------
add[%130]: [32]
  nn.conv2d[%128] -> add[%130] : 32
  constant[%129] -> add[%130] : 32
--------
add[%132]: [32]
  add[%130] -> add[%132] : 32
  constant[%131] -> add[%132] : 32
--------
add[%133]: [32]
  add[%132] -> add[%133] : 32
  nn.relu[%114] -> add[%133] : 32
--------
nn.relu[%134]: [8, 32]
  add[%133] -> nn.relu[%134] : 32
--------
nn.conv2d[%136]: [32]
  nn.relu[%134] -> nn.conv2d[%136] : 8
  constant[%135] -> nn.conv2d[%136] : 8
--------
add[%138]: [32]
  nn.conv2d[%136] -> add[%138] : 32
  constant[%137] -> add[%138] : 32
--------
add[%140]: [32]
  add[%138] -> add[%140] : 32
  constant[%139] -> add[%140] : 32
--------
nn.relu[%141]: [8]
  add[%140] -> nn.relu[%141] : 32
--------
nn.conv2d[%143]: [32]
  nn.relu[%141] -> nn.conv2d[%143] : 8
  constant[%142] -> nn.conv2d[%143] : 8
--------
add[%145]: [32]
  nn.conv2d[%143] -> add[%145] : 32
  constant[%144] -> add[%145] : 32
--------
nn.relu[%146]: [8]
  add[%145] -> nn.relu[%146] : 32
--------
nn.conv2d[%148]: [32]
  nn.relu[%146] -> nn.conv2d[%148] : 8
  constant[%147] -> nn.conv2d[%148] : 8
--------
add[%150]: [32]
  nn.conv2d[%148] -> add[%150] : 32
  constant[%149] -> add[%150] : 32
--------
add[%152]: [32]
  add[%150] -> add[%152] : 32
  constant[%151] -> add[%152] : 32
--------
add[%153]: [32]
  add[%152] -> add[%153] : 32
  nn.relu[%134] -> add[%153] : 32
--------
nn.relu[%154]: [8, 8]
  add[%153] -> nn.relu[%154] : 32
--------
nn.conv2d[%156]: [32]
  nn.relu[%154] -> nn.conv2d[%156] : 8
  constant[%155] -> nn.conv2d[%156] : 8
--------
add[%158]: [32]
  nn.conv2d[%156] -> add[%158] : 32
  constant[%157] -> add[%158] : 32
--------
add[%160]: [32]
  add[%158] -> add[%160] : 32
  constant[%159] -> add[%160] : 32
--------
nn.relu[%161]: [8]
  add[%160] -> nn.relu[%161] : 32
--------
nn.conv2d[%163]: [32]
  nn.relu[%161] -> nn.conv2d[%163] : 8
  constant[%162] -> nn.conv2d[%163] : 8
--------
add[%165]: [32]
  nn.conv2d[%163] -> add[%165] : 32
  constant[%164] -> add[%165] : 32
--------
nn.relu[%166]: [8]
  add[%165] -> nn.relu[%166] : 32
--------
nn.conv2d[%168]: [32]
  nn.relu[%166] -> nn.conv2d[%168] : 8
  constant[%167] -> nn.conv2d[%168] : 8
--------
add[%170]: [32]
  nn.conv2d[%168] -> add[%170] : 32
  constant[%169] -> add[%170] : 32
--------
add[%172]: [32]
  add[%170] -> add[%172] : 32
  constant[%171] -> add[%172] : 32
--------
nn.conv2d[%174]: [32]
  nn.relu[%154] -> nn.conv2d[%174] : 8
  constant[%173] -> nn.conv2d[%174] : 8
--------
add[%176]: [32]
  nn.conv2d[%174] -> add[%176] : 32
  constant[%175] -> add[%176] : 32
--------
add[%177]: [32]
  add[%172] -> add[%177] : 32
  add[%176] -> add[%177] : 32
--------
nn.relu[%178]: [8, 32]
  add[%177] -> nn.relu[%178] : 32
--------
nn.conv2d[%180]: [32]
  nn.relu[%178] -> nn.conv2d[%180] : 8
  constant[%179] -> nn.conv2d[%180] : 8
--------
add[%182]: [32]
  nn.conv2d[%180] -> add[%182] : 32
  constant[%181] -> add[%182] : 32
--------
add[%184]: [32]
  add[%182] -> add[%184] : 32
  constant[%183] -> add[%184] : 32
--------
nn.relu[%185]: [8]
  add[%184] -> nn.relu[%185] : 32
--------
nn.conv2d[%187]: [32]
  nn.relu[%185] -> nn.conv2d[%187] : 8
  constant[%186] -> nn.conv2d[%187] : 8
--------
add[%189]: [32]
  nn.conv2d[%187] -> add[%189] : 32
  constant[%188] -> add[%189] : 32
--------
nn.relu[%190]: [8]
  add[%189] -> nn.relu[%190] : 32
--------
nn.conv2d[%192]: [32]
  nn.relu[%190] -> nn.conv2d[%192] : 8
  constant[%191] -> nn.conv2d[%192] : 8
--------
add[%194]: [32]
  nn.conv2d[%192] -> add[%194] : 32
  constant[%193] -> add[%194] : 32
--------
add[%196]: [32]
  add[%194] -> add[%196] : 32
  constant[%195] -> add[%196] : 32
--------
add[%197]: [32]
  add[%196] -> add[%197] : 32
  nn.relu[%178] -> add[%197] : 32
--------
nn.relu[%198]: [8, 32]
  add[%197] -> nn.relu[%198] : 32
--------
nn.conv2d[%200]: [32]
  nn.relu[%198] -> nn.conv2d[%200] : 8
  constant[%199] -> nn.conv2d[%200] : 8
--------
add[%202]: [32]
  nn.conv2d[%200] -> add[%202] : 32
  constant[%201] -> add[%202] : 32
--------
add[%204]: [32]
  add[%202] -> add[%204] : 32
  constant[%203] -> add[%204] : 32
--------
nn.relu[%205]: [8]
  add[%204] -> nn.relu[%205] : 32
--------
nn.conv2d[%207]: [32]
  nn.relu[%205] -> nn.conv2d[%207] : 8
  constant[%206] -> nn.conv2d[%207] : 8
--------
add[%209]: [32]
  nn.conv2d[%207] -> add[%209] : 32
  constant[%208] -> add[%209] : 32
--------
nn.relu[%210]: [8]
  add[%209] -> nn.relu[%210] : 32
--------
nn.conv2d[%212]: [32]
  nn.relu[%210] -> nn.conv2d[%212] : 8
  constant[%211] -> nn.conv2d[%212] : 8
--------
add[%214]: [32]
  nn.conv2d[%212] -> add[%214] : 32
  constant[%213] -> add[%214] : 32
--------
add[%216]: [32]
  add[%214] -> add[%216] : 32
  constant[%215] -> add[%216] : 32
--------
add[%217]: [32]
  add[%216] -> add[%217] : 32
  nn.relu[%198] -> add[%217] : 32
--------
nn.relu[%218]: [8, 32]
  add[%217] -> nn.relu[%218] : 32
--------
nn.conv2d[%220]: [32]
  nn.relu[%218] -> nn.conv2d[%220] : 8
  constant[%219] -> nn.conv2d[%220] : 8
--------
add[%222]: [32]
  nn.conv2d[%220] -> add[%222] : 32
  constant[%221] -> add[%222] : 32
--------
add[%224]: [32]
  add[%222] -> add[%224] : 32
  constant[%223] -> add[%224] : 32
--------
nn.relu[%225]: [8]
  add[%224] -> nn.relu[%225] : 32
--------
nn.conv2d[%227]: [32]
  nn.relu[%225] -> nn.conv2d[%227] : 8
  constant[%226] -> nn.conv2d[%227] : 8
--------
add[%229]: [32]
  nn.conv2d[%227] -> add[%229] : 32
  constant[%228] -> add[%229] : 32
--------
nn.relu[%230]: [8]
  add[%229] -> nn.relu[%230] : 32
--------
nn.conv2d[%232]: [32]
  nn.relu[%230] -> nn.conv2d[%232] : 8
  constant[%231] -> nn.conv2d[%232] : 8
--------
add[%234]: [32]
  nn.conv2d[%232] -> add[%234] : 32
  constant[%233] -> add[%234] : 32
--------
add[%236]: [32]
  add[%234] -> add[%236] : 32
  constant[%235] -> add[%236] : 32
--------
add[%237]: [32]
  add[%236] -> add[%237] : 32
  nn.relu[%218] -> add[%237] : 32
--------
nn.relu[%238]: [8, 32]
  add[%237] -> nn.relu[%238] : 32
--------
nn.conv2d[%240]: [32]
  nn.relu[%238] -> nn.conv2d[%240] : 8
  constant[%239] -> nn.conv2d[%240] : 8
--------
add[%242]: [32]
  nn.conv2d[%240] -> add[%242] : 32
  constant[%241] -> add[%242] : 32
--------
add[%244]: [32]
  add[%242] -> add[%244] : 32
  constant[%243] -> add[%244] : 32
--------
nn.relu[%245]: [8]
  add[%244] -> nn.relu[%245] : 32
--------
nn.conv2d[%247]: [32]
  nn.relu[%245] -> nn.conv2d[%247] : 8
  constant[%246] -> nn.conv2d[%247] : 8
--------
add[%249]: [32]
  nn.conv2d[%247] -> add[%249] : 32
  constant[%248] -> add[%249] : 32
--------
nn.relu[%250]: [8]
  add[%249] -> nn.relu[%250] : 32
--------
nn.conv2d[%252]: [32]
  nn.relu[%250] -> nn.conv2d[%252] : 8
  constant[%251] -> nn.conv2d[%252] : 8
--------
add[%254]: [32]
  nn.conv2d[%252] -> add[%254] : 32
  constant[%253] -> add[%254] : 32
--------
add[%256]: [32]
  add[%254] -> add[%256] : 32
  constant[%255] -> add[%256] : 32
--------
add[%257]: [32]
  add[%256] -> add[%257] : 32
  nn.relu[%238] -> add[%257] : 32
--------
nn.relu[%258]: [8, 32]
  add[%257] -> nn.relu[%258] : 32
--------
nn.conv2d[%260]: [32]
  nn.relu[%258] -> nn.conv2d[%260] : 8
  constant[%259] -> nn.conv2d[%260] : 8
--------
add[%262]: [32]
  nn.conv2d[%260] -> add[%262] : 32
  constant[%261] -> add[%262] : 32
--------
add[%264]: [32]
  add[%262] -> add[%264] : 32
  constant[%263] -> add[%264] : 32
--------
nn.relu[%265]: [8]
  add[%264] -> nn.relu[%265] : 32
--------
nn.conv2d[%267]: [32]
  nn.relu[%265] -> nn.conv2d[%267] : 8
  constant[%266] -> nn.conv2d[%267] : 8
--------
add[%269]: [32]
  nn.conv2d[%267] -> add[%269] : 32
  constant[%268] -> add[%269] : 32
--------
nn.relu[%270]: [8]
  add[%269] -> nn.relu[%270] : 32
--------
nn.conv2d[%272]: [32]
  nn.relu[%270] -> nn.conv2d[%272] : 8
  constant[%271] -> nn.conv2d[%272] : 8
--------
add[%274]: [32]
  nn.conv2d[%272] -> add[%274] : 32
  constant[%273] -> add[%274] : 32
--------
add[%276]: [32]
  add[%274] -> add[%276] : 32
  constant[%275] -> add[%276] : 32
--------
add[%277]: [32]
  add[%276] -> add[%277] : 32
  nn.relu[%258] -> add[%277] : 32
--------
nn.relu[%278]: [8, 8]
  add[%277] -> nn.relu[%278] : 32
--------
nn.conv2d[%280]: [32]
  nn.relu[%278] -> nn.conv2d[%280] : 8
  constant[%279] -> nn.conv2d[%280] : 8
--------
add[%282]: [32]
  nn.conv2d[%280] -> add[%282] : 32
  constant[%281] -> add[%282] : 32
--------
add[%284]: [32]
  add[%282] -> add[%284] : 32
  constant[%283] -> add[%284] : 32
--------
nn.relu[%285]: [8]
  add[%284] -> nn.relu[%285] : 32
--------
nn.conv2d[%287]: [32]
  nn.relu[%285] -> nn.conv2d[%287] : 8
  constant[%286] -> nn.conv2d[%287] : 8
--------
add[%289]: [32]
  nn.conv2d[%287] -> add[%289] : 32
  constant[%288] -> add[%289] : 32
--------
nn.relu[%290]: [8]
  add[%289] -> nn.relu[%290] : 32
--------
nn.conv2d[%292]: [32]
  nn.relu[%290] -> nn.conv2d[%292] : 8
  constant[%291] -> nn.conv2d[%292] : 8
--------
add[%294]: [32]
  nn.conv2d[%292] -> add[%294] : 32
  constant[%293] -> add[%294] : 32
--------
add[%296]: [32]
  add[%294] -> add[%296] : 32
  constant[%295] -> add[%296] : 32
--------
nn.conv2d[%298]: [32]
  nn.relu[%278] -> nn.conv2d[%298] : 8
  constant[%297] -> nn.conv2d[%298] : 8
--------
add[%300]: [32]
  nn.conv2d[%298] -> add[%300] : 32
  constant[%299] -> add[%300] : 32
--------
add[%301]: [32]
  add[%296] -> add[%301] : 32
  add[%300] -> add[%301] : 32
--------
nn.relu[%302]: [8, 32]
  add[%301] -> nn.relu[%302] : 32
--------
nn.conv2d[%304]: [32]
  nn.relu[%302] -> nn.conv2d[%304] : 8
  constant[%303] -> nn.conv2d[%304] : 8
--------
add[%306]: [32]
  nn.conv2d[%304] -> add[%306] : 32
  constant[%305] -> add[%306] : 32
--------
add[%308]: [32]
  add[%306] -> add[%308] : 32
  constant[%307] -> add[%308] : 32
--------
nn.relu[%309]: [8]
  add[%308] -> nn.relu[%309] : 32
--------
nn.conv2d[%311]: [32]
  nn.relu[%309] -> nn.conv2d[%311] : 8
  constant[%310] -> nn.conv2d[%311] : 8
--------
add[%313]: [32]
  nn.conv2d[%311] -> add[%313] : 32
  constant[%312] -> add[%313] : 32
--------
nn.relu[%314]: [8]
  add[%313] -> nn.relu[%314] : 32
--------
nn.conv2d[%316]: [32]
  nn.relu[%314] -> nn.conv2d[%316] : 8
  constant[%315] -> nn.conv2d[%316] : 8
--------
add[%318]: [32]
  nn.conv2d[%316] -> add[%318] : 32
  constant[%317] -> add[%318] : 32
--------
add[%320]: [32]
  add[%318] -> add[%320] : 32
  constant[%319] -> add[%320] : 32
--------
add[%321]: [32]
  add[%320] -> add[%321] : 32
  nn.relu[%302] -> add[%321] : 32
--------
nn.relu[%322]: [8, 32]
  add[%321] -> nn.relu[%322] : 32
--------
nn.conv2d[%324]: [32]
  nn.relu[%322] -> nn.conv2d[%324] : 8
  constant[%323] -> nn.conv2d[%324] : 8
--------
add[%326]: [32]
  nn.conv2d[%324] -> add[%326] : 32
  constant[%325] -> add[%326] : 32
--------
add[%328]: [32]
  add[%326] -> add[%328] : 32
  constant[%327] -> add[%328] : 32
--------
nn.relu[%329]: [8]
  add[%328] -> nn.relu[%329] : 32
--------
nn.conv2d[%331]: [32]
  nn.relu[%329] -> nn.conv2d[%331] : 8
  constant[%330] -> nn.conv2d[%331] : 8
--------
add[%333]: [32]
  nn.conv2d[%331] -> add[%333] : 32
  constant[%332] -> add[%333] : 32
--------
nn.relu[%334]: [8]
  add[%333] -> nn.relu[%334] : 32
--------
nn.conv2d[%336]: [32]
  nn.relu[%334] -> nn.conv2d[%336] : 8
  constant[%335] -> nn.conv2d[%336] : 8
--------
add[%338]: [32]
  nn.conv2d[%336] -> add[%338] : 32
  constant[%337] -> add[%338] : 32
--------
add[%340]: [32]
  add[%338] -> add[%340] : 32
  constant[%339] -> add[%340] : 32
--------
add[%341]: [32]
  add[%340] -> add[%341] : 32
  nn.relu[%322] -> add[%341] : 32
--------
nn.relu[%342]: [None]
  add[%341] -> nn.relu[%342] : 32
--------
nn.global_avg_pool2d[%343]: [None]
  nn.relu[%342] -> nn.global_avg_pool2d[%343] : None
--------
nn.batch_flatten[%344]: [None]
  nn.global_avg_pool2d[%343] -> nn.batch_flatten[%344] : None
--------
nn.dense[%346]: [None]
  nn.batch_flatten[%344] -> nn.dense[%346] : None
  constant[%345] -> nn.dense[%346] : None
--------
add[%348]: []
  nn.dense[%346] -> add[%348] : None
  constant[%347] -> add[%348] : None
ops in graph:
{'nn.dense', 'nn.conv2d', 'add', 'nn.max_pool2d', 'nn.global_avg_pool2d', 'nn.relu', 'nn.batch_flatten'}
DEBUG:autotvm:Finish loading 688 records
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('dense_tensorcore.cuda', ('TENSOR', (32, 2048), 'float32'), ('TENSOR', (1000, 2048), 'float32'), None, 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation dense_tensorcore.cuda for op nn.dense
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_dense_add", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 1000], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [1000], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 2048], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [1000, 2048], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [T_dense.wmma.accumulator: handle] "storage_scope" = "wmma.accumulator";
  allocate(T_dense.wmma.accumulator, float32, [256]);
  attr [compute.shared: handle] "storage_scope" = "shared";
  allocate(compute.shared, float16, [512]);
  attr [compute.shared_1: handle] "storage_scope" = "shared";
  allocate(compute.shared_1, float16, [128]);
  attr [compute.shared.wmma.matrix_a: handle] "storage_scope" = "wmma.matrix_a";
  allocate(compute.shared.wmma.matrix_a, float16, [512]);
  attr [compute.shared.wmma.matrix_b: handle] "storage_scope" = "wmma.matrix_b";
  allocate(compute.shared.wmma.matrix_b, float16, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 125 {
    @tir.tvm_fill_fragment(T_dense.wmma.accumulator, 32, 8, 16, 0, 0f32, dtype=handle)
    for (k.outer.outer: int32, 0, 128) {
      for (ax0.ax1.fused.outer.outer.outer.outer: int32, 0, 16) {
        attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
        attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        compute.shared[((ax0.ax1.fused.outer.outer.outer.outer*32) + threadIdx.x)] = cast(float16, (float32*)placeholder_7[((((ax0.ax1.fused.outer.outer.outer.outer*4096) + (floordiv(threadIdx.x, 16)*2048)) + (k.outer.outer*16)) + floormod(threadIdx.x, 16))])
      }
      for (ax0.ax1.fused.outer.outer.outer.outer_1: int32, 0, 4) {
        attr [IterVar(threadIdx.z, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
        attr [IterVar(threadIdx.y, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        compute.shared_1[((ax0.ax1.fused.outer.outer.outer.outer_1*32) + threadIdx.x)] = cast(float16, (float32*)placeholder_8[(((((blockIdx.y*16384) + (ax0.ax1.fused.outer.outer.outer.outer_1*4096)) + (floordiv(threadIdx.x, 16)*2048)) + (k.outer.outer*16)) + floormod(threadIdx.x, 16))])
      }
      @tir.tvm_load_matrix_sync(compute.shared.wmma.matrix_a, 32, 8, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), compute.shared, 0, 512, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(compute.shared.wmma.matrix_b, 32, 8, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), compute.shared_1, 0, 128, 1, dtype=handle), 16, "col_major", dtype=handle)
      @tir.tvm_mma_sync(T_dense.wmma.accumulator, 0, compute.shared.wmma.matrix_a, 0, compute.shared.wmma.matrix_b, 0, T_dense.wmma.accumulator, 0, dtype=handle)
    }
    @tir.tvm_store_matrix_sync(T_dense.wmma.accumulator, 32, 8, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), compute.shared, 0, 256, 2, dtype=handle), 8, "row_major", dtype=handle)
    for (ax0.inner.ax1.inner.fused.outer.outer.outer.outer: int32, 0, 8) {
      attr [IterVar(threadIdx.z, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
      attr [IterVar(threadIdx.y, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      T_add_2[((((ax0.inner.ax1.inner.fused.outer.outer.outer.outer*4000) + (floordiv(threadIdx.x, 8)*1000)) + (blockIdx.y*8)) + floormod(threadIdx.x, 8))] = ((float32*)compute.shared[((ax0.inner.ax1.inner.fused.outer.outer.outer.outer*32) + threadIdx.x)] + (float32*)placeholder_6[((blockIdx.y*8) + floormod(threadIdx.x, 8))])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.batch_flatten
primfn(placeholder_1: handle, tensor_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_batch_flatten", "tir.noalias": True}
  buffers = {tensor: Buffer(tensor_2: handle, float32, [32, 2048], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 2048, 1, 1], [])}
  buffer_map = {placeholder_1: placeholder, tensor_1: tensor} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 64;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  tensor_2[((blockIdx.x*1024) + threadIdx.x)] = (float32*)placeholder_2[((blockIdx.x*1024) + threadIdx.x)]
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation adaptive_pool.cuda for op nn.global_avg_pool2d
primfn(placeholder_1: handle, tensor_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_global_avg_pool2d", "tir.noalias": True}
  buffers = {tensor: Buffer(tensor_2: handle, float32, [32, 2048, 1, 1], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 2048, 7, 7], [])}
  buffer_map = {placeholder_1: placeholder, tensor_1: tensor} {
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
  attr [tensor_3: handle] "storage_scope" = "local";
  allocate(tensor_3, float32, [1]);
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.y: int32, [0:8], "ThreadIndex", "threadIdx.y")] "thread_extent" = 8;
  attr [IterVar(threadIdx.x: int32, [0:8], "ThreadIndex", "threadIdx.x")] "thread_extent" = 8 {
    tensor_3[0] = 0f32
    for (rv0: int32, 0, 7) {
      for (rv1: int32, 0, 7) {
        tensor_3[0] = ((float32*)tensor_3[0] + (float32*)placeholder_2[((((((blockIdx.y*802816) + (threadIdx.y*100352)) + (blockIdx.x*392)) + (threadIdx.x*49)) + (rv0*7)) + rv1)])
      }
    }
    tensor_2[((((blockIdx.y*16384) + (threadIdx.y*2048)) + (blockIdx.x*8)) + threadIdx.x)] = ((float32*)tensor_3[0]*0.0204082f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 512, 7, 7), 'float32'), ('TENSOR', (2048, 512, 1, 1), 'float32'), (1, 1), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, placeholder_8: handle, placeholder_9: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_add_nn_relu", "tir.noalias": True}
  buffers = {placeholder_4: Buffer(placeholder_10: handle, float32, [2048, 1, 1], []),
             placeholder_2: Buffer(placeholder_11: handle, float32, [2048, 1, 1], []),
             placeholder: Buffer(placeholder_12: handle, float32, [32, 2048, 7, 7], []),
             placeholder_1: Buffer(placeholder_13: handle, float32, [2048, 512, 1, 1], []),
             placeholder_3: Buffer(placeholder_14: handle, float32, [32, 512, 7, 7], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 2048, 7, 7], [])}
  buffer_map = {placeholder_9: placeholder, placeholder_6: placeholder_1, placeholder_8: placeholder_2, T_relu_1: T_relu, placeholder_5: placeholder_3, placeholder_7: placeholder_4} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 512;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [196]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    for (yy.init: int32, 0, 7) {
      compute[yy.init] = 0f32
      compute[(yy.init + 7)] = 0f32
      compute[(yy.init + 14)] = 0f32
      compute[(yy.init + 21)] = 0f32
    }
    for (rc.outer: int32, 0, 128) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7;
      if (threadIdx.z_1 < 28) {
        pad_temp.shared[((threadIdx.z_1*7) + threadIdx.x_1)] = (float32*)placeholder_14[((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*7)) + threadIdx.x_1)]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 3) {
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 4)) < 128) {
          if ((((threadIdx.z_2*16) + (threadIdx.x_2*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 512) {
            if (((threadIdx.x_2*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 16) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_13[(((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 4)*512)) + (rc.outer*4)) + floormod(((threadIdx.x_2*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 4))]
            }
          }
        }
      }
      for (rc.inner: int32, 0, 4) {
        for (yy: int32, 0, 7) {
          compute[yy] = ((float32*)compute[yy] + ((float32*)pad_temp.shared[(((rc.inner*49) + (yy*7)) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
          compute[(yy + 7)] = ((float32*)compute[(yy + 7)] + ((float32*)pad_temp.shared[(((rc.inner*49) + (yy*7)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 128)]))
          compute[(yy + 14)] = ((float32*)compute[(yy + 14)] + ((float32*)pad_temp.shared[(((rc.inner*49) + (yy*7)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 256)]))
          compute[(yy + 21)] = ((float32*)compute[(yy + 21)] + ((float32*)pad_temp.shared[(((rc.inner*49) + (yy*7)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 384)]))
        }
      }
    }
    for (ax2.inner.inner.inner: int32, 0, 7) {
      T_relu_2[((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x)] = max(((((float32*)compute[ax2.inner.inner.inner] + (float32*)placeholder_10[((floormod(blockIdx.z, 16)*128) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*128) + threadIdx.z)]) + (float32*)placeholder_12[((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x)]), 0f32)
      T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x) + 1568)] = max(((((float32*)compute[(ax2.inner.inner.inner + 7)] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*128) + threadIdx.z) + 32)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*128) + threadIdx.z) + 32)]) + (float32*)placeholder_12[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x) + 1568)]), 0f32)
      T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x) + 3136)] = max(((((float32*)compute[(ax2.inner.inner.inner + 14)] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*128) + threadIdx.z) + 64)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*128) + threadIdx.z) + 64)]) + (float32*)placeholder_12[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x) + 3136)]), 0f32)
      T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x) + 4704)] = max(((((float32*)compute[(ax2.inner.inner.inner + 21)] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*128) + threadIdx.z) + 96)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*128) + threadIdx.z) + 96)]) + (float32*)placeholder_12[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (ax2.inner.inner.inner*7)) + threadIdx.x) + 4704)]), 0f32)
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 512, 7, 7), 'float32'), ('TENSOR', (512, 512, 3, 3), 'float32'), (1, 1), (1, 1, 1, 1), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_nn_relu", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 512, 7, 7], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [512, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 512, 7, 7], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [512, 512, 3, 3], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 512;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [196]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    compute[0] = 0f32
    compute[28] = 0f32
    compute[4] = 0f32
    compute[32] = 0f32
    compute[8] = 0f32
    compute[36] = 0f32
    compute[12] = 0f32
    compute[40] = 0f32
    compute[16] = 0f32
    compute[44] = 0f32
    compute[20] = 0f32
    compute[48] = 0f32
    compute[24] = 0f32
    compute[52] = 0f32
    compute[1] = 0f32
    compute[29] = 0f32
    compute[5] = 0f32
    compute[33] = 0f32
    compute[9] = 0f32
    compute[37] = 0f32
    compute[13] = 0f32
    compute[41] = 0f32
    compute[17] = 0f32
    compute[45] = 0f32
    compute[21] = 0f32
    compute[49] = 0f32
    compute[25] = 0f32
    compute[53] = 0f32
    compute[2] = 0f32
    compute[30] = 0f32
    compute[6] = 0f32
    compute[34] = 0f32
    compute[10] = 0f32
    compute[38] = 0f32
    compute[14] = 0f32
    compute[42] = 0f32
    compute[18] = 0f32
    compute[46] = 0f32
    compute[22] = 0f32
    compute[50] = 0f32
    compute[26] = 0f32
    compute[54] = 0f32
    compute[3] = 0f32
    compute[31] = 0f32
    compute[7] = 0f32
    compute[35] = 0f32
    compute[11] = 0f32
    compute[39] = 0f32
    compute[15] = 0f32
    compute[43] = 0f32
    compute[19] = 0f32
    compute[47] = 0f32
    compute[23] = 0f32
    compute[51] = 0f32
    compute[27] = 0f32
    compute[55] = 0f32
    for (rc.outer: int32, 0, 128) {
      for (ry.outer: int32, 0, 3) {
        for (rx.outer: int32, 0, 3) {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
          attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
            pad_temp.shared[((threadIdx.z_1*49) + (threadIdx.x_1*7))] = @tir.if_then_else((((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)) && (1 <= rx.outer)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 8)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 1)] = @tir.if_then_else(((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 7)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 2)] = @tir.if_then_else(((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 6)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 3)] = @tir.if_then_else(((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 5)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 4)] = @tir.if_then_else(((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 4)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 5)] = @tir.if_then_else(((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 3)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 6)] = @tir.if_then_else((((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)) && (rx.outer < 2)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 2)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
            placeholder.shared[((threadIdx.z_2*32) + (threadIdx.x_2*5))] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 16)*147456) + (threadIdx.z_2*36864)) + (floordiv((threadIdx.x_2*5), 4)*4608)) + (rc.outer*36)) + (floormod((threadIdx.x_2*5), 4)*9)) + (ry.outer*3)) + rx.outer)]
            placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 16)*147456) + (threadIdx.z_2*36864)) + (floordiv(((threadIdx.x_2*5) + 1), 4)*4608)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*5) + 1), 4)*9)) + (ry.outer*3)) + rx.outer)]
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 4)) < 32) {
              if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 126) {
                if (threadIdx.x_2 < 6) {
                  placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 16)*147456) + (threadIdx.z_2*36864)) + (floordiv(((threadIdx.x_2*5) + 2), 4)*4608)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*5) + 2), 4)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 4)) < 32) {
              if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 125) {
                if (threadIdx.x_2 < 6) {
                  placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 16)*147456) + (threadIdx.z_2*36864)) + (floordiv(((threadIdx.x_2*5) + 3), 4)*4608)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*5) + 3), 4)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 4)) < 31) {
              if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 124) {
                if (threadIdx.x_2 < 6) {
                  placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_8[((((((((floormod(blockIdx.z, 16)*147456) + (threadIdx.z_2*36864)) + (floordiv((threadIdx.x_2*5), 4)*4608)) + (rc.outer*36)) + (floormod((threadIdx.x_2*5), 4)*9)) + (ry.outer*3)) + rx.outer) + 4608)]
                }
              }
            }
          }
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
        }
      }
    }
    T_relu_2[(((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x)] = max(((float32*)compute[0] + (float32*)placeholder_6[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 784)] = max(((float32*)compute[28] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 7)] = max(((float32*)compute[4] + (float32*)placeholder_6[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 791)] = max(((float32*)compute[32] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 14)] = max(((float32*)compute[8] + (float32*)placeholder_6[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 798)] = max(((float32*)compute[36] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 21)] = max(((float32*)compute[12] + (float32*)placeholder_6[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 805)] = max(((float32*)compute[40] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 28)] = max(((float32*)compute[16] + (float32*)placeholder_6[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 812)] = max(((float32*)compute[44] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 35)] = max(((float32*)compute[20] + (float32*)placeholder_6[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 819)] = max(((float32*)compute[48] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 42)] = max(((float32*)compute[24] + (float32*)placeholder_6[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 826)] = max(((float32*)compute[52] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 49)] = max(((float32*)compute[1] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 833)] = max(((float32*)compute[29] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 56)] = max(((float32*)compute[5] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 840)] = max(((float32*)compute[33] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 63)] = max(((float32*)compute[9] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 847)] = max(((float32*)compute[37] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 70)] = max(((float32*)compute[13] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 854)] = max(((float32*)compute[41] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 77)] = max(((float32*)compute[17] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 861)] = max(((float32*)compute[45] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 84)] = max(((float32*)compute[21] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 868)] = max(((float32*)compute[49] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 91)] = max(((float32*)compute[25] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 875)] = max(((float32*)compute[53] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 98)] = max(((float32*)compute[2] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 882)] = max(((float32*)compute[30] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 105)] = max(((float32*)compute[6] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 889)] = max(((float32*)compute[34] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 112)] = max(((float32*)compute[10] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 896)] = max(((float32*)compute[38] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 119)] = max(((float32*)compute[14] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 903)] = max(((float32*)compute[42] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 126)] = max(((float32*)compute[18] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 910)] = max(((float32*)compute[46] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 133)] = max(((float32*)compute[22] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 917)] = max(((float32*)compute[50] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 140)] = max(((float32*)compute[26] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 924)] = max(((float32*)compute[54] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 147)] = max(((float32*)compute[3] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 931)] = max(((float32*)compute[31] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 154)] = max(((float32*)compute[7] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 938)] = max(((float32*)compute[35] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 161)] = max(((float32*)compute[11] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 945)] = max(((float32*)compute[39] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 168)] = max(((float32*)compute[15] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 952)] = max(((float32*)compute[43] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 175)] = max(((float32*)compute[19] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 959)] = max(((float32*)compute[47] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 182)] = max(((float32*)compute[23] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 966)] = max(((float32*)compute[51] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 189)] = max(((float32*)compute[27] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 973)] = max(((float32*)compute[55] + (float32*)placeholder_6[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 2048, 7, 7), 'float32'), ('TENSOR', (512, 2048, 1, 1), 'float32'), (1, 1), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu", "tir.noalias": True}
  buffers = {placeholder_3: Buffer(placeholder_8: handle, float32, [512, 2048, 1, 1], []),
             placeholder_2: Buffer(placeholder_9: handle, float32, [32, 2048, 7, 7], []),
             placeholder_1: Buffer(placeholder_10: handle, float32, [512, 1, 1], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 512, 7, 7], []),
             placeholder: Buffer(placeholder_11: handle, float32, [512, 1, 1], [])}
  buffer_map = {T_relu_1: T_relu, placeholder_7: placeholder, placeholder_6: placeholder_1, placeholder_4: placeholder_2, placeholder_5: placeholder_3} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 512;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [196]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    compute[0] = 0f32
    compute[28] = 0f32
    compute[4] = 0f32
    compute[32] = 0f32
    compute[8] = 0f32
    compute[36] = 0f32
    compute[12] = 0f32
    compute[40] = 0f32
    compute[16] = 0f32
    compute[44] = 0f32
    compute[20] = 0f32
    compute[48] = 0f32
    compute[24] = 0f32
    compute[52] = 0f32
    compute[1] = 0f32
    compute[29] = 0f32
    compute[5] = 0f32
    compute[33] = 0f32
    compute[9] = 0f32
    compute[37] = 0f32
    compute[13] = 0f32
    compute[41] = 0f32
    compute[17] = 0f32
    compute[45] = 0f32
    compute[21] = 0f32
    compute[49] = 0f32
    compute[25] = 0f32
    compute[53] = 0f32
    compute[2] = 0f32
    compute[30] = 0f32
    compute[6] = 0f32
    compute[34] = 0f32
    compute[10] = 0f32
    compute[38] = 0f32
    compute[14] = 0f32
    compute[42] = 0f32
    compute[18] = 0f32
    compute[46] = 0f32
    compute[22] = 0f32
    compute[50] = 0f32
    compute[26] = 0f32
    compute[54] = 0f32
    compute[3] = 0f32
    compute[31] = 0f32
    compute[7] = 0f32
    compute[35] = 0f32
    compute[11] = 0f32
    compute[39] = 0f32
    compute[15] = 0f32
    compute[43] = 0f32
    compute[19] = 0f32
    compute[47] = 0f32
    compute[23] = 0f32
    compute[51] = 0f32
    compute[27] = 0f32
    compute[55] = 0f32
    for (rc.outer: int32, 0, 512) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        pad_temp.shared[((threadIdx.z_1*49) + (threadIdx.x_1*7))] = (float32*)placeholder_9[((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7))]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 1)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 1)]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 2)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 2)]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 3)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 3)]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 4)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 4)]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 5)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 5)]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 6)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 6)]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        placeholder.shared[((threadIdx.z_2*32) + (threadIdx.x_2*5))] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*16384)) + (floordiv((threadIdx.x_2*5), 4)*2048)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4))]
        placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*16384)) + (floordiv(((threadIdx.x_2*5) + 1), 4)*2048)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 1), 4))]
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 126) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*16384)) + (floordiv(((threadIdx.x_2*5) + 2), 4)*2048)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 2), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 125) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*16384)) + (floordiv(((threadIdx.x_2*5) + 3), 4)*2048)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 3), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 4)) < 31) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 124) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*16384)) + (floordiv((threadIdx.x_2*5), 4)*2048)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4)) + 2048)]
            }
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
    }
    T_relu_2[(((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x)] = max((((float32*)compute[0] + (float32*)placeholder_10[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 784)] = max((((float32*)compute[28] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 7)] = max((((float32*)compute[4] + (float32*)placeholder_10[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 791)] = max((((float32*)compute[32] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 14)] = max((((float32*)compute[8] + (float32*)placeholder_10[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 798)] = max((((float32*)compute[36] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 21)] = max((((float32*)compute[12] + (float32*)placeholder_10[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 805)] = max((((float32*)compute[40] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 28)] = max((((float32*)compute[16] + (float32*)placeholder_10[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 812)] = max((((float32*)compute[44] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 35)] = max((((float32*)compute[20] + (float32*)placeholder_10[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 819)] = max((((float32*)compute[48] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 42)] = max((((float32*)compute[24] + (float32*)placeholder_10[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 826)] = max((((float32*)compute[52] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 49)] = max((((float32*)compute[1] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 833)] = max((((float32*)compute[29] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 56)] = max((((float32*)compute[5] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 840)] = max((((float32*)compute[33] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 63)] = max((((float32*)compute[9] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 847)] = max((((float32*)compute[37] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 70)] = max((((float32*)compute[13] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 854)] = max((((float32*)compute[41] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 77)] = max((((float32*)compute[17] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 861)] = max((((float32*)compute[45] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 84)] = max((((float32*)compute[21] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 868)] = max((((float32*)compute[49] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 91)] = max((((float32*)compute[25] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 875)] = max((((float32*)compute[53] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 98)] = max((((float32*)compute[2] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 882)] = max((((float32*)compute[30] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 105)] = max((((float32*)compute[6] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 889)] = max((((float32*)compute[34] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 112)] = max((((float32*)compute[10] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 896)] = max((((float32*)compute[38] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 119)] = max((((float32*)compute[14] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 903)] = max((((float32*)compute[42] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 126)] = max((((float32*)compute[18] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 910)] = max((((float32*)compute[46] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 133)] = max((((float32*)compute[22] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 917)] = max((((float32*)compute[50] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 140)] = max((((float32*)compute[26] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 924)] = max((((float32*)compute[54] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 147)] = max((((float32*)compute[3] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 931)] = max((((float32*)compute[31] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 154)] = max((((float32*)compute[7] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 938)] = max((((float32*)compute[35] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 161)] = max((((float32*)compute[11] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 945)] = max((((float32*)compute[39] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 168)] = max((((float32*)compute[15] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 952)] = max((((float32*)compute[43] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 175)] = max((((float32*)compute[19] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 959)] = max((((float32*)compute[47] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 182)] = max((((float32*)compute[23] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 966)] = max((((float32*)compute[51] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 189)] = max((((float32*)compute[27] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 973)] = max((((float32*)compute[55] + (float32*)placeholder_10[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 1024, 14, 14), 'float32'), ('TENSOR', (512, 1024, 1, 1), 'float32'), (2, 2), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu_1", "tir.noalias": True}
  buffers = {placeholder_3: Buffer(placeholder_8: handle, float32, [512, 1, 1], []),
             placeholder_2: Buffer(placeholder_9: handle, float32, [32, 1024, 14, 14], []),
             placeholder_1: Buffer(placeholder_10: handle, float32, [512, 1024, 1, 1], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 512, 7, 7], []),
             placeholder: Buffer(placeholder_11: handle, float32, [512, 1, 1], [])}
  buffer_map = {T_relu_1: T_relu, placeholder_6: placeholder, placeholder_5: placeholder_1, placeholder_4: placeholder_2, placeholder_7: placeholder_3} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 512;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [676]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    compute[0] = 0f32
    compute[28] = 0f32
    compute[4] = 0f32
    compute[32] = 0f32
    compute[8] = 0f32
    compute[36] = 0f32
    compute[12] = 0f32
    compute[40] = 0f32
    compute[16] = 0f32
    compute[44] = 0f32
    compute[20] = 0f32
    compute[48] = 0f32
    compute[24] = 0f32
    compute[52] = 0f32
    compute[1] = 0f32
    compute[29] = 0f32
    compute[5] = 0f32
    compute[33] = 0f32
    compute[9] = 0f32
    compute[37] = 0f32
    compute[13] = 0f32
    compute[41] = 0f32
    compute[17] = 0f32
    compute[45] = 0f32
    compute[21] = 0f32
    compute[49] = 0f32
    compute[25] = 0f32
    compute[53] = 0f32
    compute[2] = 0f32
    compute[30] = 0f32
    compute[6] = 0f32
    compute[34] = 0f32
    compute[10] = 0f32
    compute[38] = 0f32
    compute[14] = 0f32
    compute[42] = 0f32
    compute[18] = 0f32
    compute[46] = 0f32
    compute[22] = 0f32
    compute[50] = 0f32
    compute[26] = 0f32
    compute[54] = 0f32
    compute[3] = 0f32
    compute[31] = 0f32
    compute[7] = 0f32
    compute[35] = 0f32
    compute[11] = 0f32
    compute[39] = 0f32
    compute[15] = 0f32
    compute[43] = 0f32
    compute[19] = 0f32
    compute[47] = 0f32
    compute[23] = 0f32
    compute[51] = 0f32
    compute[27] = 0f32
    compute[55] = 0f32
    for (rc.outer: int32, 0, 256) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        pad_temp.shared[((threadIdx.z_1*169) + (threadIdx.x_1*25))] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv((threadIdx.x_1*25), 13)*14)) + floormod((threadIdx.x_1*25), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 1)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 1), 13)*14)) + floormod(((threadIdx.x_1*25) + 1), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 2)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 2), 13)*14)) + floormod(((threadIdx.x_1*25) + 2), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 3)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 3), 13)*14)) + floormod(((threadIdx.x_1*25) + 3), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 4)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 4), 13)*14)) + floormod(((threadIdx.x_1*25) + 4), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 5)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 5), 13)*14)) + floormod(((threadIdx.x_1*25) + 5), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 6)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 6), 13)*14)) + floormod(((threadIdx.x_1*25) + 6), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 7)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 7), 13)*14)) + floormod(((threadIdx.x_1*25) + 7), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 8)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 8), 13)*14)) + floormod(((threadIdx.x_1*25) + 8), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 9)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 9), 13)*14)) + floormod(((threadIdx.x_1*25) + 9), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 10)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 10), 13)*14)) + floormod(((threadIdx.x_1*25) + 10), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 11)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 11), 13)*14)) + floormod(((threadIdx.x_1*25) + 11), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 12)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 12), 13)*14)) + floormod(((threadIdx.x_1*25) + 12), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 13)] = (float32*)placeholder_9[((((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv((threadIdx.x_1*25), 13)*14)) + floormod((threadIdx.x_1*25), 13)) + 14)]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 14)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 14), 13)*14)) + floormod(((threadIdx.x_1*25) + 1), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 15)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 15), 13)*14)) + floormod(((threadIdx.x_1*25) + 2), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 16)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 16), 13)*14)) + floormod(((threadIdx.x_1*25) + 3), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 17)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 17), 13)*14)) + floormod(((threadIdx.x_1*25) + 4), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 18)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 18), 13)*14)) + floormod(((threadIdx.x_1*25) + 5), 13))]
        if ((floordiv(((threadIdx.x_1*25) + 19), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 19), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 657) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 19)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 19), 13)*14)) + floormod(((threadIdx.x_1*25) + 6), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 20), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 20), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 656) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 20)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 20), 13)*14)) + floormod(((threadIdx.x_1*25) + 7), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 21), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 21), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 655) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 21)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 21), 13)*14)) + floormod(((threadIdx.x_1*25) + 8), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 22), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 22), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 654) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 22)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 22), 13)*14)) + floormod(((threadIdx.x_1*25) + 9), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 23), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 23), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 653) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 23)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 23), 13)*14)) + floormod(((threadIdx.x_1*25) + 10), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 24), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 24), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 652) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 24)] = (float32*)placeholder_9[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 24), 13)*14)) + floormod(((threadIdx.x_1*25) + 11), 13))]
              }
            }
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        placeholder.shared[((threadIdx.z_2*32) + (threadIdx.x_2*5))] = (float32*)placeholder_10[(((((floormod(blockIdx.z, 16)*32768) + (threadIdx.z_2*8192)) + (floordiv((threadIdx.x_2*5), 4)*1024)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4))]
        placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_10[(((((floormod(blockIdx.z, 16)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 1), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 1), 4))]
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 126) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_10[(((((floormod(blockIdx.z, 16)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 2), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 2), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 125) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_10[(((((floormod(blockIdx.z, 16)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 3), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 3), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 4)) < 31) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 124) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_10[((((((floormod(blockIdx.z, 16)*32768) + (threadIdx.z_2*8192)) + (floordiv((threadIdx.x_2*5), 4)*1024)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4)) + 1024)]
            }
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
    }
    T_relu_2[(((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x)] = max((((float32*)compute[0] + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_8[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 784)] = max((((float32*)compute[28] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 7)] = max((((float32*)compute[4] + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_8[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 791)] = max((((float32*)compute[32] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 14)] = max((((float32*)compute[8] + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_8[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 798)] = max((((float32*)compute[36] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 21)] = max((((float32*)compute[12] + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_8[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 805)] = max((((float32*)compute[40] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 28)] = max((((float32*)compute[16] + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_8[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 812)] = max((((float32*)compute[44] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 35)] = max((((float32*)compute[20] + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_8[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 819)] = max((((float32*)compute[48] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 42)] = max((((float32*)compute[24] + (float32*)placeholder_11[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]) + (float32*)placeholder_8[((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4))]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 826)] = max((((float32*)compute[52] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 16)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 49)] = max((((float32*)compute[1] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 833)] = max((((float32*)compute[29] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 56)] = max((((float32*)compute[5] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 840)] = max((((float32*)compute[33] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 63)] = max((((float32*)compute[9] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 847)] = max((((float32*)compute[37] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 70)] = max((((float32*)compute[13] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 854)] = max((((float32*)compute[41] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 77)] = max((((float32*)compute[17] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 861)] = max((((float32*)compute[45] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 84)] = max((((float32*)compute[21] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 868)] = max((((float32*)compute[49] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 91)] = max((((float32*)compute[25] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 1)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 875)] = max((((float32*)compute[53] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 17)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 98)] = max((((float32*)compute[2] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 882)] = max((((float32*)compute[30] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 105)] = max((((float32*)compute[6] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 889)] = max((((float32*)compute[34] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 112)] = max((((float32*)compute[10] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 896)] = max((((float32*)compute[38] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 119)] = max((((float32*)compute[14] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 903)] = max((((float32*)compute[42] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 126)] = max((((float32*)compute[18] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 910)] = max((((float32*)compute[46] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 133)] = max((((float32*)compute[22] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 917)] = max((((float32*)compute[50] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 140)] = max((((float32*)compute[26] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 2)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 924)] = max((((float32*)compute[54] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 18)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 147)] = max((((float32*)compute[3] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 931)] = max((((float32*)compute[31] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 154)] = max((((float32*)compute[7] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 938)] = max((((float32*)compute[35] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 161)] = max((((float32*)compute[11] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 945)] = max((((float32*)compute[39] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 168)] = max((((float32*)compute[15] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 952)] = max((((float32*)compute[43] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 175)] = max((((float32*)compute[19] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 959)] = max((((float32*)compute[47] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 182)] = max((((float32*)compute[23] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 966)] = max((((float32*)compute[51] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 189)] = max((((float32*)compute[27] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 3)]), 0f32)
    T_relu_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 973)] = max((((float32*)compute[55] + (float32*)placeholder_11[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 16)*32) + (threadIdx.z*4)) + 19)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 256, 14, 14), 'float32'), ('TENSOR', (1024, 256, 1, 1), 'float32'), (1, 1), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, placeholder_8: handle, placeholder_9: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_add_nn_relu_1", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_10: handle, float32, [32, 1024, 14, 14], []),
             placeholder_1: Buffer(placeholder_11: handle, float32, [1024, 1, 1], []),
             placeholder_2: Buffer(placeholder_12: handle, float32, [1024, 256, 1, 1], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 1024, 14, 14], []),
             placeholder_4: Buffer(placeholder_13: handle, float32, [1024, 1, 1], []),
             placeholder_3: Buffer(placeholder_14: handle, float32, [32, 256, 14, 14], [])}
  buffer_map = {placeholder_9: placeholder, placeholder_8: placeholder_1, placeholder_6: placeholder_2, T_relu_1: T_relu, placeholder_5: placeholder_3, placeholder_7: placeholder_4} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 2048;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [196]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [16]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[14] = 0f32
    compute[28] = 0f32
    compute[42] = 0f32
    compute[1] = 0f32
    compute[15] = 0f32
    compute[29] = 0f32
    compute[43] = 0f32
    compute[2] = 0f32
    compute[16] = 0f32
    compute[30] = 0f32
    compute[44] = 0f32
    compute[3] = 0f32
    compute[17] = 0f32
    compute[31] = 0f32
    compute[45] = 0f32
    compute[4] = 0f32
    compute[18] = 0f32
    compute[32] = 0f32
    compute[46] = 0f32
    compute[5] = 0f32
    compute[19] = 0f32
    compute[33] = 0f32
    compute[47] = 0f32
    compute[6] = 0f32
    compute[20] = 0f32
    compute[34] = 0f32
    compute[48] = 0f32
    compute[7] = 0f32
    compute[21] = 0f32
    compute[35] = 0f32
    compute[49] = 0f32
    compute[8] = 0f32
    compute[22] = 0f32
    compute[36] = 0f32
    compute[50] = 0f32
    compute[9] = 0f32
    compute[23] = 0f32
    compute[37] = 0f32
    compute[51] = 0f32
    compute[10] = 0f32
    compute[24] = 0f32
    compute[38] = 0f32
    compute[52] = 0f32
    compute[11] = 0f32
    compute[25] = 0f32
    compute[39] = 0f32
    compute[53] = 0f32
    compute[12] = 0f32
    compute[26] = 0f32
    compute[40] = 0f32
    compute[54] = 0f32
    compute[13] = 0f32
    compute[27] = 0f32
    compute[41] = 0f32
    compute[55] = 0f32
    for (rc.outer: int32, 0, 256) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 4) {
        if ((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 196) {
          if (((threadIdx.x_1*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 49) {
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_14[(((((floordiv(blockIdx.z, 64)*50176) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      if (((threadIdx.z_2*4) + threadIdx.x_2) < 16) {
        if (threadIdx.x_2 < 4) {
          placeholder.shared[((threadIdx.z_2*4) + threadIdx.x_2)] = (float32*)placeholder_12[((((floormod(blockIdx.z, 64)*4096) + (threadIdx.z_2*1024)) + (threadIdx.x_2*256)) + rc.outer)]
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[threadIdx.z]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[threadIdx.z]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
    }
    T_relu_2[(((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x)] = max(((((float32*)compute[0] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[(((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 784)] = max(((((float32*)compute[14] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 784)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1568)] = max(((((float32*)compute[28] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1568)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2352)] = max(((((float32*)compute[42] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2352)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 14)] = max(((((float32*)compute[1] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 14)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 798)] = max(((((float32*)compute[15] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 798)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1582)] = max(((((float32*)compute[29] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1582)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2366)] = max(((((float32*)compute[43] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2366)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 28)] = max(((((float32*)compute[2] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 28)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 812)] = max(((((float32*)compute[16] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 812)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1596)] = max(((((float32*)compute[30] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1596)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2380)] = max(((((float32*)compute[44] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2380)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 42)] = max(((((float32*)compute[3] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 42)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 826)] = max(((((float32*)compute[17] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 826)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1610)] = max(((((float32*)compute[31] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1610)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2394)] = max(((((float32*)compute[45] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2394)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 56)] = max(((((float32*)compute[4] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 56)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 840)] = max(((((float32*)compute[18] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 840)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1624)] = max(((((float32*)compute[32] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1624)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2408)] = max(((((float32*)compute[46] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2408)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 70)] = max(((((float32*)compute[5] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 70)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 854)] = max(((((float32*)compute[19] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 854)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1638)] = max(((((float32*)compute[33] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1638)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2422)] = max(((((float32*)compute[47] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2422)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 84)] = max(((((float32*)compute[6] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 84)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 868)] = max(((((float32*)compute[20] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 868)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1652)] = max(((((float32*)compute[34] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1652)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2436)] = max(((((float32*)compute[48] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2436)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 98)] = max(((((float32*)compute[7] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 98)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 882)] = max(((((float32*)compute[21] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 882)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1666)] = max(((((float32*)compute[35] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1666)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2450)] = max(((((float32*)compute[49] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2450)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 112)] = max(((((float32*)compute[8] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 112)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 896)] = max(((((float32*)compute[22] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 896)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1680)] = max(((((float32*)compute[36] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1680)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2464)] = max(((((float32*)compute[50] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2464)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 126)] = max(((((float32*)compute[9] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 126)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 910)] = max(((((float32*)compute[23] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 910)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1694)] = max(((((float32*)compute[37] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1694)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2478)] = max(((((float32*)compute[51] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2478)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 140)] = max(((((float32*)compute[10] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 140)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 924)] = max(((((float32*)compute[24] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 924)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1708)] = max(((((float32*)compute[38] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1708)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2492)] = max(((((float32*)compute[52] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2492)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 154)] = max(((((float32*)compute[11] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 154)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 938)] = max(((((float32*)compute[25] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 938)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1722)] = max(((((float32*)compute[39] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1722)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2506)] = max(((((float32*)compute[53] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2506)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 168)] = max(((((float32*)compute[12] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 168)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 952)] = max(((((float32*)compute[26] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 952)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1736)] = max(((((float32*)compute[40] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1736)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2520)] = max(((((float32*)compute[54] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2520)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 182)] = max(((((float32*)compute[13] + (float32*)placeholder_13[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_11[((floormod(blockIdx.z, 64)*16) + threadIdx.z)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 182)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 966)] = max(((((float32*)compute[27] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 4)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 966)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1750)] = max(((((float32*)compute[41] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 8)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1750)]), 0f32)
    T_relu_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2534)] = max(((((float32*)compute[55] + (float32*)placeholder_13[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_11[(((floormod(blockIdx.z, 64)*16) + threadIdx.z) + 12)]) + (float32*)placeholder_10[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2534)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 256, 14, 14), 'float32'), ('TENSOR', (256, 256, 3, 3), 'float32'), (1, 1), (1, 1, 1, 1), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_nn_relu_1", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 256, 14, 14], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [256, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 256, 14, 14], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [256, 256, 3, 3], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 128;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [784]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[7] = 0f32
    compute[14] = 0f32
    compute[21] = 0f32
    compute[28] = 0f32
    compute[35] = 0f32
    compute[42] = 0f32
    compute[49] = 0f32
    compute[1] = 0f32
    compute[8] = 0f32
    compute[15] = 0f32
    compute[22] = 0f32
    compute[29] = 0f32
    compute[36] = 0f32
    compute[43] = 0f32
    compute[50] = 0f32
    compute[2] = 0f32
    compute[9] = 0f32
    compute[16] = 0f32
    compute[23] = 0f32
    compute[30] = 0f32
    compute[37] = 0f32
    compute[44] = 0f32
    compute[51] = 0f32
    compute[3] = 0f32
    compute[10] = 0f32
    compute[17] = 0f32
    compute[24] = 0f32
    compute[31] = 0f32
    compute[38] = 0f32
    compute[45] = 0f32
    compute[52] = 0f32
    compute[4] = 0f32
    compute[11] = 0f32
    compute[18] = 0f32
    compute[25] = 0f32
    compute[32] = 0f32
    compute[39] = 0f32
    compute[46] = 0f32
    compute[53] = 0f32
    compute[5] = 0f32
    compute[12] = 0f32
    compute[19] = 0f32
    compute[26] = 0f32
    compute[33] = 0f32
    compute[40] = 0f32
    compute[47] = 0f32
    compute[54] = 0f32
    compute[6] = 0f32
    compute[13] = 0f32
    compute[20] = 0f32
    compute[27] = 0f32
    compute[34] = 0f32
    compute[41] = 0f32
    compute[48] = 0f32
    compute[55] = 0f32
    for (rc.outer: int32, 0, 32) {
      for (ry.outer: int32, 0, 3) {
        attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          pad_temp.shared[((threadIdx.z_1*98) + (threadIdx.x_1*7))] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer) < 15)) && (1 <= floormod(threadIdx.x_1, 2))), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 15)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 1)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 1), 14))), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 14)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 2)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 2), 14))), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 13)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 3)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 3), 14))), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 12)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 4)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 4), 14))), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 11)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 5)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 5), 14))), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 10)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 6)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 6), 14))), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 9)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 512) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[((threadIdx.z_2*64) + (threadIdx.x_2*5))] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv((threadIdx.x_2*5), 8)*2304)) + (rc.outer*72)) + (floormod((threadIdx.x_2*5), 8)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 1), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 511) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 1), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 1), 8)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 510) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 2), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 2), 8)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 509) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 3), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 3), 8)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 4), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 508) {
              if (threadIdx.x_2 < 12) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 4), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 4), 8)*9)) + (ry.outer*3))]
              }
            }
          }
        }
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          pad_temp.shared[((threadIdx.z_1*98) + (threadIdx.x_1*7))] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer) < 15)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 14)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 1)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer) < 15)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 13)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 2)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer) < 15)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 12)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 3)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer) < 15)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 11)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 4)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer) < 15)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 10)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 5)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer) < 15)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 9)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 6)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer) < 15)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 8)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 512) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[((threadIdx.z_2*64) + (threadIdx.x_2*5))] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv((threadIdx.x_2*5), 8)*2304)) + (rc.outer*72)) + (floormod((threadIdx.x_2*5), 8)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 1), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 511) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 1), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 1), 8)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 510) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 2), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 2), 8)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 509) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 3), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 3), 8)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 4), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 508) {
              if (threadIdx.x_2 < 12) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 4), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 4), 8)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
        }
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          pad_temp.shared[((threadIdx.z_1*98) + (threadIdx.x_1*7))] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer) < 15)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 13)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 1)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 1), 14) < 13)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 12)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 2)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 2), 14) < 13)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 11)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 3)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 3), 14) < 13)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 10)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 4)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 4), 14) < 13)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 9)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 5)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 5), 14) < 13)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 8)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 6)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 6), 14) < 13)), (float32*)placeholder_7[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 7)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 512) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[((threadIdx.z_2*64) + (threadIdx.x_2*5))] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv((threadIdx.x_2*5), 8)*2304)) + (rc.outer*72)) + (floormod((threadIdx.x_2*5), 8)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 1), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 511) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 1), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 1), 8)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 510) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 2), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 2), 8)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 509) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 3), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 3), 8)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 4), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 508) {
              if (threadIdx.x_2 < 12) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 4), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 4), 8)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
        }
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
      }
    }
    T_relu_2[((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x)] = max(((float32*)compute[0] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1568)] = max(((float32*)compute[7] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3136)] = max(((float32*)compute[14] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4704)] = max(((float32*)compute[21] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6272)] = max(((float32*)compute[28] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7840)] = max(((float32*)compute[35] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9408)] = max(((float32*)compute[42] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 10976)] = max(((float32*)compute[49] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 14)] = max(((float32*)compute[1] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1582)] = max(((float32*)compute[8] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3150)] = max(((float32*)compute[15] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4718)] = max(((float32*)compute[22] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6286)] = max(((float32*)compute[29] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7854)] = max(((float32*)compute[36] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9422)] = max(((float32*)compute[43] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 10990)] = max(((float32*)compute[50] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 28)] = max(((float32*)compute[2] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1596)] = max(((float32*)compute[9] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3164)] = max(((float32*)compute[16] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4732)] = max(((float32*)compute[23] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6300)] = max(((float32*)compute[30] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7868)] = max(((float32*)compute[37] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9436)] = max(((float32*)compute[44] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 11004)] = max(((float32*)compute[51] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 42)] = max(((float32*)compute[3] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1610)] = max(((float32*)compute[10] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3178)] = max(((float32*)compute[17] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4746)] = max(((float32*)compute[24] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6314)] = max(((float32*)compute[31] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7882)] = max(((float32*)compute[38] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9450)] = max(((float32*)compute[45] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 11018)] = max(((float32*)compute[52] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 56)] = max(((float32*)compute[4] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1624)] = max(((float32*)compute[11] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3192)] = max(((float32*)compute[18] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4760)] = max(((float32*)compute[25] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6328)] = max(((float32*)compute[32] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7896)] = max(((float32*)compute[39] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9464)] = max(((float32*)compute[46] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 11032)] = max(((float32*)compute[53] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 70)] = max(((float32*)compute[5] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1638)] = max(((float32*)compute[12] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3206)] = max(((float32*)compute[19] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4774)] = max(((float32*)compute[26] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6342)] = max(((float32*)compute[33] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7910)] = max(((float32*)compute[40] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9478)] = max(((float32*)compute[47] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 11046)] = max(((float32*)compute[54] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 84)] = max(((float32*)compute[6] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1652)] = max(((float32*)compute[13] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3220)] = max(((float32*)compute[20] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4788)] = max(((float32*)compute[27] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6356)] = max(((float32*)compute[34] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7924)] = max(((float32*)compute[41] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9492)] = max(((float32*)compute[48] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 11060)] = max(((float32*)compute[55] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 1024, 14, 14), 'float32'), ('TENSOR', (256, 1024, 1, 1), 'float32'), (1, 1), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu_2", "tir.noalias": True}
  buffers = {placeholder_1: Buffer(placeholder_8: handle, float32, [256, 1, 1], []),
             placeholder_3: Buffer(placeholder_9: handle, float32, [256, 1, 1], []),
             placeholder_2: Buffer(placeholder_10: handle, float32, [256, 1024, 1, 1], []),
             placeholder: Buffer(placeholder_11: handle, float32, [32, 1024, 14, 14], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 256, 14, 14], [])}
  buffer_map = {placeholder_4: placeholder, T_relu_1: T_relu, placeholder_7: placeholder_1, placeholder_5: placeholder_2, placeholder_6: placeholder_3} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 256;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [392]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[7] = 0f32
    compute[14] = 0f32
    compute[21] = 0f32
    compute[1] = 0f32
    compute[8] = 0f32
    compute[15] = 0f32
    compute[22] = 0f32
    compute[2] = 0f32
    compute[9] = 0f32
    compute[16] = 0f32
    compute[23] = 0f32
    compute[3] = 0f32
    compute[10] = 0f32
    compute[17] = 0f32
    compute[24] = 0f32
    compute[4] = 0f32
    compute[11] = 0f32
    compute[18] = 0f32
    compute[25] = 0f32
    compute[5] = 0f32
    compute[12] = 0f32
    compute[19] = 0f32
    compute[26] = 0f32
    compute[6] = 0f32
    compute[13] = 0f32
    compute[20] = 0f32
    compute[27] = 0f32
    for (rc.outer: int32, 0, 256) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 4) {
        if ((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 392) {
          if (((threadIdx.x_1*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 49) {
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_11[(((((floordiv(blockIdx.z, 8)*200704) + (rc.outer*784)) + (floordiv((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 98)*196)) + (blockIdx.y*98)) + floormod((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 98))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 2) {
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)) < 32) {
          if ((((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 128) {
            if (((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 16) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_10[(((((floormod(blockIdx.z, 8)*32768) + (threadIdx.z_2*4096)) + (floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4))]
            }
          }
        }
      }
      for (rc.inner: int32, 0, 4) {
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((rc.inner*98) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((rc.inner*98) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((rc.inner*98) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((rc.inner*98) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 14)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 14)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 14)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 14)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 42)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 42)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 42)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 42)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 56)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 56)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 56)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 70)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 70)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 70)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 70)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 84)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 84)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 84)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
      }
    }
    T_relu_2[((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x)] = max((((float32*)compute[0] + (float32*)placeholder_9[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1568)] = max((((float32*)compute[7] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3136)] = max((((float32*)compute[14] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4704)] = max((((float32*)compute[21] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 14)] = max((((float32*)compute[1] + (float32*)placeholder_9[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1582)] = max((((float32*)compute[8] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3150)] = max((((float32*)compute[15] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4718)] = max((((float32*)compute[22] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 28)] = max((((float32*)compute[2] + (float32*)placeholder_9[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1596)] = max((((float32*)compute[9] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3164)] = max((((float32*)compute[16] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4732)] = max((((float32*)compute[23] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 42)] = max((((float32*)compute[3] + (float32*)placeholder_9[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1610)] = max((((float32*)compute[10] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3178)] = max((((float32*)compute[17] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4746)] = max((((float32*)compute[24] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 56)] = max((((float32*)compute[4] + (float32*)placeholder_9[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1624)] = max((((float32*)compute[11] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3192)] = max((((float32*)compute[18] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4760)] = max((((float32*)compute[25] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 70)] = max((((float32*)compute[5] + (float32*)placeholder_9[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1638)] = max((((float32*)compute[12] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3206)] = max((((float32*)compute[19] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4774)] = max((((float32*)compute[26] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 84)] = max((((float32*)compute[6] + (float32*)placeholder_9[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1652)] = max((((float32*)compute[13] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3220)] = max((((float32*)compute[20] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4788)] = max((((float32*)compute[27] + (float32*)placeholder_9[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 512, 28, 28), 'float32'), ('TENSOR', (256, 512, 1, 1), 'float32'), (2, 2), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu_3", "tir.noalias": True}
  buffers = {placeholder_3: Buffer(placeholder_8: handle, float32, [256, 1, 1], []),
             placeholder_2: Buffer(placeholder_9: handle, float32, [256, 512, 1, 1], []),
             placeholder_1: Buffer(placeholder_10: handle, float32, [32, 512, 28, 28], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 256, 14, 14], []),
             placeholder: Buffer(placeholder_11: handle, float32, [256, 1, 1], [])}
  buffer_map = {T_relu_1: T_relu, placeholder_6: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, placeholder_7: placeholder_3} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 256;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1404]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[7] = 0f32
    compute[14] = 0f32
    compute[21] = 0f32
    compute[1] = 0f32
    compute[8] = 0f32
    compute[15] = 0f32
    compute[22] = 0f32
    compute[2] = 0f32
    compute[9] = 0f32
    compute[16] = 0f32
    compute[23] = 0f32
    compute[3] = 0f32
    compute[10] = 0f32
    compute[17] = 0f32
    compute[24] = 0f32
    compute[4] = 0f32
    compute[11] = 0f32
    compute[18] = 0f32
    compute[25] = 0f32
    compute[5] = 0f32
    compute[12] = 0f32
    compute[19] = 0f32
    compute[26] = 0f32
    compute[6] = 0f32
    compute[13] = 0f32
    compute[20] = 0f32
    compute[27] = 0f32
    for (rc.outer: int32, 0, 128) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 13) {
        if ((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 1404) {
          if (((threadIdx.x_1*13) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 176) {
            pad_temp.shared[(((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_10[((((((floordiv(blockIdx.z, 8)*401408) + (rc.outer*3136)) + (floordiv((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 351)*784)) + (blockIdx.y*392)) + (floordiv(floormod((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 351), 27)*28)) + floormod((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 27))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 2) {
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)) < 32) {
          if ((((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 128) {
            if (((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 16) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_9[(((((floormod(blockIdx.z, 8)*16384) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)*512)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4))]
            }
          }
        }
      }
      for (rc.inner: int32, 0, 4) {
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
      }
    }
    T_relu_2[((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x)] = max((((float32*)compute[0] + (float32*)placeholder_11[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1568)] = max((((float32*)compute[7] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3136)] = max((((float32*)compute[14] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4704)] = max((((float32*)compute[21] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 14)] = max((((float32*)compute[1] + (float32*)placeholder_11[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1582)] = max((((float32*)compute[8] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3150)] = max((((float32*)compute[15] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4718)] = max((((float32*)compute[22] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 28)] = max((((float32*)compute[2] + (float32*)placeholder_11[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1596)] = max((((float32*)compute[9] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3164)] = max((((float32*)compute[16] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4732)] = max((((float32*)compute[23] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 42)] = max((((float32*)compute[3] + (float32*)placeholder_11[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1610)] = max((((float32*)compute[10] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3178)] = max((((float32*)compute[17] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4746)] = max((((float32*)compute[24] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 56)] = max((((float32*)compute[4] + (float32*)placeholder_11[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1624)] = max((((float32*)compute[11] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3192)] = max((((float32*)compute[18] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4760)] = max((((float32*)compute[25] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 70)] = max((((float32*)compute[5] + (float32*)placeholder_11[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1638)] = max((((float32*)compute[12] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3206)] = max((((float32*)compute[19] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4774)] = max((((float32*)compute[26] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 84)] = max((((float32*)compute[6] + (float32*)placeholder_11[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 8)*32) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1652)] = max((((float32*)compute[13] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3220)] = max((((float32*)compute[20] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4788)] = max((((float32*)compute[27] + (float32*)placeholder_11[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 8)*32) + threadIdx.z) + 24)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 128, 28, 28), 'float32'), ('TENSOR', (512, 128, 1, 1), 'float32'), (1, 1), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, placeholder_8: handle, placeholder_9: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_add_nn_relu_2", "tir.noalias": True}
  buffers = {placeholder_4: Buffer(placeholder_10: handle, float32, [32, 128, 28, 28], []),
             placeholder: Buffer(placeholder_11: handle, float32, [512, 1, 1], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 512, 28, 28], []),
             placeholder_2: Buffer(placeholder_12: handle, float32, [32, 512, 28, 28], []),
             placeholder_1: Buffer(placeholder_13: handle, float32, [512, 128, 1, 1], []),
             placeholder_3: Buffer(placeholder_14: handle, float32, [512, 1, 1], [])}
  buffer_map = {placeholder_7: placeholder, placeholder_6: placeholder_1, placeholder_9: placeholder_2, T_relu_1: T_relu, placeholder_8: placeholder_3, placeholder_5: placeholder_4} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 128;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [64]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [112]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 14;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 14;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 2 {
    compute[0] = 0f32
    compute[8] = 0f32
    compute[16] = 0f32
    compute[24] = 0f32
    compute[32] = 0f32
    compute[40] = 0f32
    compute[48] = 0f32
    compute[56] = 0f32
    compute[4] = 0f32
    compute[12] = 0f32
    compute[20] = 0f32
    compute[28] = 0f32
    compute[36] = 0f32
    compute[44] = 0f32
    compute[52] = 0f32
    compute[60] = 0f32
    compute[1] = 0f32
    compute[9] = 0f32
    compute[17] = 0f32
    compute[25] = 0f32
    compute[33] = 0f32
    compute[41] = 0f32
    compute[49] = 0f32
    compute[57] = 0f32
    compute[5] = 0f32
    compute[13] = 0f32
    compute[21] = 0f32
    compute[29] = 0f32
    compute[37] = 0f32
    compute[45] = 0f32
    compute[53] = 0f32
    compute[61] = 0f32
    compute[2] = 0f32
    compute[10] = 0f32
    compute[18] = 0f32
    compute[26] = 0f32
    compute[34] = 0f32
    compute[42] = 0f32
    compute[50] = 0f32
    compute[58] = 0f32
    compute[6] = 0f32
    compute[14] = 0f32
    compute[22] = 0f32
    compute[30] = 0f32
    compute[38] = 0f32
    compute[46] = 0f32
    compute[54] = 0f32
    compute[62] = 0f32
    compute[3] = 0f32
    compute[11] = 0f32
    compute[19] = 0f32
    compute[27] = 0f32
    compute[35] = 0f32
    compute[43] = 0f32
    compute[51] = 0f32
    compute[59] = 0f32
    compute[7] = 0f32
    compute[15] = 0f32
    compute[23] = 0f32
    compute[31] = 0f32
    compute[39] = 0f32
    compute[47] = 0f32
    compute[55] = 0f32
    compute[63] = 0f32
    for (rc.outer: int32, 0, 64) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 14;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 2;
      pad_temp.shared[(((threadIdx.z_1*28) + (threadIdx.y_1*2)) + threadIdx.x_1)] = (float32*)placeholder_10[((((((floordiv(blockIdx.z, 4)*100352) + (rc.outer*1568)) + (threadIdx.z_1*392)) + (threadIdx.y_1*28)) + (blockIdx.x*2)) + threadIdx.x_1)]
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 14;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 2 {
        if (((threadIdx.z_2*32) + floordiv(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2)) < 128) {
          if ((((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3)) < 256) {
            if (((threadIdx.y_2*5) + (threadIdx.x_2*3)) < 64) {
              placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3))] = (float32*)placeholder_13[(((((floormod(blockIdx.z, 4)*16384) + (threadIdx.z_2*4096)) + (floordiv(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2)*128)) + (rc.outer*2)) + floormod(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2))]
            }
          }
        }
        if (((threadIdx.z_2*32) + floordiv((((threadIdx.y_2*5) + (threadIdx.x_2*3)) + 1), 2)) < 128) {
          if ((((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3)) < 255) {
            if (((threadIdx.y_2*5) + (threadIdx.x_2*3)) < 63) {
              placeholder.shared[((((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_13[(((((floormod(blockIdx.z, 4)*16384) + (threadIdx.z_2*4096)) + (floordiv((((threadIdx.y_2*5) + (threadIdx.x_2*3)) + 1), 2)*128)) + (rc.outer*2)) + floormod((((threadIdx.y_2*5) + (threadIdx.x_2*3)) + 1), 2))]
            }
          }
        }
        if (((threadIdx.z_2*32) + floordiv(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2)) < 127) {
          if ((((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3)) < 254) {
            if (((threadIdx.y_2*5) + (threadIdx.x_2*3)) < 62) {
              if (threadIdx.x_2 < 1) {
                placeholder.shared[((((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_13[((((((floormod(blockIdx.z, 4)*16384) + (threadIdx.z_2*4096)) + (floordiv(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2)*128)) + (rc.outer*2)) + floormod(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2)) + 128)]
              }
            }
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 32)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 96)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 160)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
      compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 224)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 32)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 96)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 160)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
      compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 224)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 34)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 98)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 162)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
      compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 226)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 34)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 98)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 162)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
      compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 226)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 36)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 100)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 164)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
      compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 228)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 36)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 100)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 164)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
      compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 228)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 38)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 102)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 166)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
      compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 230)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 38)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 102)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 166)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
      compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 230)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 33)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 97)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 161)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
      compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 225)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 33)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 97)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 161)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
      compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 225)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 35)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 99)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 163)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
      compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 227)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 35)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 99)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 163)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
      compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 227)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 37)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 101)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 165)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
      compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 229)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 37)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 101)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 165)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
      compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 229)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 39)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 103)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 167)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
      compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 231)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 39)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 103)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 167)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
      compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 231)]))
    }
    T_relu_2[(((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x)] = max(((((float32*)compute[0] + (float32*)placeholder_11[((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4))]) + (float32*)placeholder_14[((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4))]) + (float32*)placeholder_12[(((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 12544)] = max(((((float32*)compute[8] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 12544)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 25088)] = max(((((float32*)compute[16] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 32)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 32)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 25088)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 37632)] = max(((((float32*)compute[24] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 48)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 48)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 37632)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 50176)] = max(((((float32*)compute[32] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 64)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 64)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 50176)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 62720)] = max(((((float32*)compute[40] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 80)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 80)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 62720)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 75264)] = max(((((float32*)compute[48] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 96)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 96)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 75264)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 87808)] = max(((((float32*)compute[56] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 112)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 112)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 87808)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 392)] = max(((((float32*)compute[4] + (float32*)placeholder_11[((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4))]) + (float32*)placeholder_14[((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4))]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 392)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 12936)] = max(((((float32*)compute[12] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 16)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 12936)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 25480)] = max(((((float32*)compute[20] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 32)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 32)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 25480)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 38024)] = max(((((float32*)compute[28] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 48)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 48)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 38024)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 50568)] = max(((((float32*)compute[36] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 64)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 64)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 50568)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 63112)] = max(((((float32*)compute[44] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 80)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 80)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 63112)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 75656)] = max(((((float32*)compute[52] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 96)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 96)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 75656)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 88200)] = max(((((float32*)compute[60] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 112)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 112)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 88200)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 784)] = max(((((float32*)compute[1] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 784)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 13328)] = max(((((float32*)compute[9] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 13328)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 25872)] = max(((((float32*)compute[17] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 33)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 33)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 25872)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 38416)] = max(((((float32*)compute[25] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 49)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 49)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 38416)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 50960)] = max(((((float32*)compute[33] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 65)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 65)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 50960)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 63504)] = max(((((float32*)compute[41] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 81)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 81)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 63504)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 76048)] = max(((((float32*)compute[49] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 97)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 97)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 76048)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 88592)] = max(((((float32*)compute[57] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 113)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 113)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 88592)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 1176)] = max(((((float32*)compute[5] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 1)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 1176)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 13720)] = max(((((float32*)compute[13] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 17)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 13720)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 26264)] = max(((((float32*)compute[21] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 33)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 33)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 26264)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 38808)] = max(((((float32*)compute[29] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 49)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 49)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 38808)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 51352)] = max(((((float32*)compute[37] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 65)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 65)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 51352)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 63896)] = max(((((float32*)compute[45] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 81)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 81)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 63896)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 76440)] = max(((((float32*)compute[53] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 97)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 97)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 76440)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 88984)] = max(((((float32*)compute[61] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 113)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 113)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 88984)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 1568)] = max(((((float32*)compute[2] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 1568)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 14112)] = max(((((float32*)compute[10] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 14112)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 26656)] = max(((((float32*)compute[18] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 34)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 34)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 26656)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 39200)] = max(((((float32*)compute[26] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 50)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 50)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 39200)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 51744)] = max(((((float32*)compute[34] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 66)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 66)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 51744)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 64288)] = max(((((float32*)compute[42] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 82)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 82)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 64288)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 76832)] = max(((((float32*)compute[50] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 98)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 98)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 76832)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 89376)] = max(((((float32*)compute[58] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 114)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 114)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 89376)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 1960)] = max(((((float32*)compute[6] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 2)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 1960)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 14504)] = max(((((float32*)compute[14] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 18)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 14504)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 27048)] = max(((((float32*)compute[22] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 34)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 34)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 27048)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 39592)] = max(((((float32*)compute[30] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 50)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 50)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 39592)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 52136)] = max(((((float32*)compute[38] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 66)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 66)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 52136)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 64680)] = max(((((float32*)compute[46] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 82)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 82)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 64680)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 77224)] = max(((((float32*)compute[54] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 98)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 98)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 77224)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 89768)] = max(((((float32*)compute[62] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 114)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 114)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 89768)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 2352)] = max(((((float32*)compute[3] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 2352)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 14896)] = max(((((float32*)compute[11] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 14896)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 27440)] = max(((((float32*)compute[19] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 35)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 35)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 27440)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 39984)] = max(((((float32*)compute[27] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 51)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 51)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 39984)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 52528)] = max(((((float32*)compute[35] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 67)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 67)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 52528)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 65072)] = max(((((float32*)compute[43] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 83)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 83)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 65072)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 77616)] = max(((((float32*)compute[51] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 99)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 99)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 77616)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 90160)] = max(((((float32*)compute[59] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 115)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 115)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 90160)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 2744)] = max(((((float32*)compute[7] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 3)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 2744)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 15288)] = max(((((float32*)compute[15] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 19)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 15288)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 27832)] = max(((((float32*)compute[23] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 35)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 35)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 27832)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 40376)] = max(((((float32*)compute[31] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 51)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 51)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 40376)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 52920)] = max(((((float32*)compute[39] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 67)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 67)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 52920)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 65464)] = max(((((float32*)compute[47] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 83)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 83)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 65464)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 78008)] = max(((((float32*)compute[55] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 99)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 99)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 78008)]), 0f32)
    T_relu_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 90552)] = max(((((float32*)compute[63] + (float32*)placeholder_11[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 115)]) + (float32*)placeholder_14[(((floormod(blockIdx.z, 4)*128) + (threadIdx.z*4)) + 115)]) + (float32*)placeholder_12[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 90552)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 128, 28, 28), 'float32'), ('TENSOR', (128, 128, 3, 3), 'float32'), (1, 1), (1, 1, 1, 1), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_nn_relu_2", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 128, 28, 28], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [128, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 128, 28, 28], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [128, 128, 3, 3], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [64]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [896]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 7;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[8] = 0f32
    compute[16] = 0f32
    compute[24] = 0f32
    compute[32] = 0f32
    compute[40] = 0f32
    compute[48] = 0f32
    compute[56] = 0f32
    compute[2] = 0f32
    compute[10] = 0f32
    compute[18] = 0f32
    compute[26] = 0f32
    compute[34] = 0f32
    compute[42] = 0f32
    compute[50] = 0f32
    compute[58] = 0f32
    compute[4] = 0f32
    compute[12] = 0f32
    compute[20] = 0f32
    compute[28] = 0f32
    compute[36] = 0f32
    compute[44] = 0f32
    compute[52] = 0f32
    compute[60] = 0f32
    compute[6] = 0f32
    compute[14] = 0f32
    compute[22] = 0f32
    compute[30] = 0f32
    compute[38] = 0f32
    compute[46] = 0f32
    compute[54] = 0f32
    compute[62] = 0f32
    compute[1] = 0f32
    compute[9] = 0f32
    compute[17] = 0f32
    compute[25] = 0f32
    compute[33] = 0f32
    compute[41] = 0f32
    compute[49] = 0f32
    compute[57] = 0f32
    compute[3] = 0f32
    compute[11] = 0f32
    compute[19] = 0f32
    compute[27] = 0f32
    compute[35] = 0f32
    compute[43] = 0f32
    compute[51] = 0f32
    compute[59] = 0f32
    compute[5] = 0f32
    compute[13] = 0f32
    compute[21] = 0f32
    compute[29] = 0f32
    compute[37] = 0f32
    compute[45] = 0f32
    compute[53] = 0f32
    compute[61] = 0f32
    compute[7] = 0f32
    compute[15] = 0f32
    compute[23] = 0f32
    compute[31] = 0f32
    compute[39] = 0f32
    compute[47] = 0f32
    compute[55] = 0f32
    compute[63] = 0f32
    for (rc.outer: int32, 0, 16) {
      for (ry.outer: int32, 0, 3) {
        for (rx.outer: int32, 0, 3) {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
          attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
            pad_temp.shared[((threadIdx.z_1*112) + (threadIdx.x_1*8))] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv((threadIdx.x_1*8), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv((threadIdx.x_1*8), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod((threadIdx.x_1*8), 28)))) && ((rx.outer + floormod((threadIdx.x_1*8), 28)) < 29)), (float32*)placeholder_7[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 29)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 1)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 1), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 1), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 1), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 1), 28)) < 29)), (float32*)placeholder_7[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 28)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 2)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 2), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 2), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 2), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 2), 28)) < 29)), (float32*)placeholder_7[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 27)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 3)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 3), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 3), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 3), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 3), 28)) < 29)), (float32*)placeholder_7[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 26)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 4)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 4), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 4), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 4), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 4), 28)) < 29)), (float32*)placeholder_7[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 25)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 5)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 5), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 5), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 5), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 5), 28)) < 29)), (float32*)placeholder_7[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 24)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 6)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 6), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 6), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 6), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 6), 28)) < 29)), (float32*)placeholder_7[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 23)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 7)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 7), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 7), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 7), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 7), 28)) < 29)), (float32*)placeholder_7[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 22)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
            if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 8)) < 64) {
              if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 512) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[((threadIdx.z_2*64) + (threadIdx.x_2*5))] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 2)*73728) + (threadIdx.z_2*9216)) + (floordiv((threadIdx.x_2*5), 8)*1152)) + (rc.outer*72)) + (floormod((threadIdx.x_2*5), 8)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 1), 8)) < 64) {
              if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 511) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 2)*73728) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*5) + 1), 8)*1152)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 1), 8)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 8)) < 64) {
              if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 510) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 2)*73728) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*5) + 2), 8)*1152)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 2), 8)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 8)) < 64) {
              if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 509) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 2)*73728) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*5) + 3), 8)*1152)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 3), 8)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 4), 8)) < 64) {
              if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 508) {
                if (threadIdx.x_2 < 12) {
                  placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_8[(((((((floormod(blockIdx.z, 2)*73728) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*5) + 4), 8)*1152)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 4), 8)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
          }
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        }
      }
    }
    T_relu_2[((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x)] = max(((float32*)compute[0] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6272)] = max(((float32*)compute[8] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12544)] = max(((float32*)compute[16] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18816)] = max(((float32*)compute[24] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25088)] = max(((float32*)compute[32] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31360)] = max(((float32*)compute[40] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37632)] = max(((float32*)compute[48] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43904)] = max(((float32*)compute[56] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 28)] = max(((float32*)compute[2] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6300)] = max(((float32*)compute[10] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12572)] = max(((float32*)compute[18] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18844)] = max(((float32*)compute[26] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25116)] = max(((float32*)compute[34] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31388)] = max(((float32*)compute[42] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37660)] = max(((float32*)compute[50] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43932)] = max(((float32*)compute[58] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 56)] = max(((float32*)compute[4] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6328)] = max(((float32*)compute[12] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12600)] = max(((float32*)compute[20] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18872)] = max(((float32*)compute[28] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25144)] = max(((float32*)compute[36] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31416)] = max(((float32*)compute[44] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37688)] = max(((float32*)compute[52] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43960)] = max(((float32*)compute[60] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 84)] = max(((float32*)compute[6] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6356)] = max(((float32*)compute[14] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12628)] = max(((float32*)compute[22] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18900)] = max(((float32*)compute[30] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25172)] = max(((float32*)compute[38] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31444)] = max(((float32*)compute[46] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37716)] = max(((float32*)compute[54] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43988)] = max(((float32*)compute[62] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 14)] = max(((float32*)compute[1] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6286)] = max(((float32*)compute[9] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12558)] = max(((float32*)compute[17] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18830)] = max(((float32*)compute[25] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25102)] = max(((float32*)compute[33] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31374)] = max(((float32*)compute[41] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37646)] = max(((float32*)compute[49] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43918)] = max(((float32*)compute[57] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 42)] = max(((float32*)compute[3] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6314)] = max(((float32*)compute[11] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12586)] = max(((float32*)compute[19] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18858)] = max(((float32*)compute[27] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25130)] = max(((float32*)compute[35] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31402)] = max(((float32*)compute[43] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37674)] = max(((float32*)compute[51] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43946)] = max(((float32*)compute[59] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 70)] = max(((float32*)compute[5] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6342)] = max(((float32*)compute[13] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12614)] = max(((float32*)compute[21] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18886)] = max(((float32*)compute[29] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25158)] = max(((float32*)compute[37] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31430)] = max(((float32*)compute[45] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37702)] = max(((float32*)compute[53] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43974)] = max(((float32*)compute[61] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 98)] = max(((float32*)compute[7] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6370)] = max(((float32*)compute[15] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12642)] = max(((float32*)compute[23] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18914)] = max(((float32*)compute[31] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25186)] = max(((float32*)compute[39] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31458)] = max(((float32*)compute[47] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37730)] = max(((float32*)compute[55] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 44002)] = max(((float32*)compute[63] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 56)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 512, 28, 28), 'float32'), ('TENSOR', (128, 512, 1, 1), 'float32'), (1, 1), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu_4", "tir.noalias": True}
  buffers = {placeholder_2: Buffer(placeholder_8: handle, float32, [128, 1, 1], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 128, 28, 28], []),
             placeholder_3: Buffer(placeholder_9: handle, float32, [128, 1, 1], []),
             placeholder: Buffer(placeholder_10: handle, float32, [128, 512, 1, 1], []),
             placeholder_1: Buffer(placeholder_11: handle, float32, [32, 512, 28, 28], [])}
  buffer_map = {placeholder_5: placeholder, placeholder_4: placeholder_1, placeholder_7: placeholder_2, placeholder_6: placeholder_3, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [392]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[7] = 0f32
    compute[14] = 0f32
    compute[21] = 0f32
    compute[1] = 0f32
    compute[8] = 0f32
    compute[15] = 0f32
    compute[22] = 0f32
    compute[2] = 0f32
    compute[9] = 0f32
    compute[16] = 0f32
    compute[23] = 0f32
    compute[3] = 0f32
    compute[10] = 0f32
    compute[17] = 0f32
    compute[24] = 0f32
    compute[4] = 0f32
    compute[11] = 0f32
    compute[18] = 0f32
    compute[25] = 0f32
    compute[5] = 0f32
    compute[12] = 0f32
    compute[19] = 0f32
    compute[26] = 0f32
    compute[6] = 0f32
    compute[13] = 0f32
    compute[20] = 0f32
    compute[27] = 0f32
    for (rc.outer: int32, 0, 128) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_1*25) + (threadIdx.x_1*2)) < 392) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[((threadIdx.z_1*25) + (threadIdx.x_1*2))] = (float32*)placeholder_11[(((((((floordiv(blockIdx.z, 2)*401408) + (rc.outer*3136)) + (floordiv(((threadIdx.z_1*25) + (threadIdx.x_1*2)), 98)*784)) + (blockIdx.y*196)) + (floordiv(floormod(((threadIdx.z_1*25) + (threadIdx.x_1*2)), 98), 14)*28)) + (blockIdx.x*14)) + floormod(((threadIdx.z_1*25) + (threadIdx.x_1*2)), 14))]
          }
        }
        if (((threadIdx.z_1*25) + (threadIdx.x_1*2)) < 391) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*25) + (threadIdx.x_1*2)) + 1)] = (float32*)placeholder_11[(((((((floordiv(blockIdx.z, 2)*401408) + (rc.outer*3136)) + (floordiv((((threadIdx.z_1*25) + (threadIdx.x_1*2)) + 1), 98)*784)) + (blockIdx.y*196)) + (floordiv(floormod((((threadIdx.z_1*25) + (threadIdx.x_1*2)) + 1), 98), 14)*28)) + (blockIdx.x*14)) + floormod((((threadIdx.z_1*25) + (threadIdx.x_1*2)) + 1), 14))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_2*4) + floordiv(threadIdx.x_2, 2)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 256) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[((threadIdx.z_2*16) + (threadIdx.x_2*2))] = (float32*)placeholder_10[(((((floormod(blockIdx.z, 2)*32768) + (threadIdx.z_2*2048)) + (floordiv(threadIdx.x_2, 2)*512)) + (rc.outer*4)) + (floormod(threadIdx.x_2, 2)*2))]
            }
          }
        }
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + 1), 4)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 255) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + 1)] = (float32*)placeholder_10[(((((floormod(blockIdx.z, 2)*32768) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*2) + 1), 4)*512)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + 1), 4))]
            }
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
    }
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x)] = max((((float32*)compute[0] + (float32*)placeholder_9[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12544)] = max((((float32*)compute[7] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25088)] = max((((float32*)compute[14] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37632)] = max((((float32*)compute[21] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 28)] = max((((float32*)compute[1] + (float32*)placeholder_9[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12572)] = max((((float32*)compute[8] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25116)] = max((((float32*)compute[15] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37660)] = max((((float32*)compute[22] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 56)] = max((((float32*)compute[2] + (float32*)placeholder_9[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12600)] = max((((float32*)compute[9] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25144)] = max((((float32*)compute[16] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37688)] = max((((float32*)compute[23] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 84)] = max((((float32*)compute[3] + (float32*)placeholder_9[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12628)] = max((((float32*)compute[10] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25172)] = max((((float32*)compute[17] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37716)] = max((((float32*)compute[24] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 112)] = max((((float32*)compute[4] + (float32*)placeholder_9[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12656)] = max((((float32*)compute[11] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25200)] = max((((float32*)compute[18] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37744)] = max((((float32*)compute[25] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 140)] = max((((float32*)compute[5] + (float32*)placeholder_9[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12684)] = max((((float32*)compute[12] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25228)] = max((((float32*)compute[19] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37772)] = max((((float32*)compute[26] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 168)] = max((((float32*)compute[6] + (float32*)placeholder_9[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12712)] = max((((float32*)compute[13] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25256)] = max((((float32*)compute[20] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37800)] = max((((float32*)compute[27] + (float32*)placeholder_9[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 256, 56, 56), 'float32'), ('TENSOR', (128, 256, 1, 1), 'float32'), (2, 2), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu_5", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 128, 28, 28], []),
             placeholder_2: Buffer(placeholder_8: handle, float32, [128, 1, 1], []),
             placeholder: Buffer(placeholder_9: handle, float32, [32, 256, 56, 56], []),
             placeholder_3: Buffer(placeholder_10: handle, float32, [128, 256, 1, 1], []),
             placeholder_1: Buffer(placeholder_11: handle, float32, [128, 1, 1], [])}
  buffer_map = {placeholder_4: placeholder, placeholder_6: placeholder_1, placeholder_7: placeholder_2, placeholder_5: placeholder_3, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1404]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[7] = 0f32
    compute[14] = 0f32
    compute[21] = 0f32
    compute[1] = 0f32
    compute[8] = 0f32
    compute[15] = 0f32
    compute[22] = 0f32
    compute[2] = 0f32
    compute[9] = 0f32
    compute[16] = 0f32
    compute[23] = 0f32
    compute[3] = 0f32
    compute[10] = 0f32
    compute[17] = 0f32
    compute[24] = 0f32
    compute[4] = 0f32
    compute[11] = 0f32
    compute[18] = 0f32
    compute[25] = 0f32
    compute[5] = 0f32
    compute[12] = 0f32
    compute[19] = 0f32
    compute[26] = 0f32
    compute[6] = 0f32
    compute[13] = 0f32
    compute[20] = 0f32
    compute[27] = 0f32
    for (rc.outer: int32, 0, 64) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1404) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[((threadIdx.z_1*88) + (threadIdx.x_1*7))] = (float32*)placeholder_9[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 351), 27)*56)) + (blockIdx.x*28)) + floormod(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1403) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1)] = (float32*)placeholder_9[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1402) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2)] = (float32*)placeholder_9[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1401) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3)] = (float32*)placeholder_9[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1400) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4)] = (float32*)placeholder_9[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1399) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5)] = (float32*)placeholder_9[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1398) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6)] = (float32*)placeholder_9[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 27))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_2*4) + floordiv(threadIdx.x_2, 2)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 256) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[((threadIdx.z_2*16) + (threadIdx.x_2*2))] = (float32*)placeholder_10[(((((floormod(blockIdx.z, 2)*16384) + (threadIdx.z_2*1024)) + (floordiv(threadIdx.x_2, 2)*256)) + (rc.outer*4)) + (floormod(threadIdx.x_2, 2)*2))]
            }
          }
        }
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + 1), 4)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 255) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + 1)] = (float32*)placeholder_10[(((((floormod(blockIdx.z, 2)*16384) + (threadIdx.z_2*1024)) + (floordiv(((threadIdx.x_2*2) + 1), 4)*256)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + 1), 4))]
            }
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
    }
    T_relu_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x)] = max((((float32*)compute[0] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12544)] = max((((float32*)compute[7] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25088)] = max((((float32*)compute[14] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37632)] = max((((float32*)compute[21] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 28)] = max((((float32*)compute[1] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12572)] = max((((float32*)compute[8] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25116)] = max((((float32*)compute[15] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37660)] = max((((float32*)compute[22] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 56)] = max((((float32*)compute[2] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12600)] = max((((float32*)compute[9] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25144)] = max((((float32*)compute[16] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37688)] = max((((float32*)compute[23] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 84)] = max((((float32*)compute[3] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12628)] = max((((float32*)compute[10] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25172)] = max((((float32*)compute[17] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37716)] = max((((float32*)compute[24] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 112)] = max((((float32*)compute[4] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12656)] = max((((float32*)compute[11] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25200)] = max((((float32*)compute[18] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37744)] = max((((float32*)compute[25] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 140)] = max((((float32*)compute[5] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12684)] = max((((float32*)compute[12] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25228)] = max((((float32*)compute[19] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37772)] = max((((float32*)compute[26] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 168)] = max((((float32*)compute[6] + (float32*)placeholder_11[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]) + (float32*)placeholder_8[((floormod(blockIdx.z, 2)*64) + threadIdx.z)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12712)] = max((((float32*)compute[13] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25256)] = max((((float32*)compute[20] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37800)] = max((((float32*)compute[27] + (float32*)placeholder_11[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_8[(((floormod(blockIdx.z, 2)*64) + threadIdx.z) + 48)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 64, 56, 56), 'float32'), ('TENSOR', (256, 64, 1, 1), 'float32'), (1, 1), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, placeholder_8: handle, placeholder_9: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_add_nn_relu_3", "tir.noalias": True}
  buffers = {placeholder_4: Buffer(placeholder_10: handle, float32, [256, 1, 1], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 256, 56, 56], []),
             placeholder: Buffer(placeholder_11: handle, float32, [32, 256, 56, 56], []),
             placeholder_1: Buffer(placeholder_12: handle, float32, [256, 1, 1], []),
             placeholder_3: Buffer(placeholder_13: handle, float32, [256, 64, 1, 1], []),
             placeholder_2: Buffer(placeholder_14: handle, float32, [32, 64, 56, 56], [])}
  buffer_map = {placeholder_9: placeholder, T_relu_1: T_relu, placeholder_7: placeholder_1, placeholder_5: placeholder_2, placeholder_6: placeholder_3, placeholder_8: placeholder_4} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 128;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [32]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [512]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 7;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 7;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 4 {
    compute[0] = 0f32
    compute[4] = 0f32
    compute[8] = 0f32
    compute[12] = 0f32
    compute[16] = 0f32
    compute[20] = 0f32
    compute[24] = 0f32
    compute[28] = 0f32
    compute[2] = 0f32
    compute[6] = 0f32
    compute[10] = 0f32
    compute[14] = 0f32
    compute[18] = 0f32
    compute[22] = 0f32
    compute[26] = 0f32
    compute[30] = 0f32
    compute[1] = 0f32
    compute[5] = 0f32
    compute[9] = 0f32
    compute[13] = 0f32
    compute[17] = 0f32
    compute[21] = 0f32
    compute[25] = 0f32
    compute[29] = 0f32
    compute[3] = 0f32
    compute[7] = 0f32
    compute[11] = 0f32
    compute[15] = 0f32
    compute[19] = 0f32
    compute[23] = 0f32
    compute[27] = 0f32
    compute[31] = 0f32
    for (rc.outer: int32, 0, 8) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 4;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 4) "unroll" {
        pad_temp.shared[((((threadIdx.z_1*64) + (threadIdx.y_1*16)) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_14[((((((((floordiv(blockIdx.z, 4)*200704) + (rc.outer*25088)) + (threadIdx.z_1*3136)) + (blockIdx.y*448)) + (threadIdx.y_1*112)) + (floordiv(((threadIdx.x_1*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8)*56)) + (blockIdx.x*8)) + floormod(((threadIdx.x_1*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8))]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 4;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 4) "unroll" {
        placeholder.shared[((((threadIdx.z_2*64) + (threadIdx.y_2*16)) + (threadIdx.x_2*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_13[((((((floormod(blockIdx.z, 4)*4096) + (threadIdx.z_2*512)) + (threadIdx.y_2*128)) + (floordiv(((threadIdx.x_2*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 8)*64)) + (rc.outer*8)) + floormod(((threadIdx.x_2*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 8))]
      }
      for (rc.inner: int32, 0, 8) "unroll" {
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
      }
    }
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x)] = max(((((float32*)compute[0] + (float32*)placeholder_12[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]) + (float32*)placeholder_10[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]) + (float32*)placeholder_11[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25088)] = max(((((float32*)compute[4] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25088)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50176)] = max(((((float32*)compute[8] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50176)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75264)] = max(((((float32*)compute[12] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75264)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100352)] = max(((((float32*)compute[16] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100352)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125440)] = max(((((float32*)compute[20] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125440)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150528)] = max(((((float32*)compute[24] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150528)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175616)] = max(((((float32*)compute[28] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175616)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 224)] = max(((((float32*)compute[2] + (float32*)placeholder_12[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]) + (float32*)placeholder_10[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 224)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25312)] = max(((((float32*)compute[6] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25312)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50400)] = max(((((float32*)compute[10] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50400)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75488)] = max(((((float32*)compute[14] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75488)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100576)] = max(((((float32*)compute[18] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100576)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125664)] = max(((((float32*)compute[22] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125664)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150752)] = max(((((float32*)compute[26] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150752)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175840)] = max(((((float32*)compute[30] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175840)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 4)] = max(((((float32*)compute[1] + (float32*)placeholder_12[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]) + (float32*)placeholder_10[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 4)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25092)] = max(((((float32*)compute[5] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25092)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50180)] = max(((((float32*)compute[9] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50180)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75268)] = max(((((float32*)compute[13] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75268)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100356)] = max(((((float32*)compute[17] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100356)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125444)] = max(((((float32*)compute[21] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125444)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150532)] = max(((((float32*)compute[25] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150532)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175620)] = max(((((float32*)compute[29] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175620)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 228)] = max(((((float32*)compute[3] + (float32*)placeholder_12[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]) + (float32*)placeholder_10[((floormod(blockIdx.z, 4)*64) + threadIdx.z)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 228)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25316)] = max(((((float32*)compute[7] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25316)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50404)] = max(((((float32*)compute[11] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50404)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75492)] = max(((((float32*)compute[15] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75492)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100580)] = max(((((float32*)compute[19] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100580)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125668)] = max(((((float32*)compute[23] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125668)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150756)] = max(((((float32*)compute[27] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150756)]), 0f32)
    T_relu_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175844)] = max(((((float32*)compute[31] + (float32*)placeholder_12[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]) + (float32*)placeholder_10[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)]) + (float32*)placeholder_11[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175844)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 64, 56, 56), 'float32'), ('TENSOR', (64, 64, 3, 3), 'float32'), (1, 1), (1, 1, 1, 1), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_nn_relu_3", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 64, 56, 56], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [64, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 64, 56, 56], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [64, 64, 3, 3], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 32;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [64]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [448]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 28;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
    compute[0] = 0f32
    compute[2] = 0f32
    compute[4] = 0f32
    compute[6] = 0f32
    compute[8] = 0f32
    compute[10] = 0f32
    compute[12] = 0f32
    compute[14] = 0f32
    compute[16] = 0f32
    compute[18] = 0f32
    compute[20] = 0f32
    compute[22] = 0f32
    compute[24] = 0f32
    compute[26] = 0f32
    compute[28] = 0f32
    compute[30] = 0f32
    compute[32] = 0f32
    compute[34] = 0f32
    compute[36] = 0f32
    compute[38] = 0f32
    compute[40] = 0f32
    compute[42] = 0f32
    compute[44] = 0f32
    compute[46] = 0f32
    compute[48] = 0f32
    compute[50] = 0f32
    compute[52] = 0f32
    compute[54] = 0f32
    compute[56] = 0f32
    compute[58] = 0f32
    compute[60] = 0f32
    compute[62] = 0f32
    compute[1] = 0f32
    compute[3] = 0f32
    compute[5] = 0f32
    compute[7] = 0f32
    compute[9] = 0f32
    compute[11] = 0f32
    compute[13] = 0f32
    compute[15] = 0f32
    compute[17] = 0f32
    compute[19] = 0f32
    compute[21] = 0f32
    compute[23] = 0f32
    compute[25] = 0f32
    compute[27] = 0f32
    compute[29] = 0f32
    compute[31] = 0f32
    compute[33] = 0f32
    compute[35] = 0f32
    compute[37] = 0f32
    compute[39] = 0f32
    compute[41] = 0f32
    compute[43] = 0f32
    compute[45] = 0f32
    compute[47] = 0f32
    compute[49] = 0f32
    compute[51] = 0f32
    compute[53] = 0f32
    compute[55] = 0f32
    compute[57] = 0f32
    compute[59] = 0f32
    compute[61] = 0f32
    compute[63] = 0f32
    for (rc.outer: int32, 0, 16) {
      for (ry.outer: int32, 0, 3) {
        attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          pad_temp.shared[((threadIdx.z_1*224) + (threadIdx.x_1*4))] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer) < 57)) && (1 <= floormod(threadIdx.x_1, 14))), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(threadIdx.x_1, 28)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + (floormod(threadIdx.x_1, 28)*4)) - 57)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 1)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer) < 57)) && (1 <= floormod(((threadIdx.x_1*4) + 1), 56))), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 1), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 1), 112)) - 57)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 2)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer) < 57)) && (1 <= floormod(((threadIdx.x_1*4) + 2), 56))), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 2), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 2), 112)) - 57)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 3)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer) < 57)) && (1 <= floormod(((threadIdx.x_1*4) + 3), 56))), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 3), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 3), 112)) - 57)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          if (((threadIdx.z_2*32) + floordiv((threadIdx.x_2*3), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 256) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[((threadIdx.z_2*128) + (threadIdx.x_2*3))] = (float32*)placeholder_8[(((((threadIdx.z_2*18432) + (floordiv((threadIdx.x_2*3), 4)*576)) + (rc.outer*36)) + (floormod((threadIdx.x_2*3), 4)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 1), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 255) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_8[(((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 1), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 1), 4)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 2), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 254) {
              if (threadIdx.x_2 < 42) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_8[(((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 2), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 2), 4)*9)) + (ry.outer*3))]
              }
            }
          }
        }
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
        attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          pad_temp.shared[((threadIdx.z_1*224) + (threadIdx.x_1*4))] = @tir.if_then_else(((1 <= (((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer) < 57)), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(threadIdx.x_1, 28)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + (floormod(threadIdx.x_1, 28)*4)) - 56)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 1)] = @tir.if_then_else(((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer) < 57)), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 1), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 1), 112)) - 56)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 2)] = @tir.if_then_else(((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer) < 57)), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 2), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 2), 112)) - 56)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 3)] = @tir.if_then_else(((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer) < 57)), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 3), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 3), 112)) - 56)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          if (((threadIdx.z_2*32) + floordiv((threadIdx.x_2*3), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 256) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[((threadIdx.z_2*128) + (threadIdx.x_2*3))] = (float32*)placeholder_8[((((((threadIdx.z_2*18432) + (floordiv((threadIdx.x_2*3), 4)*576)) + (rc.outer*36)) + (floormod((threadIdx.x_2*3), 4)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 1), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 255) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_8[((((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 1), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 1), 4)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 2), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 254) {
              if (threadIdx.x_2 < 42) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_8[((((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 2), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 2), 4)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
        }
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
        attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          pad_temp.shared[((threadIdx.z_1*224) + (threadIdx.x_1*4))] = @tir.if_then_else(((1 <= (((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer) < 57)), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(threadIdx.x_1, 28)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + (floormod(threadIdx.x_1, 28)*4)) - 55)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 1)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer) < 57)) && (floormod(((threadIdx.x_1*4) + 1), 56) < 55)), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 1), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 1), 112)) - 55)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 2)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer) < 57)) && (floormod(((threadIdx.x_1*4) + 2), 56) < 55)), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 2), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 2), 112)) - 55)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 3)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer) < 57)) && (floormod(((threadIdx.x_1*4) + 3), 56) < 55)), (float32*)placeholder_7[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 3), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 3), 112)) - 55)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          if (((threadIdx.z_2*32) + floordiv((threadIdx.x_2*3), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 256) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[((threadIdx.z_2*128) + (threadIdx.x_2*3))] = (float32*)placeholder_8[((((((threadIdx.z_2*18432) + (floordiv((threadIdx.x_2*3), 4)*576)) + (rc.outer*36)) + (floormod((threadIdx.x_2*3), 4)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 1), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 255) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_8[((((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 1), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 1), 4)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 2), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 254) {
              if (threadIdx.x_2 < 42) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_8[((((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 2), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 2), 4)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
        }
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
      }
    }
    T_relu_2[((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x)] = max(((float32*)compute[0] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 6272)] = max(((float32*)compute[2] + (float32*)placeholder_6[(threadIdx.z + 2)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 12544)] = max(((float32*)compute[4] + (float32*)placeholder_6[(threadIdx.z + 4)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 18816)] = max(((float32*)compute[6] + (float32*)placeholder_6[(threadIdx.z + 6)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 25088)] = max(((float32*)compute[8] + (float32*)placeholder_6[(threadIdx.z + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 31360)] = max(((float32*)compute[10] + (float32*)placeholder_6[(threadIdx.z + 10)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 37632)] = max(((float32*)compute[12] + (float32*)placeholder_6[(threadIdx.z + 12)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 43904)] = max(((float32*)compute[14] + (float32*)placeholder_6[(threadIdx.z + 14)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 50176)] = max(((float32*)compute[16] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56448)] = max(((float32*)compute[18] + (float32*)placeholder_6[(threadIdx.z + 18)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 62720)] = max(((float32*)compute[20] + (float32*)placeholder_6[(threadIdx.z + 20)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 68992)] = max(((float32*)compute[22] + (float32*)placeholder_6[(threadIdx.z + 22)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 75264)] = max(((float32*)compute[24] + (float32*)placeholder_6[(threadIdx.z + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 81536)] = max(((float32*)compute[26] + (float32*)placeholder_6[(threadIdx.z + 26)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 87808)] = max(((float32*)compute[28] + (float32*)placeholder_6[(threadIdx.z + 28)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 94080)] = max(((float32*)compute[30] + (float32*)placeholder_6[(threadIdx.z + 30)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 100352)] = max(((float32*)compute[32] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 106624)] = max(((float32*)compute[34] + (float32*)placeholder_6[(threadIdx.z + 34)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 112896)] = max(((float32*)compute[36] + (float32*)placeholder_6[(threadIdx.z + 36)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 119168)] = max(((float32*)compute[38] + (float32*)placeholder_6[(threadIdx.z + 38)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 125440)] = max(((float32*)compute[40] + (float32*)placeholder_6[(threadIdx.z + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 131712)] = max(((float32*)compute[42] + (float32*)placeholder_6[(threadIdx.z + 42)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 137984)] = max(((float32*)compute[44] + (float32*)placeholder_6[(threadIdx.z + 44)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 144256)] = max(((float32*)compute[46] + (float32*)placeholder_6[(threadIdx.z + 46)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 150528)] = max(((float32*)compute[48] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 156800)] = max(((float32*)compute[50] + (float32*)placeholder_6[(threadIdx.z + 50)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 163072)] = max(((float32*)compute[52] + (float32*)placeholder_6[(threadIdx.z + 52)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 169344)] = max(((float32*)compute[54] + (float32*)placeholder_6[(threadIdx.z + 54)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 175616)] = max(((float32*)compute[56] + (float32*)placeholder_6[(threadIdx.z + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 181888)] = max(((float32*)compute[58] + (float32*)placeholder_6[(threadIdx.z + 58)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 188160)] = max(((float32*)compute[60] + (float32*)placeholder_6[(threadIdx.z + 60)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 194432)] = max(((float32*)compute[62] + (float32*)placeholder_6[(threadIdx.z + 62)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56)] = max(((float32*)compute[1] + (float32*)placeholder_6[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 6328)] = max(((float32*)compute[3] + (float32*)placeholder_6[(threadIdx.z + 2)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 12600)] = max(((float32*)compute[5] + (float32*)placeholder_6[(threadIdx.z + 4)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 18872)] = max(((float32*)compute[7] + (float32*)placeholder_6[(threadIdx.z + 6)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 25144)] = max(((float32*)compute[9] + (float32*)placeholder_6[(threadIdx.z + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 31416)] = max(((float32*)compute[11] + (float32*)placeholder_6[(threadIdx.z + 10)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 37688)] = max(((float32*)compute[13] + (float32*)placeholder_6[(threadIdx.z + 12)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 43960)] = max(((float32*)compute[15] + (float32*)placeholder_6[(threadIdx.z + 14)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 50232)] = max(((float32*)compute[17] + (float32*)placeholder_6[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56504)] = max(((float32*)compute[19] + (float32*)placeholder_6[(threadIdx.z + 18)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 62776)] = max(((float32*)compute[21] + (float32*)placeholder_6[(threadIdx.z + 20)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 69048)] = max(((float32*)compute[23] + (float32*)placeholder_6[(threadIdx.z + 22)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 75320)] = max(((float32*)compute[25] + (float32*)placeholder_6[(threadIdx.z + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 81592)] = max(((float32*)compute[27] + (float32*)placeholder_6[(threadIdx.z + 26)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 87864)] = max(((float32*)compute[29] + (float32*)placeholder_6[(threadIdx.z + 28)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 94136)] = max(((float32*)compute[31] + (float32*)placeholder_6[(threadIdx.z + 30)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 100408)] = max(((float32*)compute[33] + (float32*)placeholder_6[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 106680)] = max(((float32*)compute[35] + (float32*)placeholder_6[(threadIdx.z + 34)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 112952)] = max(((float32*)compute[37] + (float32*)placeholder_6[(threadIdx.z + 36)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 119224)] = max(((float32*)compute[39] + (float32*)placeholder_6[(threadIdx.z + 38)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 125496)] = max(((float32*)compute[41] + (float32*)placeholder_6[(threadIdx.z + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 131768)] = max(((float32*)compute[43] + (float32*)placeholder_6[(threadIdx.z + 42)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 138040)] = max(((float32*)compute[45] + (float32*)placeholder_6[(threadIdx.z + 44)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 144312)] = max(((float32*)compute[47] + (float32*)placeholder_6[(threadIdx.z + 46)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 150584)] = max(((float32*)compute[49] + (float32*)placeholder_6[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 156856)] = max(((float32*)compute[51] + (float32*)placeholder_6[(threadIdx.z + 50)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 163128)] = max(((float32*)compute[53] + (float32*)placeholder_6[(threadIdx.z + 52)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 169400)] = max(((float32*)compute[55] + (float32*)placeholder_6[(threadIdx.z + 54)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 175672)] = max(((float32*)compute[57] + (float32*)placeholder_6[(threadIdx.z + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 181944)] = max(((float32*)compute[59] + (float32*)placeholder_6[(threadIdx.z + 58)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 188216)] = max(((float32*)compute[61] + (float32*)placeholder_6[(threadIdx.z + 60)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 194488)] = max(((float32*)compute[63] + (float32*)placeholder_6[(threadIdx.z + 62)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 256, 56, 56), 'float32'), ('TENSOR', (64, 256, 1, 1), 'float32'), (1, 1), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu_6", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 64, 56, 56], []),
             placeholder_2: Buffer(placeholder_8: handle, float32, [32, 256, 56, 56], []),
             placeholder: Buffer(placeholder_9: handle, float32, [64, 256, 1, 1], []),
             placeholder_3: Buffer(placeholder_10: handle, float32, [64, 1, 1], []),
             placeholder_1: Buffer(placeholder_11: handle, float32, [64, 1, 1], [])}
  buffer_map = {placeholder_5: placeholder, placeholder_6: placeholder_1, placeholder_4: placeholder_2, placeholder_7: placeholder_3, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 32;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [16]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [448]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 28;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[4] = 0f32
    compute[8] = 0f32
    compute[12] = 0f32
    compute[2] = 0f32
    compute[6] = 0f32
    compute[10] = 0f32
    compute[14] = 0f32
    compute[1] = 0f32
    compute[5] = 0f32
    compute[9] = 0f32
    compute[13] = 0f32
    compute[3] = 0f32
    compute[7] = 0f32
    compute[11] = 0f32
    compute[15] = 0f32
    for (rc.outer: int32, 0, 32) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        pad_temp.shared[((threadIdx.z_1*28) + (threadIdx.x_1*2))] = (float32*)placeholder_8[(((((((blockIdx.z*802816) + (rc.outer*25088)) + (floordiv(threadIdx.z_1, 2)*3136)) + (blockIdx.y*112)) + (floormod(threadIdx.z_1, 2)*56)) + (blockIdx.x*28)) + (threadIdx.x_1*2))]
        pad_temp.shared[(((threadIdx.z_1*28) + (threadIdx.x_1*2)) + 1)] = (float32*)placeholder_8[((((((((blockIdx.z*802816) + (rc.outer*25088)) + (floordiv(threadIdx.z_1, 2)*3136)) + (blockIdx.y*112)) + (floormod(threadIdx.z_1, 2)*56)) + (blockIdx.x*28)) + (threadIdx.x_1*2)) + 1)]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_2*4) + floordiv((threadIdx.x_2*3), 8)) < 64) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*3)) < 512) {
            if (threadIdx.x_2 < 11) {
              placeholder.shared[((threadIdx.z_2*32) + (threadIdx.x_2*3))] = (float32*)placeholder_9[((((threadIdx.z_2*1024) + (floordiv((threadIdx.x_2*3), 8)*256)) + (rc.outer*8)) + floormod((threadIdx.x_2*3), 8))]
            }
          }
        }
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*3) + 1), 8)) < 64) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*3)) < 511) {
            if (threadIdx.x_2 < 11) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_9[((((threadIdx.z_2*1024) + (floordiv(((threadIdx.x_2*3) + 1), 8)*256)) + (rc.outer*8)) + floormod(((threadIdx.x_2*3) + 1), 8))]
            }
          }
        }
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*3) + 2), 8)) < 64) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*3)) < 510) {
            if (threadIdx.x_2 < 10) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_9[((((threadIdx.z_2*1024) + (floordiv(((threadIdx.x_2*3) + 2), 8)*256)) + (rc.outer*8)) + floormod(((threadIdx.x_2*3) + 2), 8))]
            }
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
    }
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x)] = max((((float32*)compute[0] + (float32*)placeholder_11[threadIdx.z]) + (float32*)placeholder_10[threadIdx.z]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 50176)] = max((((float32*)compute[4] + (float32*)placeholder_11[(threadIdx.z + 16)]) + (float32*)placeholder_10[(threadIdx.z + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 100352)] = max((((float32*)compute[8] + (float32*)placeholder_11[(threadIdx.z + 32)]) + (float32*)placeholder_10[(threadIdx.z + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 150528)] = max((((float32*)compute[12] + (float32*)placeholder_11[(threadIdx.z + 48)]) + (float32*)placeholder_10[(threadIdx.z + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 56)] = max((((float32*)compute[2] + (float32*)placeholder_11[threadIdx.z]) + (float32*)placeholder_10[threadIdx.z]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 50232)] = max((((float32*)compute[6] + (float32*)placeholder_11[(threadIdx.z + 16)]) + (float32*)placeholder_10[(threadIdx.z + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 100408)] = max((((float32*)compute[10] + (float32*)placeholder_11[(threadIdx.z + 32)]) + (float32*)placeholder_10[(threadIdx.z + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 150584)] = max((((float32*)compute[14] + (float32*)placeholder_11[(threadIdx.z + 48)]) + (float32*)placeholder_10[(threadIdx.z + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 14)] = max((((float32*)compute[1] + (float32*)placeholder_11[threadIdx.z]) + (float32*)placeholder_10[threadIdx.z]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 50190)] = max((((float32*)compute[5] + (float32*)placeholder_11[(threadIdx.z + 16)]) + (float32*)placeholder_10[(threadIdx.z + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 100366)] = max((((float32*)compute[9] + (float32*)placeholder_11[(threadIdx.z + 32)]) + (float32*)placeholder_10[(threadIdx.z + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 150542)] = max((((float32*)compute[13] + (float32*)placeholder_11[(threadIdx.z + 48)]) + (float32*)placeholder_10[(threadIdx.z + 48)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 70)] = max((((float32*)compute[3] + (float32*)placeholder_11[threadIdx.z]) + (float32*)placeholder_10[threadIdx.z]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 50246)] = max((((float32*)compute[7] + (float32*)placeholder_11[(threadIdx.z + 16)]) + (float32*)placeholder_10[(threadIdx.z + 16)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 100422)] = max((((float32*)compute[11] + (float32*)placeholder_11[(threadIdx.z + 32)]) + (float32*)placeholder_10[(threadIdx.z + 32)]), 0f32)
    T_relu_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 150598)] = max((((float32*)compute[15] + (float32*)placeholder_11[(threadIdx.z + 48)]) + (float32*)placeholder_10[(threadIdx.z + 48)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 64, 56, 56), 'float32'), ('TENSOR', (64, 64, 1, 1), 'float32'), (1, 1), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_4: handle, placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_add_nn_relu_7", "tir.noalias": True}
  buffers = {placeholder_3: Buffer(placeholder_8: handle, float32, [64, 1, 1], []),
             placeholder_2: Buffer(placeholder_9: handle, float32, [64, 1, 1], []),
             placeholder_1: Buffer(placeholder_10: handle, float32, [32, 64, 56, 56], []),
             T_relu: Buffer(T_relu_2: handle, float32, [32, 64, 56, 56], []),
             placeholder: Buffer(placeholder_11: handle, float32, [64, 64, 1, 1], [])}
  buffer_map = {T_relu_1: T_relu, placeholder_5: placeholder, placeholder_4: placeholder_1, placeholder_6: placeholder_2, placeholder_7: placeholder_3} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 32;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [64]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [448]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 28;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
    compute[0] = 0f32
    compute[2] = 0f32
    compute[4] = 0f32
    compute[6] = 0f32
    compute[8] = 0f32
    compute[10] = 0f32
    compute[12] = 0f32
    compute[14] = 0f32
    compute[16] = 0f32
    compute[18] = 0f32
    compute[20] = 0f32
    compute[22] = 0f32
    compute[24] = 0f32
    compute[26] = 0f32
    compute[28] = 0f32
    compute[30] = 0f32
    compute[32] = 0f32
    compute[34] = 0f32
    compute[36] = 0f32
    compute[38] = 0f32
    compute[40] = 0f32
    compute[42] = 0f32
    compute[44] = 0f32
    compute[46] = 0f32
    compute[48] = 0f32
    compute[50] = 0f32
    compute[52] = 0f32
    compute[54] = 0f32
    compute[56] = 0f32
    compute[58] = 0f32
    compute[60] = 0f32
    compute[62] = 0f32
    compute[1] = 0f32
    compute[3] = 0f32
    compute[5] = 0f32
    compute[7] = 0f32
    compute[9] = 0f32
    compute[11] = 0f32
    compute[13] = 0f32
    compute[15] = 0f32
    compute[17] = 0f32
    compute[19] = 0f32
    compute[21] = 0f32
    compute[23] = 0f32
    compute[25] = 0f32
    compute[27] = 0f32
    compute[29] = 0f32
    compute[31] = 0f32
    compute[33] = 0f32
    compute[35] = 0f32
    compute[37] = 0f32
    compute[39] = 0f32
    compute[41] = 0f32
    compute[43] = 0f32
    compute[45] = 0f32
    compute[47] = 0f32
    compute[49] = 0f32
    compute[51] = 0f32
    compute[53] = 0f32
    compute[55] = 0f32
    compute[57] = 0f32
    compute[59] = 0f32
    compute[61] = 0f32
    compute[63] = 0f32
    for (rc.outer: int32, 0, 16) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
        pad_temp.shared[((threadIdx.z_1*224) + (threadIdx.x_1*4))] = (float32*)placeholder_10[((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(threadIdx.x_1, 28)*3136)) + (blockIdx.y*112)) + (floormod(threadIdx.x_1, 28)*4))]
        pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 1)] = (float32*)placeholder_10[((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 1), 112)*3136)) + (blockIdx.y*112)) + floormod(((threadIdx.x_1*4) + 1), 112))]
        pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 2)] = (float32*)placeholder_10[((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 2), 112)*3136)) + (blockIdx.y*112)) + floormod(((threadIdx.x_1*4) + 2), 112))]
        pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 3)] = (float32*)placeholder_10[((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 3), 112)*3136)) + (blockIdx.y*112)) + floormod(((threadIdx.x_1*4) + 3), 112))]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
        if (((threadIdx.z_2*32) + floordiv((threadIdx.x_2*3), 4)) < 64) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 256) {
            if (threadIdx.x_2 < 43) {
              placeholder.shared[((threadIdx.z_2*128) + (threadIdx.x_2*3))] = (float32*)placeholder_11[((((threadIdx.z_2*2048) + (floordiv((threadIdx.x_2*3), 4)*64)) + (rc.outer*4)) + floormod((threadIdx.x_2*3), 4))]
            }
          }
        }
        if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 1), 4)) < 64) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 255) {
            if (threadIdx.x_2 < 43) {
              placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_11[((((threadIdx.z_2*2048) + (floordiv(((threadIdx.x_2*3) + 1), 4)*64)) + (rc.outer*4)) + floormod(((threadIdx.x_2*3) + 1), 4))]
            }
          }
        }
        if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 2), 4)) < 64) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 254) {
            if (threadIdx.x_2 < 42) {
              placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_11[((((threadIdx.z_2*2048) + (floordiv(((threadIdx.x_2*3) + 2), 4)*64)) + (rc.outer*4)) + floormod(((threadIdx.x_2*3) + 2), 4))]
            }
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
      compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
      compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
      compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
      compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
      compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
      compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
      compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
      compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
      compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
      compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
      compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
      compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
      compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
      compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
      compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
      compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
      compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
      compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
      compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
      compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
      compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
      compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
      compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
      compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
      compute[56] = ((float32*)compute[56] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
      compute[58] = ((float32*)compute[58] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
      compute[60] = ((float32*)compute[60] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
      compute[62] = ((float32*)compute[62] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
      compute[57] = ((float32*)compute[57] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
      compute[59] = ((float32*)compute[59] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
      compute[61] = ((float32*)compute[61] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
      compute[63] = ((float32*)compute[63] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
    }
    T_relu_2[((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x)] = max((((float32*)compute[0] + (float32*)placeholder_9[threadIdx.z]) + (float32*)placeholder_8[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 6272)] = max((((float32*)compute[2] + (float32*)placeholder_9[(threadIdx.z + 2)]) + (float32*)placeholder_8[(threadIdx.z + 2)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 12544)] = max((((float32*)compute[4] + (float32*)placeholder_9[(threadIdx.z + 4)]) + (float32*)placeholder_8[(threadIdx.z + 4)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 18816)] = max((((float32*)compute[6] + (float32*)placeholder_9[(threadIdx.z + 6)]) + (float32*)placeholder_8[(threadIdx.z + 6)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 25088)] = max((((float32*)compute[8] + (float32*)placeholder_9[(threadIdx.z + 8)]) + (float32*)placeholder_8[(threadIdx.z + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 31360)] = max((((float32*)compute[10] + (float32*)placeholder_9[(threadIdx.z + 10)]) + (float32*)placeholder_8[(threadIdx.z + 10)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 37632)] = max((((float32*)compute[12] + (float32*)placeholder_9[(threadIdx.z + 12)]) + (float32*)placeholder_8[(threadIdx.z + 12)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 43904)] = max((((float32*)compute[14] + (float32*)placeholder_9[(threadIdx.z + 14)]) + (float32*)placeholder_8[(threadIdx.z + 14)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 50176)] = max((((float32*)compute[16] + (float32*)placeholder_9[(threadIdx.z + 16)]) + (float32*)placeholder_8[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56448)] = max((((float32*)compute[18] + (float32*)placeholder_9[(threadIdx.z + 18)]) + (float32*)placeholder_8[(threadIdx.z + 18)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 62720)] = max((((float32*)compute[20] + (float32*)placeholder_9[(threadIdx.z + 20)]) + (float32*)placeholder_8[(threadIdx.z + 20)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 68992)] = max((((float32*)compute[22] + (float32*)placeholder_9[(threadIdx.z + 22)]) + (float32*)placeholder_8[(threadIdx.z + 22)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 75264)] = max((((float32*)compute[24] + (float32*)placeholder_9[(threadIdx.z + 24)]) + (float32*)placeholder_8[(threadIdx.z + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 81536)] = max((((float32*)compute[26] + (float32*)placeholder_9[(threadIdx.z + 26)]) + (float32*)placeholder_8[(threadIdx.z + 26)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 87808)] = max((((float32*)compute[28] + (float32*)placeholder_9[(threadIdx.z + 28)]) + (float32*)placeholder_8[(threadIdx.z + 28)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 94080)] = max((((float32*)compute[30] + (float32*)placeholder_9[(threadIdx.z + 30)]) + (float32*)placeholder_8[(threadIdx.z + 30)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 100352)] = max((((float32*)compute[32] + (float32*)placeholder_9[(threadIdx.z + 32)]) + (float32*)placeholder_8[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 106624)] = max((((float32*)compute[34] + (float32*)placeholder_9[(threadIdx.z + 34)]) + (float32*)placeholder_8[(threadIdx.z + 34)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 112896)] = max((((float32*)compute[36] + (float32*)placeholder_9[(threadIdx.z + 36)]) + (float32*)placeholder_8[(threadIdx.z + 36)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 119168)] = max((((float32*)compute[38] + (float32*)placeholder_9[(threadIdx.z + 38)]) + (float32*)placeholder_8[(threadIdx.z + 38)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 125440)] = max((((float32*)compute[40] + (float32*)placeholder_9[(threadIdx.z + 40)]) + (float32*)placeholder_8[(threadIdx.z + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 131712)] = max((((float32*)compute[42] + (float32*)placeholder_9[(threadIdx.z + 42)]) + (float32*)placeholder_8[(threadIdx.z + 42)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 137984)] = max((((float32*)compute[44] + (float32*)placeholder_9[(threadIdx.z + 44)]) + (float32*)placeholder_8[(threadIdx.z + 44)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 144256)] = max((((float32*)compute[46] + (float32*)placeholder_9[(threadIdx.z + 46)]) + (float32*)placeholder_8[(threadIdx.z + 46)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 150528)] = max((((float32*)compute[48] + (float32*)placeholder_9[(threadIdx.z + 48)]) + (float32*)placeholder_8[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 156800)] = max((((float32*)compute[50] + (float32*)placeholder_9[(threadIdx.z + 50)]) + (float32*)placeholder_8[(threadIdx.z + 50)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 163072)] = max((((float32*)compute[52] + (float32*)placeholder_9[(threadIdx.z + 52)]) + (float32*)placeholder_8[(threadIdx.z + 52)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 169344)] = max((((float32*)compute[54] + (float32*)placeholder_9[(threadIdx.z + 54)]) + (float32*)placeholder_8[(threadIdx.z + 54)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 175616)] = max((((float32*)compute[56] + (float32*)placeholder_9[(threadIdx.z + 56)]) + (float32*)placeholder_8[(threadIdx.z + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 181888)] = max((((float32*)compute[58] + (float32*)placeholder_9[(threadIdx.z + 58)]) + (float32*)placeholder_8[(threadIdx.z + 58)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 188160)] = max((((float32*)compute[60] + (float32*)placeholder_9[(threadIdx.z + 60)]) + (float32*)placeholder_8[(threadIdx.z + 60)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 194432)] = max((((float32*)compute[62] + (float32*)placeholder_9[(threadIdx.z + 62)]) + (float32*)placeholder_8[(threadIdx.z + 62)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56)] = max((((float32*)compute[1] + (float32*)placeholder_9[threadIdx.z]) + (float32*)placeholder_8[threadIdx.z]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 6328)] = max((((float32*)compute[3] + (float32*)placeholder_9[(threadIdx.z + 2)]) + (float32*)placeholder_8[(threadIdx.z + 2)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 12600)] = max((((float32*)compute[5] + (float32*)placeholder_9[(threadIdx.z + 4)]) + (float32*)placeholder_8[(threadIdx.z + 4)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 18872)] = max((((float32*)compute[7] + (float32*)placeholder_9[(threadIdx.z + 6)]) + (float32*)placeholder_8[(threadIdx.z + 6)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 25144)] = max((((float32*)compute[9] + (float32*)placeholder_9[(threadIdx.z + 8)]) + (float32*)placeholder_8[(threadIdx.z + 8)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 31416)] = max((((float32*)compute[11] + (float32*)placeholder_9[(threadIdx.z + 10)]) + (float32*)placeholder_8[(threadIdx.z + 10)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 37688)] = max((((float32*)compute[13] + (float32*)placeholder_9[(threadIdx.z + 12)]) + (float32*)placeholder_8[(threadIdx.z + 12)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 43960)] = max((((float32*)compute[15] + (float32*)placeholder_9[(threadIdx.z + 14)]) + (float32*)placeholder_8[(threadIdx.z + 14)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 50232)] = max((((float32*)compute[17] + (float32*)placeholder_9[(threadIdx.z + 16)]) + (float32*)placeholder_8[(threadIdx.z + 16)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56504)] = max((((float32*)compute[19] + (float32*)placeholder_9[(threadIdx.z + 18)]) + (float32*)placeholder_8[(threadIdx.z + 18)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 62776)] = max((((float32*)compute[21] + (float32*)placeholder_9[(threadIdx.z + 20)]) + (float32*)placeholder_8[(threadIdx.z + 20)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 69048)] = max((((float32*)compute[23] + (float32*)placeholder_9[(threadIdx.z + 22)]) + (float32*)placeholder_8[(threadIdx.z + 22)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 75320)] = max((((float32*)compute[25] + (float32*)placeholder_9[(threadIdx.z + 24)]) + (float32*)placeholder_8[(threadIdx.z + 24)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 81592)] = max((((float32*)compute[27] + (float32*)placeholder_9[(threadIdx.z + 26)]) + (float32*)placeholder_8[(threadIdx.z + 26)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 87864)] = max((((float32*)compute[29] + (float32*)placeholder_9[(threadIdx.z + 28)]) + (float32*)placeholder_8[(threadIdx.z + 28)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 94136)] = max((((float32*)compute[31] + (float32*)placeholder_9[(threadIdx.z + 30)]) + (float32*)placeholder_8[(threadIdx.z + 30)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 100408)] = max((((float32*)compute[33] + (float32*)placeholder_9[(threadIdx.z + 32)]) + (float32*)placeholder_8[(threadIdx.z + 32)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 106680)] = max((((float32*)compute[35] + (float32*)placeholder_9[(threadIdx.z + 34)]) + (float32*)placeholder_8[(threadIdx.z + 34)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 112952)] = max((((float32*)compute[37] + (float32*)placeholder_9[(threadIdx.z + 36)]) + (float32*)placeholder_8[(threadIdx.z + 36)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 119224)] = max((((float32*)compute[39] + (float32*)placeholder_9[(threadIdx.z + 38)]) + (float32*)placeholder_8[(threadIdx.z + 38)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 125496)] = max((((float32*)compute[41] + (float32*)placeholder_9[(threadIdx.z + 40)]) + (float32*)placeholder_8[(threadIdx.z + 40)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 131768)] = max((((float32*)compute[43] + (float32*)placeholder_9[(threadIdx.z + 42)]) + (float32*)placeholder_8[(threadIdx.z + 42)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 138040)] = max((((float32*)compute[45] + (float32*)placeholder_9[(threadIdx.z + 44)]) + (float32*)placeholder_8[(threadIdx.z + 44)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 144312)] = max((((float32*)compute[47] + (float32*)placeholder_9[(threadIdx.z + 46)]) + (float32*)placeholder_8[(threadIdx.z + 46)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 150584)] = max((((float32*)compute[49] + (float32*)placeholder_9[(threadIdx.z + 48)]) + (float32*)placeholder_8[(threadIdx.z + 48)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 156856)] = max((((float32*)compute[51] + (float32*)placeholder_9[(threadIdx.z + 50)]) + (float32*)placeholder_8[(threadIdx.z + 50)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 163128)] = max((((float32*)compute[53] + (float32*)placeholder_9[(threadIdx.z + 52)]) + (float32*)placeholder_8[(threadIdx.z + 52)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 169400)] = max((((float32*)compute[55] + (float32*)placeholder_9[(threadIdx.z + 54)]) + (float32*)placeholder_8[(threadIdx.z + 54)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 175672)] = max((((float32*)compute[57] + (float32*)placeholder_9[(threadIdx.z + 56)]) + (float32*)placeholder_8[(threadIdx.z + 56)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 181944)] = max((((float32*)compute[59] + (float32*)placeholder_9[(threadIdx.z + 58)]) + (float32*)placeholder_8[(threadIdx.z + 58)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 188216)] = max((((float32*)compute[61] + (float32*)placeholder_9[(threadIdx.z + 60)]) + (float32*)placeholder_8[(threadIdx.z + 60)]), 0f32)
    T_relu_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 194488)] = max((((float32*)compute[63] + (float32*)placeholder_9[(threadIdx.z + 62)]) + (float32*)placeholder_8[(threadIdx.z + 62)]), 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation pool.cuda for op nn.max_pool2d
primfn(placeholder_1: handle, tensor_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_max_pool2d", "tir.noalias": True}
  buffers = {tensor: Buffer(tensor_2: handle, float32, [32, 64, 56, 56], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 64, 112, 112], [])}
  buffer_map = {placeholder_1: placeholder, tensor_1: tensor} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6272;
  attr [tensor.local: handle] "storage_scope" = "local";
  allocate(tensor.local, float32, [1]);
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    tensor.local[0] = -3.40282e+38f32
    for (rv: int32, 0, 3) {
      for (rv_1: int32, 0, 3) {
        tensor.local[0] = max((float32*)tensor.local[0], @tir.if_then_else(((1 <= ((floordiv(floormod(((blockIdx.x*1024) + threadIdx.x), 3136), 56)*2) + rv)) && (1 <= ((floormod(((blockIdx.x*1024) + threadIdx.x), 56)*2) + rv_1))), (float32*)placeholder_2[(((((floordiv(((blockIdx.x*1024) + threadIdx.x), 56)*224) + (rv*112)) + (floormod(((blockIdx.x*1024) + threadIdx.x), 56)*2)) + rv_1) - 113)], -3.40282e+38f32, dtype=float32))
      }
    }
    tensor_2[((blockIdx.x*1024) + threadIdx.x)] = (float32*)tensor.local[0]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 3, 224, 224), 'float32'), ('TENSOR', (64, 3, 7, 7), 'float32'), (2, 2), (3, 3, 3, 3), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_nn_relu_4", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 64, 112, 112], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [64, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 3, 224, 224], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [64, 3, 7, 7], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [16]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1155]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [96]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 28;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 4;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 28 {
    for (yy.init: int32, 0, 2) {
      compute[yy.init] = 0f32
      compute[(yy.init + 4)] = 0f32
      compute[(yy.init + 8)] = 0f32
      compute[(yy.init + 12)] = 0f32
      compute[(yy.init + 2)] = 0f32
      compute[(yy.init + 6)] = 0f32
      compute[(yy.init + 10)] = 0f32
      compute[(yy.init + 14)] = 0f32
    }
    for (ry.outer: int32, 0, 7) {
      for (rx.outer: int32, 0, 7) {
        attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 28;
        for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 6) {
          if ((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 1155) {
            if (((threadIdx.x_1*6) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 145) {
              pad_temp.shared[(((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = @tir.if_then_else(((((3 <= (((blockIdx.y*8) + floordiv(floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 385), 55)) + ry.outer)) && ((((blockIdx.y*8) + floordiv(floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 385), 55)) + ry.outer) < 227)) && (3 <= (((blockIdx.x*56) + rx.outer) + floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 55)))) && ((((blockIdx.x*56) + rx.outer) + floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 55)) < 227)), (float32*)placeholder_7[(((((((((floordiv(blockIdx.z, 2)*150528) + (floordiv((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 385)*50176)) + (blockIdx.y*1792)) + (floordiv(floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 385), 55)*224)) + (ry.outer*224)) + (blockIdx.x*56)) + rx.outer) + floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 55)) - 675)], 0f32, dtype=float32)
            }
          }
        }
        attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 28;
        if (((threadIdx.z_2*4) + floordiv(threadIdx.x_2, 3)) < 32) {
          if (((threadIdx.z_2*12) + threadIdx.x_2) < 96) {
            if (threadIdx.x_2 < 12) {
              placeholder.shared[((threadIdx.z_2*12) + threadIdx.x_2)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.x_2*49)) + (ry.outer*7)) + rx.outer)]
            }
          }
        }
        for (rc.inner: int32, 0, 3) {
          for (yy: int32, 0, 2) {
            compute[yy] = ((float32*)compute[yy] + ((float32*)pad_temp.shared[(((rc.inner*385) + (yy*110)) + (threadIdx.x*2))]*(float32*)placeholder.shared[((threadIdx.z*3) + rc.inner)]))
            compute[(yy + 4)] = ((float32*)compute[(yy + 4)] + ((float32*)pad_temp.shared[(((rc.inner*385) + (yy*110)) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 24)]))
            compute[(yy + 8)] = ((float32*)compute[(yy + 8)] + ((float32*)pad_temp.shared[(((rc.inner*385) + (yy*110)) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 48)]))
            compute[(yy + 12)] = ((float32*)compute[(yy + 12)] + ((float32*)pad_temp.shared[(((rc.inner*385) + (yy*110)) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 72)]))
            compute[(yy + 2)] = ((float32*)compute[(yy + 2)] + ((float32*)pad_temp.shared[((((rc.inner*385) + (yy*110)) + (threadIdx.x*2)) + 220)]*(float32*)placeholder.shared[((threadIdx.z*3) + rc.inner)]))
            compute[(yy + 6)] = ((float32*)compute[(yy + 6)] + ((float32*)pad_temp.shared[((((rc.inner*385) + (yy*110)) + (threadIdx.x*2)) + 220)]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 24)]))
            compute[(yy + 10)] = ((float32*)compute[(yy + 10)] + ((float32*)pad_temp.shared[((((rc.inner*385) + (yy*110)) + (threadIdx.x*2)) + 220)]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 48)]))
            compute[(yy + 14)] = ((float32*)compute[(yy + 14)] + ((float32*)pad_temp.shared[((((rc.inner*385) + (yy*110)) + (threadIdx.x*2)) + 220)]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 72)]))
          }
        }
      }
    }
    for (ax2.inner.inner.inner: int32, 0, 2) {
      T_relu_2[((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (ax2.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x)] = max(((float32*)compute[ax2.inner.inner.inner] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*32) + threadIdx.z)]), 0f32)
      T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (ax2.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 100352)] = max(((float32*)compute[(ax2.inner.inner.inner + 4)] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*32) + threadIdx.z) + 8)]), 0f32)
      T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (ax2.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 200704)] = max(((float32*)compute[(ax2.inner.inner.inner + 8)] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*32) + threadIdx.z) + 16)]), 0f32)
      T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (ax2.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 301056)] = max(((float32*)compute[(ax2.inner.inner.inner + 12)] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*32) + threadIdx.z) + 24)]), 0f32)
      T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (ax2.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 224)] = max(((float32*)compute[(ax2.inner.inner.inner + 2)] + (float32*)placeholder_6[((floormod(blockIdx.z, 2)*32) + threadIdx.z)]), 0f32)
      T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (ax2.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 100576)] = max(((float32*)compute[(ax2.inner.inner.inner + 6)] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*32) + threadIdx.z) + 8)]), 0f32)
      T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (ax2.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 200928)] = max(((float32*)compute[(ax2.inner.inner.inner + 10)] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*32) + threadIdx.z) + 16)]), 0f32)
      T_relu_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (ax2.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 301280)] = max(((float32*)compute[(ax2.inner.inner.inner + 14)] + (float32*)placeholder_6[(((floormod(blockIdx.z, 2)*32) + threadIdx.z) + 24)]), 0f32)
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 256, 56, 56], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [256, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 64, 56, 56], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [256, 64, 1, 1], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_add_1: T_add} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 128;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [32]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [512]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 7;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 7;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 4 {
    compute[0] = 0f32
    compute[4] = 0f32
    compute[8] = 0f32
    compute[12] = 0f32
    compute[16] = 0f32
    compute[20] = 0f32
    compute[24] = 0f32
    compute[28] = 0f32
    compute[2] = 0f32
    compute[6] = 0f32
    compute[10] = 0f32
    compute[14] = 0f32
    compute[18] = 0f32
    compute[22] = 0f32
    compute[26] = 0f32
    compute[30] = 0f32
    compute[1] = 0f32
    compute[5] = 0f32
    compute[9] = 0f32
    compute[13] = 0f32
    compute[17] = 0f32
    compute[21] = 0f32
    compute[25] = 0f32
    compute[29] = 0f32
    compute[3] = 0f32
    compute[7] = 0f32
    compute[11] = 0f32
    compute[15] = 0f32
    compute[19] = 0f32
    compute[23] = 0f32
    compute[27] = 0f32
    compute[31] = 0f32
    for (rc.outer: int32, 0, 8) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 4;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 4) "unroll" {
        pad_temp.shared[((((threadIdx.z_1*64) + (threadIdx.y_1*16)) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_7[((((((((floordiv(blockIdx.z, 4)*200704) + (rc.outer*25088)) + (threadIdx.z_1*3136)) + (blockIdx.y*448)) + (threadIdx.y_1*112)) + (floordiv(((threadIdx.x_1*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8)*56)) + (blockIdx.x*8)) + floormod(((threadIdx.x_1*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8))]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 4;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 4) "unroll" {
        placeholder.shared[((((threadIdx.z_2*64) + (threadIdx.y_2*16)) + (threadIdx.x_2*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 4)*4096) + (threadIdx.z_2*512)) + (threadIdx.y_2*128)) + (floordiv(((threadIdx.x_2*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 8)*64)) + (rc.outer*8)) + floormod(((threadIdx.x_2*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 8))]
      }
      for (rc.inner: int32, 0, 8) "unroll" {
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
      }
    }
    T_add_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x)] = ((float32*)compute[0] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25088)] = ((float32*)compute[4] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50176)] = ((float32*)compute[8] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75264)] = ((float32*)compute[12] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100352)] = ((float32*)compute[16] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125440)] = ((float32*)compute[20] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150528)] = ((float32*)compute[24] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175616)] = ((float32*)compute[28] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 224)] = ((float32*)compute[2] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25312)] = ((float32*)compute[6] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50400)] = ((float32*)compute[10] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75488)] = ((float32*)compute[14] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100576)] = ((float32*)compute[18] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125664)] = ((float32*)compute[22] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150752)] = ((float32*)compute[26] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175840)] = ((float32*)compute[30] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 4)] = ((float32*)compute[1] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25092)] = ((float32*)compute[5] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50180)] = ((float32*)compute[9] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75268)] = ((float32*)compute[13] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100356)] = ((float32*)compute[17] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125444)] = ((float32*)compute[21] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150532)] = ((float32*)compute[25] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175620)] = ((float32*)compute[29] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 228)] = ((float32*)compute[3] + (float32*)placeholder_6[((floormod(blockIdx.z, 4)*64) + threadIdx.z)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25316)] = ((float32*)compute[7] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 8)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50404)] = ((float32*)compute[11] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 16)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75492)] = ((float32*)compute[15] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 24)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100580)] = ((float32*)compute[19] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 32)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125668)] = ((float32*)compute[23] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 40)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150756)] = ((float32*)compute[27] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 48)])
    T_add_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175844)] = ((float32*)compute[31] + (float32*)placeholder_6[(((floormod(blockIdx.z, 4)*64) + threadIdx.z) + 56)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 256, 56, 56), 'float32'), ('TENSOR', (512, 256, 1, 1), 'float32'), (2, 2), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_1", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 512, 28, 28], []),
             placeholder: Buffer(placeholder_6: handle, float32, [32, 256, 56, 56], []),
             placeholder_2: Buffer(placeholder_7: handle, float32, [512, 1, 1], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [512, 256, 1, 1], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_add_1: T_add} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 256;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1404]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[7] = 0f32
    compute[14] = 0f32
    compute[21] = 0f32
    compute[1] = 0f32
    compute[8] = 0f32
    compute[15] = 0f32
    compute[22] = 0f32
    compute[2] = 0f32
    compute[9] = 0f32
    compute[16] = 0f32
    compute[23] = 0f32
    compute[3] = 0f32
    compute[10] = 0f32
    compute[17] = 0f32
    compute[24] = 0f32
    compute[4] = 0f32
    compute[11] = 0f32
    compute[18] = 0f32
    compute[25] = 0f32
    compute[5] = 0f32
    compute[12] = 0f32
    compute[19] = 0f32
    compute[26] = 0f32
    compute[6] = 0f32
    compute[13] = 0f32
    compute[20] = 0f32
    compute[27] = 0f32
    for (rc.outer: int32, 0, 64) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1404) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[((threadIdx.z_1*88) + (threadIdx.x_1*7))] = (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 351), 27)*56)) + (blockIdx.x*28)) + floormod(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1403) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1)] = (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1402) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2)] = (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1401) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3)] = (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1400) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4)] = (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1399) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5)] = (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1398) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6)] = (float32*)placeholder_6[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 27))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_2*4) + floordiv(threadIdx.x_2, 2)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 256) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[((threadIdx.z_2*16) + (threadIdx.x_2*2))] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 8)*16384) + (threadIdx.z_2*1024)) + (floordiv(threadIdx.x_2, 2)*256)) + (rc.outer*4)) + (floormod(threadIdx.x_2, 2)*2))]
            }
          }
        }
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + 1), 4)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 255) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + 1)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 8)*16384) + (threadIdx.z_2*1024)) + (floordiv(((threadIdx.x_2*2) + 1), 4)*256)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + 1), 4))]
            }
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
    }
    T_add_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x)] = ((float32*)compute[0] + (float32*)placeholder_7[((floormod(blockIdx.z, 8)*64) + threadIdx.z)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12544)] = ((float32*)compute[7] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 16)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25088)] = ((float32*)compute[14] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 32)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37632)] = ((float32*)compute[21] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 48)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 28)] = ((float32*)compute[1] + (float32*)placeholder_7[((floormod(blockIdx.z, 8)*64) + threadIdx.z)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12572)] = ((float32*)compute[8] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 16)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25116)] = ((float32*)compute[15] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 32)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37660)] = ((float32*)compute[22] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 48)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 56)] = ((float32*)compute[2] + (float32*)placeholder_7[((floormod(blockIdx.z, 8)*64) + threadIdx.z)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12600)] = ((float32*)compute[9] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 16)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25144)] = ((float32*)compute[16] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 32)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37688)] = ((float32*)compute[23] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 48)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 84)] = ((float32*)compute[3] + (float32*)placeholder_7[((floormod(blockIdx.z, 8)*64) + threadIdx.z)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12628)] = ((float32*)compute[10] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 16)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25172)] = ((float32*)compute[17] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 32)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37716)] = ((float32*)compute[24] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 48)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 112)] = ((float32*)compute[4] + (float32*)placeholder_7[((floormod(blockIdx.z, 8)*64) + threadIdx.z)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12656)] = ((float32*)compute[11] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 16)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25200)] = ((float32*)compute[18] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 32)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37744)] = ((float32*)compute[25] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 48)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 140)] = ((float32*)compute[5] + (float32*)placeholder_7[((floormod(blockIdx.z, 8)*64) + threadIdx.z)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12684)] = ((float32*)compute[12] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 16)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25228)] = ((float32*)compute[19] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 32)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37772)] = ((float32*)compute[26] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 48)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 168)] = ((float32*)compute[6] + (float32*)placeholder_7[((floormod(blockIdx.z, 8)*64) + threadIdx.z)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12712)] = ((float32*)compute[13] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 16)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25256)] = ((float32*)compute[20] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 32)])
    T_add_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37800)] = ((float32*)compute[27] + (float32*)placeholder_7[(((floormod(blockIdx.z, 8)*64) + threadIdx.z) + 48)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 512, 28, 28), 'float32'), ('TENSOR', (1024, 512, 1, 1), 'float32'), (2, 2), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_2", "tir.noalias": True}
  buffers = {placeholder_2: Buffer(placeholder_6: handle, float32, [1024, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 512, 28, 28], []),
             T_add: Buffer(T_add_2: handle, float32, [32, 1024, 14, 14], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [1024, 512, 1, 1], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_add_1: T_add} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 1024;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1404]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute[0] = 0f32
    compute[7] = 0f32
    compute[14] = 0f32
    compute[21] = 0f32
    compute[1] = 0f32
    compute[8] = 0f32
    compute[15] = 0f32
    compute[22] = 0f32
    compute[2] = 0f32
    compute[9] = 0f32
    compute[16] = 0f32
    compute[23] = 0f32
    compute[3] = 0f32
    compute[10] = 0f32
    compute[17] = 0f32
    compute[24] = 0f32
    compute[4] = 0f32
    compute[11] = 0f32
    compute[18] = 0f32
    compute[25] = 0f32
    compute[5] = 0f32
    compute[12] = 0f32
    compute[19] = 0f32
    compute[26] = 0f32
    compute[6] = 0f32
    compute[13] = 0f32
    compute[20] = 0f32
    compute[27] = 0f32
    for (rc.outer: int32, 0, 128) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 13) {
        if ((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 1404) {
          if (((threadIdx.x_1*13) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 176) {
            pad_temp.shared[(((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_7[((((((floordiv(blockIdx.z, 32)*401408) + (rc.outer*3136)) + (floordiv((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 351)*784)) + (blockIdx.y*392)) + (floordiv(floormod((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 351), 27)*28)) + floormod((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 27))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 2) {
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)) < 32) {
          if ((((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 128) {
            if (((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 16) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 32)*16384) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)*512)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4))]
            }
          }
        }
      }
      for (rc.inner: int32, 0, 4) {
        compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
      }
    }
    T_add_2[((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x)] = ((float32*)compute[0] + (float32*)placeholder_6[((floormod(blockIdx.z, 32)*32) + threadIdx.z)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1568)] = ((float32*)compute[7] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 8)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3136)] = ((float32*)compute[14] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 16)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4704)] = ((float32*)compute[21] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 24)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 14)] = ((float32*)compute[1] + (float32*)placeholder_6[((floormod(blockIdx.z, 32)*32) + threadIdx.z)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1582)] = ((float32*)compute[8] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 8)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3150)] = ((float32*)compute[15] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 16)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4718)] = ((float32*)compute[22] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 24)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 28)] = ((float32*)compute[2] + (float32*)placeholder_6[((floormod(blockIdx.z, 32)*32) + threadIdx.z)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1596)] = ((float32*)compute[9] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 8)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3164)] = ((float32*)compute[16] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 16)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4732)] = ((float32*)compute[23] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 24)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 42)] = ((float32*)compute[3] + (float32*)placeholder_6[((floormod(blockIdx.z, 32)*32) + threadIdx.z)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1610)] = ((float32*)compute[10] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 8)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3178)] = ((float32*)compute[17] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 16)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4746)] = ((float32*)compute[24] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 24)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 56)] = ((float32*)compute[4] + (float32*)placeholder_6[((floormod(blockIdx.z, 32)*32) + threadIdx.z)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1624)] = ((float32*)compute[11] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 8)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3192)] = ((float32*)compute[18] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 16)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4760)] = ((float32*)compute[25] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 24)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 70)] = ((float32*)compute[5] + (float32*)placeholder_6[((floormod(blockIdx.z, 32)*32) + threadIdx.z)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1638)] = ((float32*)compute[12] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 8)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3206)] = ((float32*)compute[19] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 16)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4774)] = ((float32*)compute[26] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 24)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 84)] = ((float32*)compute[6] + (float32*)placeholder_6[((floormod(blockIdx.z, 32)*32) + threadIdx.z)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1652)] = ((float32*)compute[13] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 8)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3220)] = ((float32*)compute[20] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 16)])
    T_add_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4788)] = ((float32*)compute[27] + (float32*)placeholder_6[(((floormod(blockIdx.z, 32)*32) + threadIdx.z) + 24)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
WARNING:autotvm:Cannot find config for target=cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, workload=('conv2d_nchw.cuda', ('TENSOR', (32, 1024, 14, 14), 'float32'), ('TENSOR', (2048, 1024, 1, 1), 'float32'), (2, 2), (0, 0, 0, 0), (1, 1), 'float32'). A fallback configuration is used, which may bring great performance regression.
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_3: handle, placeholder_4: handle, placeholder_5: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_add_3", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 2048, 7, 7], []),
             placeholder_2: Buffer(placeholder_6: handle, float32, [2048, 1, 1], []),
             placeholder: Buffer(placeholder_7: handle, float32, [32, 1024, 14, 14], []),
             placeholder_1: Buffer(placeholder_8: handle, float32, [2048, 1024, 1, 1], [])}
  buffer_map = {placeholder_3: placeholder, placeholder_4: placeholder_1, placeholder_5: placeholder_2, T_add_1: T_add} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 2048;
  attr [compute: handle] "storage_scope" = "local";
  allocate(compute, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [676]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    compute[0] = 0f32
    compute[28] = 0f32
    compute[4] = 0f32
    compute[32] = 0f32
    compute[8] = 0f32
    compute[36] = 0f32
    compute[12] = 0f32
    compute[40] = 0f32
    compute[16] = 0f32
    compute[44] = 0f32
    compute[20] = 0f32
    compute[48] = 0f32
    compute[24] = 0f32
    compute[52] = 0f32
    compute[1] = 0f32
    compute[29] = 0f32
    compute[5] = 0f32
    compute[33] = 0f32
    compute[9] = 0f32
    compute[37] = 0f32
    compute[13] = 0f32
    compute[41] = 0f32
    compute[17] = 0f32
    compute[45] = 0f32
    compute[21] = 0f32
    compute[49] = 0f32
    compute[25] = 0f32
    compute[53] = 0f32
    compute[2] = 0f32
    compute[30] = 0f32
    compute[6] = 0f32
    compute[34] = 0f32
    compute[10] = 0f32
    compute[38] = 0f32
    compute[14] = 0f32
    compute[42] = 0f32
    compute[18] = 0f32
    compute[46] = 0f32
    compute[22] = 0f32
    compute[50] = 0f32
    compute[26] = 0f32
    compute[54] = 0f32
    compute[3] = 0f32
    compute[31] = 0f32
    compute[7] = 0f32
    compute[35] = 0f32
    compute[11] = 0f32
    compute[39] = 0f32
    compute[15] = 0f32
    compute[43] = 0f32
    compute[19] = 0f32
    compute[47] = 0f32
    compute[23] = 0f32
    compute[51] = 0f32
    compute[27] = 0f32
    compute[55] = 0f32
    for (rc.outer: int32, 0, 256) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        pad_temp.shared[((threadIdx.z_1*169) + (threadIdx.x_1*25))] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv((threadIdx.x_1*25), 13)*14)) + floormod((threadIdx.x_1*25), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 1)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 1), 13)*14)) + floormod(((threadIdx.x_1*25) + 1), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 2)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 2), 13)*14)) + floormod(((threadIdx.x_1*25) + 2), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 3)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 3), 13)*14)) + floormod(((threadIdx.x_1*25) + 3), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 4)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 4), 13)*14)) + floormod(((threadIdx.x_1*25) + 4), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 5)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 5), 13)*14)) + floormod(((threadIdx.x_1*25) + 5), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 6)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 6), 13)*14)) + floormod(((threadIdx.x_1*25) + 6), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 7)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 7), 13)*14)) + floormod(((threadIdx.x_1*25) + 7), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 8)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 8), 13)*14)) + floormod(((threadIdx.x_1*25) + 8), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 9)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 9), 13)*14)) + floormod(((threadIdx.x_1*25) + 9), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 10)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 10), 13)*14)) + floormod(((threadIdx.x_1*25) + 10), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 11)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 11), 13)*14)) + floormod(((threadIdx.x_1*25) + 11), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 12)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 12), 13)*14)) + floormod(((threadIdx.x_1*25) + 12), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 13)] = (float32*)placeholder_7[((((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv((threadIdx.x_1*25), 13)*14)) + floormod((threadIdx.x_1*25), 13)) + 14)]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 14)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 14), 13)*14)) + floormod(((threadIdx.x_1*25) + 1), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 15)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 15), 13)*14)) + floormod(((threadIdx.x_1*25) + 2), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 16)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 16), 13)*14)) + floormod(((threadIdx.x_1*25) + 3), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 17)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 17), 13)*14)) + floormod(((threadIdx.x_1*25) + 4), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 18)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 18), 13)*14)) + floormod(((threadIdx.x_1*25) + 5), 13))]
        if ((floordiv(((threadIdx.x_1*25) + 19), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 19), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 657) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 19)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 19), 13)*14)) + floormod(((threadIdx.x_1*25) + 6), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 20), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 20), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 656) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 20)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 20), 13)*14)) + floormod(((threadIdx.x_1*25) + 7), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 21), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 21), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 655) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 21)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 21), 13)*14)) + floormod(((threadIdx.x_1*25) + 8), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 22), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 22), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 654) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 22)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 22), 13)*14)) + floormod(((threadIdx.x_1*25) + 9), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 23), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 23), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 653) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 23)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 23), 13)*14)) + floormod(((threadIdx.x_1*25) + 10), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 24), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 24), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 652) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 24)] = (float32*)placeholder_7[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 24), 13)*14)) + floormod(((threadIdx.x_1*25) + 11), 13))]
              }
            }
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        placeholder.shared[((threadIdx.z_2*32) + (threadIdx.x_2*5))] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 64)*32768) + (threadIdx.z_2*8192)) + (floordiv((threadIdx.x_2*5), 4)*1024)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4))]
        placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 64)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 1), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 1), 4))]
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 126) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 64)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 2), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 2), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 125) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_8[(((((floormod(blockIdx.z, 64)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 3), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 3), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 4)) < 31) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 124) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_8[((((((floormod(blockIdx.z, 64)*32768) + (threadIdx.z_2*8192)) + (floordiv((threadIdx.x_2*5), 4)*1024)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4)) + 1024)]
            }
          }
        }
      }
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute[0] = ((float32*)compute[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[28] = ((float32*)compute[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[4] = ((float32*)compute[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[32] = ((float32*)compute[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[8] = ((float32*)compute[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[36] = ((float32*)compute[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[12] = ((float32*)compute[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[40] = ((float32*)compute[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[16] = ((float32*)compute[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[44] = ((float32*)compute[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[20] = ((float32*)compute[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[48] = ((float32*)compute[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[24] = ((float32*)compute[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute[52] = ((float32*)compute[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute[1] = ((float32*)compute[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[29] = ((float32*)compute[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[5] = ((float32*)compute[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[33] = ((float32*)compute[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[9] = ((float32*)compute[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[37] = ((float32*)compute[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[13] = ((float32*)compute[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[41] = ((float32*)compute[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[17] = ((float32*)compute[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[45] = ((float32*)compute[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[21] = ((float32*)compute[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[49] = ((float32*)compute[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[25] = ((float32*)compute[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute[53] = ((float32*)compute[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute[2] = ((float32*)compute[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[30] = ((float32*)compute[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[6] = ((float32*)compute[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[34] = ((float32*)compute[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[10] = ((float32*)compute[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[38] = ((float32*)compute[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[14] = ((float32*)compute[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[42] = ((float32*)compute[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[18] = ((float32*)compute[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[46] = ((float32*)compute[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[22] = ((float32*)compute[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[50] = ((float32*)compute[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[26] = ((float32*)compute[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute[54] = ((float32*)compute[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute[3] = ((float32*)compute[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[31] = ((float32*)compute[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[7] = ((float32*)compute[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[35] = ((float32*)compute[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[11] = ((float32*)compute[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[39] = ((float32*)compute[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[15] = ((float32*)compute[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[43] = ((float32*)compute[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[19] = ((float32*)compute[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[47] = ((float32*)compute[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[23] = ((float32*)compute[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[51] = ((float32*)compute[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute[27] = ((float32*)compute[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute[55] = ((float32*)compute[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
    }
    T_add_2[(((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x)] = ((float32*)compute[0] + (float32*)placeholder_6[((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4))])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 784)] = ((float32*)compute[28] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 16)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 7)] = ((float32*)compute[4] + (float32*)placeholder_6[((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4))])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 791)] = ((float32*)compute[32] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 16)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 14)] = ((float32*)compute[8] + (float32*)placeholder_6[((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4))])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 798)] = ((float32*)compute[36] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 16)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 21)] = ((float32*)compute[12] + (float32*)placeholder_6[((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4))])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 805)] = ((float32*)compute[40] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 16)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 28)] = ((float32*)compute[16] + (float32*)placeholder_6[((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4))])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 812)] = ((float32*)compute[44] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 16)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 35)] = ((float32*)compute[20] + (float32*)placeholder_6[((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4))])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 819)] = ((float32*)compute[48] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 16)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 42)] = ((float32*)compute[24] + (float32*)placeholder_6[((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4))])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 826)] = ((float32*)compute[52] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 16)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 49)] = ((float32*)compute[1] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 1)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 833)] = ((float32*)compute[29] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 17)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 56)] = ((float32*)compute[5] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 1)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 840)] = ((float32*)compute[33] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 17)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 63)] = ((float32*)compute[9] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 1)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 847)] = ((float32*)compute[37] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 17)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 70)] = ((float32*)compute[13] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 1)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 854)] = ((float32*)compute[41] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 17)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 77)] = ((float32*)compute[17] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 1)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 861)] = ((float32*)compute[45] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 17)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 84)] = ((float32*)compute[21] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 1)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 868)] = ((float32*)compute[49] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 17)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 91)] = ((float32*)compute[25] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 1)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 875)] = ((float32*)compute[53] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 17)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 98)] = ((float32*)compute[2] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 2)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 882)] = ((float32*)compute[30] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 18)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 105)] = ((float32*)compute[6] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 2)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 889)] = ((float32*)compute[34] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 18)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 112)] = ((float32*)compute[10] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 2)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 896)] = ((float32*)compute[38] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 18)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 119)] = ((float32*)compute[14] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 2)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 903)] = ((float32*)compute[42] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 18)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 126)] = ((float32*)compute[18] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 2)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 910)] = ((float32*)compute[46] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 18)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 133)] = ((float32*)compute[22] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 2)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 917)] = ((float32*)compute[50] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 18)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 140)] = ((float32*)compute[26] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 2)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 924)] = ((float32*)compute[54] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 18)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 147)] = ((float32*)compute[3] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 3)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 931)] = ((float32*)compute[31] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 19)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 154)] = ((float32*)compute[7] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 3)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 938)] = ((float32*)compute[35] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 19)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 161)] = ((float32*)compute[11] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 3)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 945)] = ((float32*)compute[39] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 19)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 168)] = ((float32*)compute[15] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 3)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 952)] = ((float32*)compute[43] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 19)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 175)] = ((float32*)compute[19] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 3)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 959)] = ((float32*)compute[47] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 19)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 182)] = ((float32*)compute[23] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 3)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 966)] = ((float32*)compute[51] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 19)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 189)] = ((float32*)compute[27] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 3)])
    T_add_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 973)] = ((float32*)compute[55] + (float32*)placeholder_6[(((floormod(blockIdx.z, 64)*32) + (threadIdx.z*4)) + 19)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
original acc: 0.8125
data
constant
nn.conv2d
constant
add
nn.relu
nn.max_pool2d
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
constant
nn.conv2d
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
constant
nn.conv2d
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
constant
nn.conv2d
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
constant
nn.conv2d
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
nn.relu
constant
nn.conv2d
constant
add
nn.relu
constant
nn.conv2d
constant
add
constant
add
add
nn.relu
nn.global_avg_pool2d
nn.batch_flatten
constant
nn.dense
constant
add
data -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.max_pool2d
nn.max_pool2d -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
nn.max_pool2d -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
add -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
add -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
add -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
add -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> nn.relu
nn.relu -> nn.conv2d
constant -> nn.conv2d
nn.conv2d -> add
constant -> add
add -> add
constant -> add
add -> add
nn.relu -> add
add -> nn.relu
nn.relu -> nn.global_avg_pool2d
nn.global_avg_pool2d -> nn.batch_flatten
nn.batch_flatten -> nn.dense
constant -> nn.dense
nn.dense -> add
constant -> add
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.max_pool2d
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.conv2d
[OpDesc[in_dtypes=int8, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
add
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.relu
[OpDesc[in_dtypes=int32, out_dtypes=int32]]
[]
nn.global_avg_pool2d
[]
[OpDesc[in_dtypes=float32, out_dtypes=float32]]
nn.batch_flatten
[]
[OpDesc[in_dtypes=float32, out_dtypes=float32]]
nn.dense
[]
[OpDesc[in_dtypes=float32, out_dtypes=float32]]
add
[]
[OpDesc[in_dtypes=float32, out_dtypes=float32]]
analyzed condition
node_conds: [False, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, True, False, True, False, True, True, False, True, False, True, True, False, True, False, True, False, True, True, True, False, False, False, False, False, False]
edge_conds: [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False]
INFO:root:collecting statistics for calibration...
DEBUG:autotvm:Finish loading 688 records
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 64, 112, 112], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 3, 224, 224], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 3, 7, 7], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [16]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1155]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [96]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 28;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 4;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 28 {
    for (yy.c.init: int32, 0, 2) {
      compute.local[yy.c.init] = 0f32
      compute.local[(yy.c.init + 4)] = 0f32
      compute.local[(yy.c.init + 8)] = 0f32
      compute.local[(yy.c.init + 12)] = 0f32
      compute.local[(yy.c.init + 2)] = 0f32
      compute.local[(yy.c.init + 6)] = 0f32
      compute.local[(yy.c.init + 10)] = 0f32
      compute.local[(yy.c.init + 14)] = 0f32
    }
    for (ry.outer: int32, 0, 7) {
      for (rx.outer: int32, 0, 7) {
        attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 28;
        for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 6) {
          if ((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 1155) {
            if (((threadIdx.x_1*6) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 145) {
              pad_temp.shared[(((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = @tir.if_then_else(((((3 <= (((blockIdx.y*8) + floordiv(floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 385), 55)) + ry.outer)) && ((((blockIdx.y*8) + floordiv(floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 385), 55)) + ry.outer) < 227)) && (3 <= (((blockIdx.x*56) + rx.outer) + floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 55)))) && ((((blockIdx.x*56) + rx.outer) + floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 55)) < 227)), (float32*)placeholder_4[(((((((((floordiv(blockIdx.z, 2)*150528) + (floordiv((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 385)*50176)) + (blockIdx.y*1792)) + (floordiv(floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 385), 55)*224)) + (ry.outer*224)) + (blockIdx.x*56)) + rx.outer) + floormod((((threadIdx.z_1*145) + (threadIdx.x_1*6)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 55)) - 675)], 0f32, dtype=float32)
            }
          }
        }
        attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 28;
        if (((threadIdx.z_2*4) + floordiv(threadIdx.x_2, 3)) < 32) {
          if (((threadIdx.z_2*12) + threadIdx.x_2) < 96) {
            if (threadIdx.x_2 < 12) {
              placeholder.shared[((threadIdx.z_2*12) + threadIdx.x_2)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 2)*4704) + (threadIdx.z_2*588)) + (threadIdx.x_2*49)) + (ry.outer*7)) + rx.outer)]
            }
          }
        }
        for (rc.inner: int32, 0, 3) {
          for (yy.c: int32, 0, 2) {
            compute.local[yy.c] = ((float32*)compute.local[yy.c] + ((float32*)pad_temp.shared[(((rc.inner*385) + (yy.c*110)) + (threadIdx.x*2))]*(float32*)placeholder.shared[((threadIdx.z*3) + rc.inner)]))
            compute.local[(yy.c + 4)] = ((float32*)compute.local[(yy.c + 4)] + ((float32*)pad_temp.shared[(((rc.inner*385) + (yy.c*110)) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 24)]))
            compute.local[(yy.c + 8)] = ((float32*)compute.local[(yy.c + 8)] + ((float32*)pad_temp.shared[(((rc.inner*385) + (yy.c*110)) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 48)]))
            compute.local[(yy.c + 12)] = ((float32*)compute.local[(yy.c + 12)] + ((float32*)pad_temp.shared[(((rc.inner*385) + (yy.c*110)) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 72)]))
            compute.local[(yy.c + 2)] = ((float32*)compute.local[(yy.c + 2)] + ((float32*)pad_temp.shared[((((rc.inner*385) + (yy.c*110)) + (threadIdx.x*2)) + 220)]*(float32*)placeholder.shared[((threadIdx.z*3) + rc.inner)]))
            compute.local[(yy.c + 6)] = ((float32*)compute.local[(yy.c + 6)] + ((float32*)pad_temp.shared[((((rc.inner*385) + (yy.c*110)) + (threadIdx.x*2)) + 220)]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 24)]))
            compute.local[(yy.c + 10)] = ((float32*)compute.local[(yy.c + 10)] + ((float32*)pad_temp.shared[((((rc.inner*385) + (yy.c*110)) + (threadIdx.x*2)) + 220)]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 48)]))
            compute.local[(yy.c + 14)] = ((float32*)compute.local[(yy.c + 14)] + ((float32*)pad_temp.shared[((((rc.inner*385) + (yy.c*110)) + (threadIdx.x*2)) + 220)]*(float32*)placeholder.shared[(((threadIdx.z*3) + rc.inner) + 72)]))
          }
        }
      }
    }
    for (yy.inner.inner.inner: int32, 0, 2) {
      compute_2[((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (yy.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x)] = (float32*)compute.local[yy.inner.inner.inner]
      compute_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (yy.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 100352)] = (float32*)compute.local[(yy.inner.inner.inner + 4)]
      compute_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (yy.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 200704)] = (float32*)compute.local[(yy.inner.inner.inner + 8)]
      compute_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (yy.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 301056)] = (float32*)compute.local[(yy.inner.inner.inner + 12)]
      compute_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (yy.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 224)] = (float32*)compute.local[(yy.inner.inner.inner + 2)]
      compute_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (yy.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 100576)] = (float32*)compute.local[(yy.inner.inner.inner + 6)]
      compute_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (yy.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 200928)] = (float32*)compute.local[(yy.inner.inner.inner + 10)]
      compute_2[(((((((blockIdx.z*401408) + (threadIdx.z*12544)) + (blockIdx.y*448)) + (yy.inner.inner.inner*112)) + (blockIdx.x*28)) + threadIdx.x) + 301280)] = (float32*)compute.local[(yy.inner.inner.inner + 14)]
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_12", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [32, 64, 112, 112], []),
             T_add: Buffer(T_add_2: handle, float32, [32, 64, 112, 112], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 98) {
    T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[floordiv(floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 802816), 12544)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_1: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_relu", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 64, 112, 112], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 64, 112, 112], [])}
  buffer_map = {placeholder_1: placeholder, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 98) {
    T_relu_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max((float32*)placeholder_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_1", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 64, 56, 56], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 64, 56, 56], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 64, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 32;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [64]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [448]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 28;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
    compute.local[0] = 0f32
    compute.local[2] = 0f32
    compute.local[4] = 0f32
    compute.local[6] = 0f32
    compute.local[8] = 0f32
    compute.local[10] = 0f32
    compute.local[12] = 0f32
    compute.local[14] = 0f32
    compute.local[16] = 0f32
    compute.local[18] = 0f32
    compute.local[20] = 0f32
    compute.local[22] = 0f32
    compute.local[24] = 0f32
    compute.local[26] = 0f32
    compute.local[28] = 0f32
    compute.local[30] = 0f32
    compute.local[32] = 0f32
    compute.local[34] = 0f32
    compute.local[36] = 0f32
    compute.local[38] = 0f32
    compute.local[40] = 0f32
    compute.local[42] = 0f32
    compute.local[44] = 0f32
    compute.local[46] = 0f32
    compute.local[48] = 0f32
    compute.local[50] = 0f32
    compute.local[52] = 0f32
    compute.local[54] = 0f32
    compute.local[56] = 0f32
    compute.local[58] = 0f32
    compute.local[60] = 0f32
    compute.local[62] = 0f32
    compute.local[1] = 0f32
    compute.local[3] = 0f32
    compute.local[5] = 0f32
    compute.local[7] = 0f32
    compute.local[9] = 0f32
    compute.local[11] = 0f32
    compute.local[13] = 0f32
    compute.local[15] = 0f32
    compute.local[17] = 0f32
    compute.local[19] = 0f32
    compute.local[21] = 0f32
    compute.local[23] = 0f32
    compute.local[25] = 0f32
    compute.local[27] = 0f32
    compute.local[29] = 0f32
    compute.local[31] = 0f32
    compute.local[33] = 0f32
    compute.local[35] = 0f32
    compute.local[37] = 0f32
    compute.local[39] = 0f32
    compute.local[41] = 0f32
    compute.local[43] = 0f32
    compute.local[45] = 0f32
    compute.local[47] = 0f32
    compute.local[49] = 0f32
    compute.local[51] = 0f32
    compute.local[53] = 0f32
    compute.local[55] = 0f32
    compute.local[57] = 0f32
    compute.local[59] = 0f32
    compute.local[61] = 0f32
    compute.local[63] = 0f32
    for (rc.outer: int32, 0, 16) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
        pad_temp.shared[((threadIdx.z_1*224) + (threadIdx.x_1*4))] = (float32*)placeholder_4[((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(threadIdx.x_1, 28)*3136)) + (blockIdx.y*112)) + (floormod(threadIdx.x_1, 28)*4))]
        pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 1)] = (float32*)placeholder_4[((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 1), 112)*3136)) + (blockIdx.y*112)) + floormod(((threadIdx.x_1*4) + 1), 112))]
        pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 2)] = (float32*)placeholder_4[((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 2), 112)*3136)) + (blockIdx.y*112)) + floormod(((threadIdx.x_1*4) + 2), 112))]
        pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 3)] = (float32*)placeholder_4[((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 3), 112)*3136)) + (blockIdx.y*112)) + floormod(((threadIdx.x_1*4) + 3), 112))]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
        if (((threadIdx.z_2*32) + floordiv((threadIdx.x_2*3), 4)) < 64) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 256) {
            if (threadIdx.x_2 < 43) {
              placeholder.shared[((threadIdx.z_2*128) + (threadIdx.x_2*3))] = (float32*)placeholder_5[((((threadIdx.z_2*2048) + (floordiv((threadIdx.x_2*3), 4)*64)) + (rc.outer*4)) + floormod((threadIdx.x_2*3), 4))]
            }
          }
        }
        if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 1), 4)) < 64) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 255) {
            if (threadIdx.x_2 < 43) {
              placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_5[((((threadIdx.z_2*2048) + (floordiv(((threadIdx.x_2*3) + 1), 4)*64)) + (rc.outer*4)) + floormod(((threadIdx.x_2*3) + 1), 4))]
            }
          }
        }
        if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 2), 4)) < 64) {
          if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 254) {
            if (threadIdx.x_2 < 42) {
              placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_5[((((threadIdx.z_2*2048) + (floordiv(((threadIdx.x_2*3) + 2), 4)*64)) + (rc.outer*4)) + floormod(((threadIdx.x_2*3) + 2), 4))]
            }
          }
        }
      }
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
      compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
      compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
      compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
      compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
      compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
      compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
      compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
      compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
      compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
      compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
      compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
      compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
      compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
      compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
      compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
      compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
      compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
      compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
      compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
      compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
      compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
      compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
      compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
      compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
      compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
      compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
      compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
      compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
      compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
      compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
      compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
      compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
    }
    compute_2[((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 6272)] = (float32*)compute.local[2]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 12544)] = (float32*)compute.local[4]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 18816)] = (float32*)compute.local[6]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 25088)] = (float32*)compute.local[8]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 31360)] = (float32*)compute.local[10]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 37632)] = (float32*)compute.local[12]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 43904)] = (float32*)compute.local[14]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 50176)] = (float32*)compute.local[16]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56448)] = (float32*)compute.local[18]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 62720)] = (float32*)compute.local[20]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 68992)] = (float32*)compute.local[22]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 75264)] = (float32*)compute.local[24]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 81536)] = (float32*)compute.local[26]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 87808)] = (float32*)compute.local[28]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 94080)] = (float32*)compute.local[30]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 100352)] = (float32*)compute.local[32]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 106624)] = (float32*)compute.local[34]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 112896)] = (float32*)compute.local[36]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 119168)] = (float32*)compute.local[38]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 125440)] = (float32*)compute.local[40]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 131712)] = (float32*)compute.local[42]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 137984)] = (float32*)compute.local[44]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 144256)] = (float32*)compute.local[46]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 150528)] = (float32*)compute.local[48]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 156800)] = (float32*)compute.local[50]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 163072)] = (float32*)compute.local[52]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 169344)] = (float32*)compute.local[54]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 175616)] = (float32*)compute.local[56]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 181888)] = (float32*)compute.local[58]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 188160)] = (float32*)compute.local[60]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 194432)] = (float32*)compute.local[62]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56)] = (float32*)compute.local[1]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 6328)] = (float32*)compute.local[3]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 12600)] = (float32*)compute.local[5]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 18872)] = (float32*)compute.local[7]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 25144)] = (float32*)compute.local[9]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 31416)] = (float32*)compute.local[11]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 37688)] = (float32*)compute.local[13]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 43960)] = (float32*)compute.local[15]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 50232)] = (float32*)compute.local[17]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56504)] = (float32*)compute.local[19]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 62776)] = (float32*)compute.local[21]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 69048)] = (float32*)compute.local[23]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 75320)] = (float32*)compute.local[25]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 81592)] = (float32*)compute.local[27]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 87864)] = (float32*)compute.local[29]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 94136)] = (float32*)compute.local[31]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 100408)] = (float32*)compute.local[33]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 106680)] = (float32*)compute.local[35]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 112952)] = (float32*)compute.local[37]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 119224)] = (float32*)compute.local[39]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 125496)] = (float32*)compute.local[41]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 131768)] = (float32*)compute.local[43]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 138040)] = (float32*)compute.local[45]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 144312)] = (float32*)compute.local[47]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 150584)] = (float32*)compute.local[49]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 156856)] = (float32*)compute.local[51]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 163128)] = (float32*)compute.local[53]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 169400)] = (float32*)compute.local[55]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 175672)] = (float32*)compute.local[57]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 181944)] = (float32*)compute.local[59]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 188216)] = (float32*)compute.local[61]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 194488)] = (float32*)compute.local[63]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_13", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 64, 56, 56], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 64, 56, 56], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 25) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 6422528) {
      T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[floordiv(floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 200704), 3136)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_1: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_relu_1", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 64, 56, 56], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 64, 56, 56], [])}
  buffer_map = {placeholder_1: placeholder, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 25) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 6422528) {
      T_relu_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max((float32*)placeholder_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f32)
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_2", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 64, 56, 56], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 64, 56, 56], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 64, 3, 3], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 32;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [64]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [448]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 28;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
    compute.local[0] = 0f32
    compute.local[2] = 0f32
    compute.local[4] = 0f32
    compute.local[6] = 0f32
    compute.local[8] = 0f32
    compute.local[10] = 0f32
    compute.local[12] = 0f32
    compute.local[14] = 0f32
    compute.local[16] = 0f32
    compute.local[18] = 0f32
    compute.local[20] = 0f32
    compute.local[22] = 0f32
    compute.local[24] = 0f32
    compute.local[26] = 0f32
    compute.local[28] = 0f32
    compute.local[30] = 0f32
    compute.local[32] = 0f32
    compute.local[34] = 0f32
    compute.local[36] = 0f32
    compute.local[38] = 0f32
    compute.local[40] = 0f32
    compute.local[42] = 0f32
    compute.local[44] = 0f32
    compute.local[46] = 0f32
    compute.local[48] = 0f32
    compute.local[50] = 0f32
    compute.local[52] = 0f32
    compute.local[54] = 0f32
    compute.local[56] = 0f32
    compute.local[58] = 0f32
    compute.local[60] = 0f32
    compute.local[62] = 0f32
    compute.local[1] = 0f32
    compute.local[3] = 0f32
    compute.local[5] = 0f32
    compute.local[7] = 0f32
    compute.local[9] = 0f32
    compute.local[11] = 0f32
    compute.local[13] = 0f32
    compute.local[15] = 0f32
    compute.local[17] = 0f32
    compute.local[19] = 0f32
    compute.local[21] = 0f32
    compute.local[23] = 0f32
    compute.local[25] = 0f32
    compute.local[27] = 0f32
    compute.local[29] = 0f32
    compute.local[31] = 0f32
    compute.local[33] = 0f32
    compute.local[35] = 0f32
    compute.local[37] = 0f32
    compute.local[39] = 0f32
    compute.local[41] = 0f32
    compute.local[43] = 0f32
    compute.local[45] = 0f32
    compute.local[47] = 0f32
    compute.local[49] = 0f32
    compute.local[51] = 0f32
    compute.local[53] = 0f32
    compute.local[55] = 0f32
    compute.local[57] = 0f32
    compute.local[59] = 0f32
    compute.local[61] = 0f32
    compute.local[63] = 0f32
    for (rc.outer: int32, 0, 16) {
      for (ry.outer: int32, 0, 3) {
        attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          pad_temp.shared[((threadIdx.z_1*224) + (threadIdx.x_1*4))] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer) < 57)) && (1 <= floormod(threadIdx.x_1, 14))), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(threadIdx.x_1, 28)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + (floormod(threadIdx.x_1, 28)*4)) - 57)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 1)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer) < 57)) && (1 <= floormod(((threadIdx.x_1*4) + 1), 56))), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 1), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 1), 112)) - 57)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 2)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer) < 57)) && (1 <= floormod(((threadIdx.x_1*4) + 2), 56))), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 2), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 2), 112)) - 57)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 3)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer) < 57)) && (1 <= floormod(((threadIdx.x_1*4) + 3), 56))), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 3), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 3), 112)) - 57)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          if (((threadIdx.z_2*32) + floordiv((threadIdx.x_2*3), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 256) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[((threadIdx.z_2*128) + (threadIdx.x_2*3))] = (float32*)placeholder_5[(((((threadIdx.z_2*18432) + (floordiv((threadIdx.x_2*3), 4)*576)) + (rc.outer*36)) + (floormod((threadIdx.x_2*3), 4)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 1), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 255) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_5[(((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 1), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 1), 4)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 2), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 254) {
              if (threadIdx.x_2 < 42) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_5[(((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 2), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 2), 4)*9)) + (ry.outer*3))]
              }
            }
          }
        }
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
        attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          pad_temp.shared[((threadIdx.z_1*224) + (threadIdx.x_1*4))] = @tir.if_then_else(((1 <= (((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer) < 57)), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(threadIdx.x_1, 28)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + (floormod(threadIdx.x_1, 28)*4)) - 56)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 1)] = @tir.if_then_else(((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer) < 57)), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 1), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 1), 112)) - 56)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 2)] = @tir.if_then_else(((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer) < 57)), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 2), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 2), 112)) - 56)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 3)] = @tir.if_then_else(((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer) < 57)), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 3), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 3), 112)) - 56)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          if (((threadIdx.z_2*32) + floordiv((threadIdx.x_2*3), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 256) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[((threadIdx.z_2*128) + (threadIdx.x_2*3))] = (float32*)placeholder_5[((((((threadIdx.z_2*18432) + (floordiv((threadIdx.x_2*3), 4)*576)) + (rc.outer*36)) + (floormod((threadIdx.x_2*3), 4)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 1), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 255) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_5[((((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 1), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 1), 4)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 2), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 254) {
              if (threadIdx.x_2 < 42) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_5[((((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 2), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 2), 4)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
        }
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
        attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          pad_temp.shared[((threadIdx.z_1*224) + (threadIdx.x_1*4))] = @tir.if_then_else(((1 <= (((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(threadIdx.x_1, 28), 14)) + ry.outer) < 57)), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(threadIdx.x_1, 28)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + (floormod(threadIdx.x_1, 28)*4)) - 55)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 1)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 1), 112), 56)) + ry.outer) < 57)) && (floormod(((threadIdx.x_1*4) + 1), 56) < 55)), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 1), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 1), 112)) - 55)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 2)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 2), 112), 56)) + ry.outer) < 57)) && (floormod(((threadIdx.x_1*4) + 2), 56) < 55)), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 2), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 2), 112)) - 55)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*224) + (threadIdx.x_1*4)) + 3)] = @tir.if_then_else((((1 <= (((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer)) && ((((blockIdx.y*2) + floordiv(floormod(((threadIdx.x_1*4) + 3), 112), 56)) + ry.outer) < 57)) && (floormod(((threadIdx.x_1*4) + 3), 56) < 55)), (float32*)placeholder_4[((((((((blockIdx.z*200704) + (rc.outer*12544)) + (threadIdx.z_1*6272)) + (floordiv(((threadIdx.x_1*4) + 3), 112)*3136)) + (blockIdx.y*112)) + (ry.outer*56)) + floormod(((threadIdx.x_1*4) + 3), 112)) - 55)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
          if (((threadIdx.z_2*32) + floordiv((threadIdx.x_2*3), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 256) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[((threadIdx.z_2*128) + (threadIdx.x_2*3))] = (float32*)placeholder_5[((((((threadIdx.z_2*18432) + (floordiv((threadIdx.x_2*3), 4)*576)) + (rc.outer*36)) + (floormod((threadIdx.x_2*3), 4)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 1), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 255) {
              if (threadIdx.x_2 < 43) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_5[((((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 1), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 1), 4)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*32) + floordiv(((threadIdx.x_2*3) + 2), 4)) < 64) {
            if (((threadIdx.z_2*128) + (threadIdx.x_2*3)) < 254) {
              if (threadIdx.x_2 < 42) {
                placeholder.shared[(((threadIdx.z_2*128) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_5[((((((threadIdx.z_2*18432) + (floordiv(((threadIdx.x_2*3) + 2), 4)*576)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*3) + 2), 4)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
        }
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 8)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 16)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 24)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 32)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 40)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 48)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 56)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 72)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 80)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 88)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 96)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 104)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 112)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 120)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 136)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 144)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 152)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 160)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 168)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 176)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 184)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 200)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 208)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 216)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 224)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 232)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 240)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 248)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 9)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 17)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 25)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 33)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 41)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 49)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 57)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 73)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 81)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 89)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 97)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 105)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 113)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 121)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 137)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 145)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 153)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 161)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 169)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 177)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 185)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 201)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 209)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 217)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 225)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 233)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 241)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 249)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 10)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 18)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 26)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 34)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 42)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 50)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 58)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 74)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 82)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 90)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 98)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 106)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 114)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 122)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 138)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 146)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 154)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 162)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 170)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 178)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 186)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 202)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 210)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 218)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 226)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 234)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 242)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 250)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 11)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 19)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 27)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 35)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 43)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 51)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 59)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 75)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 83)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 91)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 99)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 107)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 115)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 123)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 139)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 147)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 155)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 163)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 171)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 179)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 187)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 203)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 211)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 219)]))
        compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 227)]))
        compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 235)]))
        compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 243)]))
        compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*4) + 251)]))
      }
    }
    compute_2[((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 6272)] = (float32*)compute.local[2]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 12544)] = (float32*)compute.local[4]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 18816)] = (float32*)compute.local[6]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 25088)] = (float32*)compute.local[8]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 31360)] = (float32*)compute.local[10]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 37632)] = (float32*)compute.local[12]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 43904)] = (float32*)compute.local[14]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 50176)] = (float32*)compute.local[16]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56448)] = (float32*)compute.local[18]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 62720)] = (float32*)compute.local[20]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 68992)] = (float32*)compute.local[22]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 75264)] = (float32*)compute.local[24]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 81536)] = (float32*)compute.local[26]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 87808)] = (float32*)compute.local[28]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 94080)] = (float32*)compute.local[30]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 100352)] = (float32*)compute.local[32]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 106624)] = (float32*)compute.local[34]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 112896)] = (float32*)compute.local[36]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 119168)] = (float32*)compute.local[38]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 125440)] = (float32*)compute.local[40]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 131712)] = (float32*)compute.local[42]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 137984)] = (float32*)compute.local[44]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 144256)] = (float32*)compute.local[46]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 150528)] = (float32*)compute.local[48]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 156800)] = (float32*)compute.local[50]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 163072)] = (float32*)compute.local[52]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 169344)] = (float32*)compute.local[54]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 175616)] = (float32*)compute.local[56]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 181888)] = (float32*)compute.local[58]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 188160)] = (float32*)compute.local[60]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 194432)] = (float32*)compute.local[62]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56)] = (float32*)compute.local[1]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 6328)] = (float32*)compute.local[3]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 12600)] = (float32*)compute.local[5]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 18872)] = (float32*)compute.local[7]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 25144)] = (float32*)compute.local[9]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 31416)] = (float32*)compute.local[11]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 37688)] = (float32*)compute.local[13]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 43960)] = (float32*)compute.local[15]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 50232)] = (float32*)compute.local[17]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 56504)] = (float32*)compute.local[19]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 62776)] = (float32*)compute.local[21]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 69048)] = (float32*)compute.local[23]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 75320)] = (float32*)compute.local[25]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 81592)] = (float32*)compute.local[27]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 87864)] = (float32*)compute.local[29]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 94136)] = (float32*)compute.local[31]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 100408)] = (float32*)compute.local[33]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 106680)] = (float32*)compute.local[35]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 112952)] = (float32*)compute.local[37]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 119224)] = (float32*)compute.local[39]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 125496)] = (float32*)compute.local[41]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 131768)] = (float32*)compute.local[43]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 138040)] = (float32*)compute.local[45]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 144312)] = (float32*)compute.local[47]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 150584)] = (float32*)compute.local[49]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 156856)] = (float32*)compute.local[51]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 163128)] = (float32*)compute.local[53]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 169400)] = (float32*)compute.local[55]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 175672)] = (float32*)compute.local[57]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 181944)] = (float32*)compute.local[59]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 188216)] = (float32*)compute.local[61]
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + threadIdx.x) + 194488)] = (float32*)compute.local[63]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_3", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 256, 56, 56], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 64, 56, 56], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 64, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 128;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [32]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [512]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 7;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 7;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 4 {
    compute.local[0] = 0f32
    compute.local[4] = 0f32
    compute.local[8] = 0f32
    compute.local[12] = 0f32
    compute.local[16] = 0f32
    compute.local[20] = 0f32
    compute.local[24] = 0f32
    compute.local[28] = 0f32
    compute.local[2] = 0f32
    compute.local[6] = 0f32
    compute.local[10] = 0f32
    compute.local[14] = 0f32
    compute.local[18] = 0f32
    compute.local[22] = 0f32
    compute.local[26] = 0f32
    compute.local[30] = 0f32
    compute.local[1] = 0f32
    compute.local[5] = 0f32
    compute.local[9] = 0f32
    compute.local[13] = 0f32
    compute.local[17] = 0f32
    compute.local[21] = 0f32
    compute.local[25] = 0f32
    compute.local[29] = 0f32
    compute.local[3] = 0f32
    compute.local[7] = 0f32
    compute.local[11] = 0f32
    compute.local[15] = 0f32
    compute.local[19] = 0f32
    compute.local[23] = 0f32
    compute.local[27] = 0f32
    compute.local[31] = 0f32
    for (rc.outer: int32, 0, 8) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 4;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 4) "unroll" {
        pad_temp.shared[((((threadIdx.z_1*64) + (threadIdx.y_1*16)) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_4[((((((((floordiv(blockIdx.z, 4)*200704) + (rc.outer*25088)) + (threadIdx.z_1*3136)) + (blockIdx.y*448)) + (threadIdx.y_1*112)) + (floordiv(((threadIdx.x_1*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8)*56)) + (blockIdx.x*8)) + floormod(((threadIdx.x_1*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8))]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 4;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 4) "unroll" {
        placeholder.shared[((((threadIdx.z_2*64) + (threadIdx.y_2*16)) + (threadIdx.x_2*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_5[((((((floormod(blockIdx.z, 4)*4096) + (threadIdx.z_2*512)) + (threadIdx.y_2*128)) + (floordiv(((threadIdx.x_2*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 8)*64)) + (rc.outer*8)) + floormod(((threadIdx.x_2*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 8))]
      }
      for (rc.inner: int32, 0, 8) "unroll" {
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 32)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 4)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 320)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[((((rc.inner*64) + (threadIdx.y*8)) + threadIdx.x) + 36)]*(float32*)placeholder.shared[(((threadIdx.z*8) + rc.inner) + 448)]))
      }
    }
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25088)] = (float32*)compute.local[4]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50176)] = (float32*)compute.local[8]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75264)] = (float32*)compute.local[12]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100352)] = (float32*)compute.local[16]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125440)] = (float32*)compute.local[20]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150528)] = (float32*)compute.local[24]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175616)] = (float32*)compute.local[28]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 224)] = (float32*)compute.local[2]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25312)] = (float32*)compute.local[6]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50400)] = (float32*)compute.local[10]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75488)] = (float32*)compute.local[14]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100576)] = (float32*)compute.local[18]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125664)] = (float32*)compute.local[22]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150752)] = (float32*)compute.local[26]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175840)] = (float32*)compute.local[30]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 4)] = (float32*)compute.local[1]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25092)] = (float32*)compute.local[5]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50180)] = (float32*)compute.local[9]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75268)] = (float32*)compute.local[13]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100356)] = (float32*)compute.local[17]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125444)] = (float32*)compute.local[21]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150532)] = (float32*)compute.local[25]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175620)] = (float32*)compute.local[29]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 228)] = (float32*)compute.local[3]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 25316)] = (float32*)compute.local[7]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 50404)] = (float32*)compute.local[11]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 75492)] = (float32*)compute.local[15]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 100580)] = (float32*)compute.local[19]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 125668)] = (float32*)compute.local[23]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 150756)] = (float32*)compute.local[27]
    compute_2[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*448)) + (threadIdx.y*56)) + (blockIdx.x*8)) + threadIdx.x) + 175844)] = (float32*)compute.local[31]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_14", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 256, 56, 56], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 256, 56, 56], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 98) {
    T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[floordiv(floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 802816), 3136)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_15", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [32, 256, 56, 56], []),
             T_add: Buffer(T_add_2: handle, float32, [32, 256, 56, 56], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [32, 256, 56, 56], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 98) {
    T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_1: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_relu_2", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 256, 56, 56], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 256, 56, 56], [])}
  buffer_map = {placeholder_1: placeholder, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 98) {
    T_relu_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max((float32*)placeholder_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_4", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 64, 56, 56], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 256, 56, 56], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [64, 256, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 32;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [16]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [448]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 28;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute.local[0] = 0f32
    compute.local[4] = 0f32
    compute.local[8] = 0f32
    compute.local[12] = 0f32
    compute.local[2] = 0f32
    compute.local[6] = 0f32
    compute.local[10] = 0f32
    compute.local[14] = 0f32
    compute.local[1] = 0f32
    compute.local[5] = 0f32
    compute.local[9] = 0f32
    compute.local[13] = 0f32
    compute.local[3] = 0f32
    compute.local[7] = 0f32
    compute.local[11] = 0f32
    compute.local[15] = 0f32
    for (rc.outer: int32, 0, 32) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        pad_temp.shared[((threadIdx.z_1*28) + (threadIdx.x_1*2))] = (float32*)placeholder_4[(((((((blockIdx.z*802816) + (rc.outer*25088)) + (floordiv(threadIdx.z_1, 2)*3136)) + (blockIdx.y*112)) + (floormod(threadIdx.z_1, 2)*56)) + (blockIdx.x*28)) + (threadIdx.x_1*2))]
        pad_temp.shared[(((threadIdx.z_1*28) + (threadIdx.x_1*2)) + 1)] = (float32*)placeholder_4[((((((((blockIdx.z*802816) + (rc.outer*25088)) + (floordiv(threadIdx.z_1, 2)*3136)) + (blockIdx.y*112)) + (floormod(threadIdx.z_1, 2)*56)) + (blockIdx.x*28)) + (threadIdx.x_1*2)) + 1)]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_2*4) + floordiv((threadIdx.x_2*3), 8)) < 64) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*3)) < 512) {
            if (threadIdx.x_2 < 11) {
              placeholder.shared[((threadIdx.z_2*32) + (threadIdx.x_2*3))] = (float32*)placeholder_5[((((threadIdx.z_2*1024) + (floordiv((threadIdx.x_2*3), 8)*256)) + (rc.outer*8)) + floormod((threadIdx.x_2*3), 8))]
            }
          }
        }
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*3) + 1), 8)) < 64) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*3)) < 511) {
            if (threadIdx.x_2 < 11) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_5[((((threadIdx.z_2*1024) + (floordiv(((threadIdx.x_2*3) + 1), 8)*256)) + (rc.outer*8)) + floormod(((threadIdx.x_2*3) + 1), 8))]
            }
          }
        }
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*3) + 2), 8)) < 64) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*3)) < 510) {
            if (threadIdx.x_2 < 10) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_5[((((threadIdx.z_2*1024) + (floordiv(((threadIdx.x_2*3) + 2), 8)*256)) + (rc.outer*8)) + floormod(((threadIdx.x_2*3) + 2), 8))]
            }
          }
        }
      }
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
    }
    compute_2[(((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 50176)] = (float32*)compute.local[4]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 100352)] = (float32*)compute.local[8]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 150528)] = (float32*)compute.local[12]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 56)] = (float32*)compute.local[2]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 50232)] = (float32*)compute.local[6]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 100408)] = (float32*)compute.local[10]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 150584)] = (float32*)compute.local[14]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 14)] = (float32*)compute.local[1]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 50190)] = (float32*)compute.local[5]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 100366)] = (float32*)compute.local[9]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 150542)] = (float32*)compute.local[13]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 70)] = (float32*)compute.local[3]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 50246)] = (float32*)compute.local[7]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 100422)] = (float32*)compute.local[11]
    compute_2[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*112)) + (blockIdx.x*28)) + threadIdx.x) + 150598)] = (float32*)compute.local[15]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_5", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 128, 28, 28], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 256, 56, 56], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128, 256, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1404]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute.local[0] = 0f32
    compute.local[7] = 0f32
    compute.local[14] = 0f32
    compute.local[21] = 0f32
    compute.local[1] = 0f32
    compute.local[8] = 0f32
    compute.local[15] = 0f32
    compute.local[22] = 0f32
    compute.local[2] = 0f32
    compute.local[9] = 0f32
    compute.local[16] = 0f32
    compute.local[23] = 0f32
    compute.local[3] = 0f32
    compute.local[10] = 0f32
    compute.local[17] = 0f32
    compute.local[24] = 0f32
    compute.local[4] = 0f32
    compute.local[11] = 0f32
    compute.local[18] = 0f32
    compute.local[25] = 0f32
    compute.local[5] = 0f32
    compute.local[12] = 0f32
    compute.local[19] = 0f32
    compute.local[26] = 0f32
    compute.local[6] = 0f32
    compute.local[13] = 0f32
    compute.local[20] = 0f32
    compute.local[27] = 0f32
    for (rc.outer: int32, 0, 64) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1404) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[((threadIdx.z_1*88) + (threadIdx.x_1*7))] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 351), 27)*56)) + (blockIdx.x*28)) + floormod(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1403) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1402) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1401) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1400) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1399) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1398) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 2)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 27))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_2*4) + floordiv(threadIdx.x_2, 2)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 256) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[((threadIdx.z_2*16) + (threadIdx.x_2*2))] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 2)*16384) + (threadIdx.z_2*1024)) + (floordiv(threadIdx.x_2, 2)*256)) + (rc.outer*4)) + (floormod(threadIdx.x_2, 2)*2))]
            }
          }
        }
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + 1), 4)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 255) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + 1)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 2)*16384) + (threadIdx.z_2*1024)) + (floordiv(((threadIdx.x_2*2) + 1), 4)*256)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + 1), 4))]
            }
          }
        }
      }
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
    }
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12544)] = (float32*)compute.local[7]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25088)] = (float32*)compute.local[14]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37632)] = (float32*)compute.local[21]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 28)] = (float32*)compute.local[1]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12572)] = (float32*)compute.local[8]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25116)] = (float32*)compute.local[15]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37660)] = (float32*)compute.local[22]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 56)] = (float32*)compute.local[2]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12600)] = (float32*)compute.local[9]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25144)] = (float32*)compute.local[16]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37688)] = (float32*)compute.local[23]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 84)] = (float32*)compute.local[3]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12628)] = (float32*)compute.local[10]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25172)] = (float32*)compute.local[17]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37716)] = (float32*)compute.local[24]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 112)] = (float32*)compute.local[4]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12656)] = (float32*)compute.local[11]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25200)] = (float32*)compute.local[18]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37744)] = (float32*)compute.local[25]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 140)] = (float32*)compute.local[5]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12684)] = (float32*)compute.local[12]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25228)] = (float32*)compute.local[19]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37772)] = (float32*)compute.local[26]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 168)] = (float32*)compute.local[6]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12712)] = (float32*)compute.local[13]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25256)] = (float32*)compute.local[20]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37800)] = (float32*)compute.local[27]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_16", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 128, 28, 28], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 128, 28, 28], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 13) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 3211264) {
      T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[floordiv(floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 100352), 784)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_1: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_relu_3", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 128, 28, 28], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 128, 28, 28], [])}
  buffer_map = {placeholder_1: placeholder, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 13) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 3211264) {
      T_relu_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max((float32*)placeholder_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f32)
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_6", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 128, 28, 28], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 128, 28, 28], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128, 128, 3, 3], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [64]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [896]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 7;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute.local[0] = 0f32
    compute.local[8] = 0f32
    compute.local[16] = 0f32
    compute.local[24] = 0f32
    compute.local[32] = 0f32
    compute.local[40] = 0f32
    compute.local[48] = 0f32
    compute.local[56] = 0f32
    compute.local[2] = 0f32
    compute.local[10] = 0f32
    compute.local[18] = 0f32
    compute.local[26] = 0f32
    compute.local[34] = 0f32
    compute.local[42] = 0f32
    compute.local[50] = 0f32
    compute.local[58] = 0f32
    compute.local[4] = 0f32
    compute.local[12] = 0f32
    compute.local[20] = 0f32
    compute.local[28] = 0f32
    compute.local[36] = 0f32
    compute.local[44] = 0f32
    compute.local[52] = 0f32
    compute.local[60] = 0f32
    compute.local[6] = 0f32
    compute.local[14] = 0f32
    compute.local[22] = 0f32
    compute.local[30] = 0f32
    compute.local[38] = 0f32
    compute.local[46] = 0f32
    compute.local[54] = 0f32
    compute.local[62] = 0f32
    compute.local[1] = 0f32
    compute.local[9] = 0f32
    compute.local[17] = 0f32
    compute.local[25] = 0f32
    compute.local[33] = 0f32
    compute.local[41] = 0f32
    compute.local[49] = 0f32
    compute.local[57] = 0f32
    compute.local[3] = 0f32
    compute.local[11] = 0f32
    compute.local[19] = 0f32
    compute.local[27] = 0f32
    compute.local[35] = 0f32
    compute.local[43] = 0f32
    compute.local[51] = 0f32
    compute.local[59] = 0f32
    compute.local[5] = 0f32
    compute.local[13] = 0f32
    compute.local[21] = 0f32
    compute.local[29] = 0f32
    compute.local[37] = 0f32
    compute.local[45] = 0f32
    compute.local[53] = 0f32
    compute.local[61] = 0f32
    compute.local[7] = 0f32
    compute.local[15] = 0f32
    compute.local[23] = 0f32
    compute.local[31] = 0f32
    compute.local[39] = 0f32
    compute.local[47] = 0f32
    compute.local[55] = 0f32
    compute.local[63] = 0f32
    for (rc.outer: int32, 0, 16) {
      for (ry.outer: int32, 0, 3) {
        for (rx.outer: int32, 0, 3) {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
          attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
            pad_temp.shared[((threadIdx.z_1*112) + (threadIdx.x_1*8))] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv((threadIdx.x_1*8), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv((threadIdx.x_1*8), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod((threadIdx.x_1*8), 28)))) && ((rx.outer + floormod((threadIdx.x_1*8), 28)) < 29)), (float32*)placeholder_4[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 29)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 1)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 1), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 1), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 1), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 1), 28)) < 29)), (float32*)placeholder_4[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 28)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 2)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 2), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 2), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 2), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 2), 28)) < 29)), (float32*)placeholder_4[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 27)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 3)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 3), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 3), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 3), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 3), 28)) < 29)), (float32*)placeholder_4[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 26)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 4)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 4), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 4), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 4), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 4), 28)) < 29)), (float32*)placeholder_4[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 25)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 5)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 5), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 5), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 5), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 5), 28)) < 29)), (float32*)placeholder_4[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 24)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 6)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 6), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 6), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 6), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 6), 28)) < 29)), (float32*)placeholder_4[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 23)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*112) + (threadIdx.x_1*8)) + 7)] = @tir.if_then_else(((((1 <= (((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 7), 28)) + ry.outer)) && ((((blockIdx.y*4) + floordiv(((threadIdx.x_1*8) + 7), 28)) + ry.outer) < 29)) && (1 <= (rx.outer + floormod(((threadIdx.x_1*8) + 7), 28)))) && ((rx.outer + floormod(((threadIdx.x_1*8) + 7), 28)) < 29)), (float32*)placeholder_4[((((((((floordiv(blockIdx.z, 2)*100352) + (rc.outer*6272)) + (threadIdx.z_1*784)) + (blockIdx.y*112)) + (ry.outer*28)) + (threadIdx.x_1*8)) + rx.outer) - 22)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
            if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 8)) < 64) {
              if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 512) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[((threadIdx.z_2*64) + (threadIdx.x_2*5))] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 2)*73728) + (threadIdx.z_2*9216)) + (floordiv((threadIdx.x_2*5), 8)*1152)) + (rc.outer*72)) + (floormod((threadIdx.x_2*5), 8)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 1), 8)) < 64) {
              if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 511) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 2)*73728) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*5) + 1), 8)*1152)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 1), 8)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 8)) < 64) {
              if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 510) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 2)*73728) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*5) + 2), 8)*1152)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 2), 8)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 8)) < 64) {
              if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 509) {
                if (threadIdx.x_2 < 13) {
                  placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 2)*73728) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*5) + 3), 8)*1152)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 3), 8)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 4), 8)) < 64) {
              if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 508) {
                if (threadIdx.x_2 < 12) {
                  placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 2)*73728) + (threadIdx.z_2*9216)) + (floordiv(((threadIdx.x_2*5) + 4), 8)*1152)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 4), 8)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
          }
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
          compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
          compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
          compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
          compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
          compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
          compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
          compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(threadIdx.x + 784)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(threadIdx.x + 812)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(threadIdx.x + 840)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(threadIdx.x + 868)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(threadIdx.x + 798)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(threadIdx.x + 826)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(threadIdx.x + 854)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
          compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(threadIdx.x + 882)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        }
      }
    }
    compute_2[((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6272)] = (float32*)compute.local[8]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12544)] = (float32*)compute.local[16]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18816)] = (float32*)compute.local[24]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25088)] = (float32*)compute.local[32]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31360)] = (float32*)compute.local[40]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37632)] = (float32*)compute.local[48]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43904)] = (float32*)compute.local[56]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 28)] = (float32*)compute.local[2]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6300)] = (float32*)compute.local[10]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12572)] = (float32*)compute.local[18]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18844)] = (float32*)compute.local[26]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25116)] = (float32*)compute.local[34]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31388)] = (float32*)compute.local[42]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37660)] = (float32*)compute.local[50]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43932)] = (float32*)compute.local[58]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 56)] = (float32*)compute.local[4]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6328)] = (float32*)compute.local[12]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12600)] = (float32*)compute.local[20]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18872)] = (float32*)compute.local[28]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25144)] = (float32*)compute.local[36]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31416)] = (float32*)compute.local[44]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37688)] = (float32*)compute.local[52]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43960)] = (float32*)compute.local[60]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 84)] = (float32*)compute.local[6]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6356)] = (float32*)compute.local[14]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12628)] = (float32*)compute.local[22]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18900)] = (float32*)compute.local[30]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25172)] = (float32*)compute.local[38]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31444)] = (float32*)compute.local[46]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37716)] = (float32*)compute.local[54]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43988)] = (float32*)compute.local[62]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 14)] = (float32*)compute.local[1]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6286)] = (float32*)compute.local[9]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12558)] = (float32*)compute.local[17]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18830)] = (float32*)compute.local[25]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25102)] = (float32*)compute.local[33]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31374)] = (float32*)compute.local[41]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37646)] = (float32*)compute.local[49]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43918)] = (float32*)compute.local[57]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 42)] = (float32*)compute.local[3]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6314)] = (float32*)compute.local[11]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12586)] = (float32*)compute.local[19]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18858)] = (float32*)compute.local[27]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25130)] = (float32*)compute.local[35]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31402)] = (float32*)compute.local[43]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37674)] = (float32*)compute.local[51]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43946)] = (float32*)compute.local[59]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 70)] = (float32*)compute.local[5]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6342)] = (float32*)compute.local[13]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12614)] = (float32*)compute.local[21]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18886)] = (float32*)compute.local[29]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25158)] = (float32*)compute.local[37]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31430)] = (float32*)compute.local[45]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37702)] = (float32*)compute.local[53]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 43974)] = (float32*)compute.local[61]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 98)] = (float32*)compute.local[7]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 6370)] = (float32*)compute.local[15]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 12642)] = (float32*)compute.local[23]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 18914)] = (float32*)compute.local[31]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 25186)] = (float32*)compute.local[39]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 31458)] = (float32*)compute.local[47]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 37730)] = (float32*)compute.local[55]
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + threadIdx.x) + 44002)] = (float32*)compute.local[63]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_7", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [32, 128, 28, 28], []),
             compute: Buffer(compute_2: handle, float32, [32, 512, 28, 28], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 128, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 128;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [64]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [112]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 14;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 14;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 2 {
    compute.local[0] = 0f32
    compute.local[8] = 0f32
    compute.local[16] = 0f32
    compute.local[24] = 0f32
    compute.local[32] = 0f32
    compute.local[40] = 0f32
    compute.local[48] = 0f32
    compute.local[56] = 0f32
    compute.local[4] = 0f32
    compute.local[12] = 0f32
    compute.local[20] = 0f32
    compute.local[28] = 0f32
    compute.local[36] = 0f32
    compute.local[44] = 0f32
    compute.local[52] = 0f32
    compute.local[60] = 0f32
    compute.local[1] = 0f32
    compute.local[9] = 0f32
    compute.local[17] = 0f32
    compute.local[25] = 0f32
    compute.local[33] = 0f32
    compute.local[41] = 0f32
    compute.local[49] = 0f32
    compute.local[57] = 0f32
    compute.local[5] = 0f32
    compute.local[13] = 0f32
    compute.local[21] = 0f32
    compute.local[29] = 0f32
    compute.local[37] = 0f32
    compute.local[45] = 0f32
    compute.local[53] = 0f32
    compute.local[61] = 0f32
    compute.local[2] = 0f32
    compute.local[10] = 0f32
    compute.local[18] = 0f32
    compute.local[26] = 0f32
    compute.local[34] = 0f32
    compute.local[42] = 0f32
    compute.local[50] = 0f32
    compute.local[58] = 0f32
    compute.local[6] = 0f32
    compute.local[14] = 0f32
    compute.local[22] = 0f32
    compute.local[30] = 0f32
    compute.local[38] = 0f32
    compute.local[46] = 0f32
    compute.local[54] = 0f32
    compute.local[62] = 0f32
    compute.local[3] = 0f32
    compute.local[11] = 0f32
    compute.local[19] = 0f32
    compute.local[27] = 0f32
    compute.local[35] = 0f32
    compute.local[43] = 0f32
    compute.local[51] = 0f32
    compute.local[59] = 0f32
    compute.local[7] = 0f32
    compute.local[15] = 0f32
    compute.local[23] = 0f32
    compute.local[31] = 0f32
    compute.local[39] = 0f32
    compute.local[47] = 0f32
    compute.local[55] = 0f32
    compute.local[63] = 0f32
    for (rc.outer: int32, 0, 64) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 14;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 2;
      pad_temp.shared[(((threadIdx.z_1*28) + (threadIdx.y_1*2)) + threadIdx.x_1)] = (float32*)placeholder_4[((((((floordiv(blockIdx.z, 4)*100352) + (rc.outer*1568)) + (threadIdx.z_1*392)) + (threadIdx.y_1*28)) + (blockIdx.x*2)) + threadIdx.x_1)]
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 14;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 2 {
        if (((threadIdx.z_2*32) + floordiv(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2)) < 128) {
          if ((((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3)) < 256) {
            if (((threadIdx.y_2*5) + (threadIdx.x_2*3)) < 64) {
              placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3))] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 4)*16384) + (threadIdx.z_2*4096)) + (floordiv(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2)*128)) + (rc.outer*2)) + floormod(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2))]
            }
          }
        }
        if (((threadIdx.z_2*32) + floordiv((((threadIdx.y_2*5) + (threadIdx.x_2*3)) + 1), 2)) < 128) {
          if ((((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3)) < 255) {
            if (((threadIdx.y_2*5) + (threadIdx.x_2*3)) < 63) {
              placeholder.shared[((((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3)) + 1)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 4)*16384) + (threadIdx.z_2*4096)) + (floordiv((((threadIdx.y_2*5) + (threadIdx.x_2*3)) + 1), 2)*128)) + (rc.outer*2)) + floormod((((threadIdx.y_2*5) + (threadIdx.x_2*3)) + 1), 2))]
            }
          }
        }
        if (((threadIdx.z_2*32) + floordiv(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2)) < 127) {
          if ((((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3)) < 254) {
            if (((threadIdx.y_2*5) + (threadIdx.x_2*3)) < 62) {
              if (threadIdx.x_2 < 1) {
                placeholder.shared[((((threadIdx.z_2*64) + (threadIdx.y_2*5)) + (threadIdx.x_2*3)) + 2)] = (float32*)placeholder_5[((((((floormod(blockIdx.z, 4)*16384) + (threadIdx.z_2*4096)) + (floordiv(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2)*128)) + (rc.outer*2)) + floormod(((threadIdx.y_2*5) + (threadIdx.x_2*3)), 2)) + 128)]
              }
            }
          }
        }
      }
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 32)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 96)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 160)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
      compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 224)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 32)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 96)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 160)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
      compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 224)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 34)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 98)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 162)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
      compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 226)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 34)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 98)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 162)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
      compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 226)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 36)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 100)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 164)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
      compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 228)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 36)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 100)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 164)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
      compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 228)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 38)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 102)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 166)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
      compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[((threadIdx.y*2) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*8) + 230)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 38)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 102)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 166)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
      compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 230)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 33)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 97)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 161)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
      compute.local[56] = ((float32*)compute.local[56] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 225)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 33)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 97)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 161)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
      compute.local[60] = ((float32*)compute.local[60] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 225)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 35)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 99)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 163)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
      compute.local[57] = ((float32*)compute.local[57] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 227)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 35)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 99)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 163)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
      compute.local[61] = ((float32*)compute.local[61] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 227)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 37)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 101)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 165)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
      compute.local[58] = ((float32*)compute.local[58] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 229)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 37)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 101)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 165)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
      compute.local[62] = ((float32*)compute.local[62] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 229)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 39)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 103)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 167)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
      compute.local[59] = ((float32*)compute.local[59] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 231)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 39)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 103)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 167)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
      compute.local[63] = ((float32*)compute.local[63] + ((float32*)pad_temp.shared[(((threadIdx.y*2) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 231)]))
    }
    compute_2[(((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 12544)] = (float32*)compute.local[8]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 25088)] = (float32*)compute.local[16]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 37632)] = (float32*)compute.local[24]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 50176)] = (float32*)compute.local[32]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 62720)] = (float32*)compute.local[40]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 75264)] = (float32*)compute.local[48]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 87808)] = (float32*)compute.local[56]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 392)] = (float32*)compute.local[4]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 12936)] = (float32*)compute.local[12]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 25480)] = (float32*)compute.local[20]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 38024)] = (float32*)compute.local[28]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 50568)] = (float32*)compute.local[36]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 63112)] = (float32*)compute.local[44]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 75656)] = (float32*)compute.local[52]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 88200)] = (float32*)compute.local[60]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 784)] = (float32*)compute.local[1]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 13328)] = (float32*)compute.local[9]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 25872)] = (float32*)compute.local[17]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 38416)] = (float32*)compute.local[25]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 50960)] = (float32*)compute.local[33]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 63504)] = (float32*)compute.local[41]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 76048)] = (float32*)compute.local[49]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 88592)] = (float32*)compute.local[57]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 1176)] = (float32*)compute.local[5]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 13720)] = (float32*)compute.local[13]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 26264)] = (float32*)compute.local[21]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 38808)] = (float32*)compute.local[29]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 51352)] = (float32*)compute.local[37]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 63896)] = (float32*)compute.local[45]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 76440)] = (float32*)compute.local[53]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 88984)] = (float32*)compute.local[61]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 1568)] = (float32*)compute.local[2]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 14112)] = (float32*)compute.local[10]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 26656)] = (float32*)compute.local[18]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 39200)] = (float32*)compute.local[26]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 51744)] = (float32*)compute.local[34]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 64288)] = (float32*)compute.local[42]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 76832)] = (float32*)compute.local[50]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 89376)] = (float32*)compute.local[58]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 1960)] = (float32*)compute.local[6]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 14504)] = (float32*)compute.local[14]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 27048)] = (float32*)compute.local[22]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 39592)] = (float32*)compute.local[30]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 52136)] = (float32*)compute.local[38]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 64680)] = (float32*)compute.local[46]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 77224)] = (float32*)compute.local[54]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 89768)] = (float32*)compute.local[62]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 2352)] = (float32*)compute.local[3]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 14896)] = (float32*)compute.local[11]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 27440)] = (float32*)compute.local[19]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 39984)] = (float32*)compute.local[27]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 52528)] = (float32*)compute.local[35]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 65072)] = (float32*)compute.local[43]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 77616)] = (float32*)compute.local[51]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 90160)] = (float32*)compute.local[59]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 2744)] = (float32*)compute.local[7]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 15288)] = (float32*)compute.local[15]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 27832)] = (float32*)compute.local[23]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 40376)] = (float32*)compute.local[31]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 52920)] = (float32*)compute.local[39]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 65464)] = (float32*)compute.local[47]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 78008)] = (float32*)compute.local[55]
    compute_2[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (threadIdx.y*28)) + (blockIdx.x*2)) + threadIdx.x) + 90552)] = (float32*)compute.local[63]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_17", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 512, 28, 28], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 512, 28, 28], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 49) {
    T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[floordiv(floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 401408), 784)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_8", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [32, 256, 56, 56], []),
             compute: Buffer(compute_2: handle, float32, [32, 512, 28, 28], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 256, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 256;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1404]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute.local[0] = 0f32
    compute.local[7] = 0f32
    compute.local[14] = 0f32
    compute.local[21] = 0f32
    compute.local[1] = 0f32
    compute.local[8] = 0f32
    compute.local[15] = 0f32
    compute.local[22] = 0f32
    compute.local[2] = 0f32
    compute.local[9] = 0f32
    compute.local[16] = 0f32
    compute.local[23] = 0f32
    compute.local[3] = 0f32
    compute.local[10] = 0f32
    compute.local[17] = 0f32
    compute.local[24] = 0f32
    compute.local[4] = 0f32
    compute.local[11] = 0f32
    compute.local[18] = 0f32
    compute.local[25] = 0f32
    compute.local[5] = 0f32
    compute.local[12] = 0f32
    compute.local[19] = 0f32
    compute.local[26] = 0f32
    compute.local[6] = 0f32
    compute.local[13] = 0f32
    compute.local[20] = 0f32
    compute.local[27] = 0f32
    for (rc.outer: int32, 0, 64) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1404) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[((threadIdx.z_1*88) + (threadIdx.x_1*7))] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 351), 27)*56)) + (blockIdx.x*28)) + floormod(((threadIdx.z_1*88) + (threadIdx.x_1*7)), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1403) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 1), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1402) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 2), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1401) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 3), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1400) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 4), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1399) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 5), 27))]
          }
        }
        if (((threadIdx.z_1*88) + (threadIdx.x_1*7)) < 1398) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 8)*802816) + (rc.outer*12544)) + (floordiv((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 351)*3136)) + (blockIdx.y*784)) + (floordiv(floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 351), 27)*56)) + (blockIdx.x*28)) + floormod((((threadIdx.z_1*88) + (threadIdx.x_1*7)) + 6), 27))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_2*4) + floordiv(threadIdx.x_2, 2)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 256) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[((threadIdx.z_2*16) + (threadIdx.x_2*2))] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 8)*16384) + (threadIdx.z_2*1024)) + (floordiv(threadIdx.x_2, 2)*256)) + (rc.outer*4)) + (floormod(threadIdx.x_2, 2)*2))]
            }
          }
        }
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + 1), 4)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 255) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + 1)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 8)*16384) + (threadIdx.z_2*1024)) + (floordiv(((threadIdx.x_2*2) + 1), 4)*256)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + 1), 4))]
            }
          }
        }
      }
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 351)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 405)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 459)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 513)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 567)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 621)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 675)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 702)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 756)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 810)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 864)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 918)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 972)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1026)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1053)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1107)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1161)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1215)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1269)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1323)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 1377)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
    }
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12544)] = (float32*)compute.local[7]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25088)] = (float32*)compute.local[14]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37632)] = (float32*)compute.local[21]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 28)] = (float32*)compute.local[1]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12572)] = (float32*)compute.local[8]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25116)] = (float32*)compute.local[15]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37660)] = (float32*)compute.local[22]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 56)] = (float32*)compute.local[2]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12600)] = (float32*)compute.local[9]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25144)] = (float32*)compute.local[16]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37688)] = (float32*)compute.local[23]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 84)] = (float32*)compute.local[3]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12628)] = (float32*)compute.local[10]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25172)] = (float32*)compute.local[17]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37716)] = (float32*)compute.local[24]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 112)] = (float32*)compute.local[4]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12656)] = (float32*)compute.local[11]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25200)] = (float32*)compute.local[18]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37744)] = (float32*)compute.local[25]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 140)] = (float32*)compute.local[5]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12684)] = (float32*)compute.local[12]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25228)] = (float32*)compute.local[19]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37772)] = (float32*)compute.local[26]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 168)] = (float32*)compute.local[6]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12712)] = (float32*)compute.local[13]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25256)] = (float32*)compute.local[20]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37800)] = (float32*)compute.local[27]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_18", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 512, 28, 28], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 512, 28, 28], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [32, 512, 28, 28], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 49) {
    T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_1: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_relu_4", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 512, 28, 28], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 512, 28, 28], [])}
  buffer_map = {placeholder_1: placeholder, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 49) {
    T_relu_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max((float32*)placeholder_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f32)
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_9", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 128, 28, 28], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 512, 28, 28], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [128, 512, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 64;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [392]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [256]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 4;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 2;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute.local[0] = 0f32
    compute.local[7] = 0f32
    compute.local[14] = 0f32
    compute.local[21] = 0f32
    compute.local[1] = 0f32
    compute.local[8] = 0f32
    compute.local[15] = 0f32
    compute.local[22] = 0f32
    compute.local[2] = 0f32
    compute.local[9] = 0f32
    compute.local[16] = 0f32
    compute.local[23] = 0f32
    compute.local[3] = 0f32
    compute.local[10] = 0f32
    compute.local[17] = 0f32
    compute.local[24] = 0f32
    compute.local[4] = 0f32
    compute.local[11] = 0f32
    compute.local[18] = 0f32
    compute.local[25] = 0f32
    compute.local[5] = 0f32
    compute.local[12] = 0f32
    compute.local[19] = 0f32
    compute.local[26] = 0f32
    compute.local[6] = 0f32
    compute.local[13] = 0f32
    compute.local[20] = 0f32
    compute.local[27] = 0f32
    for (rc.outer: int32, 0, 128) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_1*25) + (threadIdx.x_1*2)) < 392) {
          if (threadIdx.x_1 < 13) {
            pad_temp.shared[((threadIdx.z_1*25) + (threadIdx.x_1*2))] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 2)*401408) + (rc.outer*3136)) + (floordiv(((threadIdx.z_1*25) + (threadIdx.x_1*2)), 98)*784)) + (blockIdx.y*196)) + (floordiv(floormod(((threadIdx.z_1*25) + (threadIdx.x_1*2)), 98), 14)*28)) + (blockIdx.x*14)) + floormod(((threadIdx.z_1*25) + (threadIdx.x_1*2)), 14))]
          }
        }
        if (((threadIdx.z_1*25) + (threadIdx.x_1*2)) < 391) {
          if (threadIdx.x_1 < 12) {
            pad_temp.shared[(((threadIdx.z_1*25) + (threadIdx.x_1*2)) + 1)] = (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 2)*401408) + (rc.outer*3136)) + (floordiv((((threadIdx.z_1*25) + (threadIdx.x_1*2)) + 1), 98)*784)) + (blockIdx.y*196)) + (floordiv(floormod((((threadIdx.z_1*25) + (threadIdx.x_1*2)) + 1), 98), 14)*28)) + (blockIdx.x*14)) + floormod((((threadIdx.z_1*25) + (threadIdx.x_1*2)) + 1), 14))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 16;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
        if (((threadIdx.z_2*4) + floordiv(threadIdx.x_2, 2)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 256) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[((threadIdx.z_2*16) + (threadIdx.x_2*2))] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 2)*32768) + (threadIdx.z_2*2048)) + (floordiv(threadIdx.x_2, 2)*512)) + (rc.outer*4)) + (floormod(threadIdx.x_2, 2)*2))]
            }
          }
        }
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + 1), 4)) < 64) {
          if (((threadIdx.z_2*16) + (threadIdx.x_2*2)) < 255) {
            if (threadIdx.x_2 < 8) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + 1)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 2)*32768) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*2) + 1), 4)*512)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + 1), 4))]
            }
          }
        }
      }
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z*4)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*4) + 64)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*4) + 128)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*4) + 192)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*4) + 1)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*4) + 65)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*4) + 129)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*4) + 193)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 2)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 66)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 130)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*4) + 194)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*4) + 3)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*4) + 67)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*4) + 131)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*4) + 195)]))
    }
    compute_2[(((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12544)] = (float32*)compute.local[7]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25088)] = (float32*)compute.local[14]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37632)] = (float32*)compute.local[21]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 28)] = (float32*)compute.local[1]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12572)] = (float32*)compute.local[8]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25116)] = (float32*)compute.local[15]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37660)] = (float32*)compute.local[22]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 56)] = (float32*)compute.local[2]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12600)] = (float32*)compute.local[9]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25144)] = (float32*)compute.local[16]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37688)] = (float32*)compute.local[23]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 84)] = (float32*)compute.local[3]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12628)] = (float32*)compute.local[10]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25172)] = (float32*)compute.local[17]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37716)] = (float32*)compute.local[24]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 112)] = (float32*)compute.local[4]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12656)] = (float32*)compute.local[11]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25200)] = (float32*)compute.local[18]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37744)] = (float32*)compute.local[25]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 140)] = (float32*)compute.local[5]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12684)] = (float32*)compute.local[12]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25228)] = (float32*)compute.local[19]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37772)] = (float32*)compute.local[26]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 168)] = (float32*)compute.local[6]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 12712)] = (float32*)compute.local[13]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 25256)] = (float32*)compute.local[20]
    compute_2[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*196)) + (blockIdx.x*14)) + threadIdx.x) + 37800)] = (float32*)compute.local[27]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_10", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 256, 14, 14], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 512, 28, 28], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 512, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 256;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1404]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute.local[0] = 0f32
    compute.local[7] = 0f32
    compute.local[14] = 0f32
    compute.local[21] = 0f32
    compute.local[1] = 0f32
    compute.local[8] = 0f32
    compute.local[15] = 0f32
    compute.local[22] = 0f32
    compute.local[2] = 0f32
    compute.local[9] = 0f32
    compute.local[16] = 0f32
    compute.local[23] = 0f32
    compute.local[3] = 0f32
    compute.local[10] = 0f32
    compute.local[17] = 0f32
    compute.local[24] = 0f32
    compute.local[4] = 0f32
    compute.local[11] = 0f32
    compute.local[18] = 0f32
    compute.local[25] = 0f32
    compute.local[5] = 0f32
    compute.local[12] = 0f32
    compute.local[19] = 0f32
    compute.local[26] = 0f32
    compute.local[6] = 0f32
    compute.local[13] = 0f32
    compute.local[20] = 0f32
    compute.local[27] = 0f32
    for (rc.outer: int32, 0, 128) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 13) {
        if ((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 1404) {
          if (((threadIdx.x_1*13) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 176) {
            pad_temp.shared[(((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_4[((((((floordiv(blockIdx.z, 8)*401408) + (rc.outer*3136)) + (floordiv((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 351)*784)) + (blockIdx.y*392)) + (floordiv(floormod((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 351), 27)*28)) + floormod((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 27))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 2) {
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)) < 32) {
          if ((((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 128) {
            if (((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 16) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 8)*16384) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)*512)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4))]
            }
          }
        }
      }
      for (rc.inner: int32, 0, 4) {
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
      }
    }
    compute_2[((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1568)] = (float32*)compute.local[7]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3136)] = (float32*)compute.local[14]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4704)] = (float32*)compute.local[21]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 14)] = (float32*)compute.local[1]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1582)] = (float32*)compute.local[8]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3150)] = (float32*)compute.local[15]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4718)] = (float32*)compute.local[22]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 28)] = (float32*)compute.local[2]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1596)] = (float32*)compute.local[9]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3164)] = (float32*)compute.local[16]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4732)] = (float32*)compute.local[23]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 42)] = (float32*)compute.local[3]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1610)] = (float32*)compute.local[10]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3178)] = (float32*)compute.local[17]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4746)] = (float32*)compute.local[24]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 56)] = (float32*)compute.local[4]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1624)] = (float32*)compute.local[11]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3192)] = (float32*)compute.local[18]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4760)] = (float32*)compute.local[25]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 70)] = (float32*)compute.local[5]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1638)] = (float32*)compute.local[12]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3206)] = (float32*)compute.local[19]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4774)] = (float32*)compute.local[26]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 84)] = (float32*)compute.local[6]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1652)] = (float32*)compute.local[13]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3220)] = (float32*)compute.local[20]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4788)] = (float32*)compute.local[27]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_19", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 256, 14, 14], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 256, 14, 14], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 7) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 1605632) {
      T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[floordiv(floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 50176), 196)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_1: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_relu_5", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 256, 14, 14], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 256, 14, 14], [])}
  buffer_map = {placeholder_1: placeholder, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 7) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 1605632) {
      T_relu_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max((float32*)placeholder_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f32)
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_11", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 256, 14, 14], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 256, 14, 14], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 256, 3, 3], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 128;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [784]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute.local[0] = 0f32
    compute.local[7] = 0f32
    compute.local[14] = 0f32
    compute.local[21] = 0f32
    compute.local[28] = 0f32
    compute.local[35] = 0f32
    compute.local[42] = 0f32
    compute.local[49] = 0f32
    compute.local[1] = 0f32
    compute.local[8] = 0f32
    compute.local[15] = 0f32
    compute.local[22] = 0f32
    compute.local[29] = 0f32
    compute.local[36] = 0f32
    compute.local[43] = 0f32
    compute.local[50] = 0f32
    compute.local[2] = 0f32
    compute.local[9] = 0f32
    compute.local[16] = 0f32
    compute.local[23] = 0f32
    compute.local[30] = 0f32
    compute.local[37] = 0f32
    compute.local[44] = 0f32
    compute.local[51] = 0f32
    compute.local[3] = 0f32
    compute.local[10] = 0f32
    compute.local[17] = 0f32
    compute.local[24] = 0f32
    compute.local[31] = 0f32
    compute.local[38] = 0f32
    compute.local[45] = 0f32
    compute.local[52] = 0f32
    compute.local[4] = 0f32
    compute.local[11] = 0f32
    compute.local[18] = 0f32
    compute.local[25] = 0f32
    compute.local[32] = 0f32
    compute.local[39] = 0f32
    compute.local[46] = 0f32
    compute.local[53] = 0f32
    compute.local[5] = 0f32
    compute.local[12] = 0f32
    compute.local[19] = 0f32
    compute.local[26] = 0f32
    compute.local[33] = 0f32
    compute.local[40] = 0f32
    compute.local[47] = 0f32
    compute.local[54] = 0f32
    compute.local[6] = 0f32
    compute.local[13] = 0f32
    compute.local[20] = 0f32
    compute.local[27] = 0f32
    compute.local[34] = 0f32
    compute.local[41] = 0f32
    compute.local[48] = 0f32
    compute.local[55] = 0f32
    for (rc.outer: int32, 0, 32) {
      for (ry.outer: int32, 0, 3) {
        attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          pad_temp.shared[((threadIdx.z_1*98) + (threadIdx.x_1*7))] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer) < 15)) && (1 <= floormod(threadIdx.x_1, 2))), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 15)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 1)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 1), 14))), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 14)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 2)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 2), 14))), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 13)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 3)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 3), 14))), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 12)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 4)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 4), 14))), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 11)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 5)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 5), 14))), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 10)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 6)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer) < 15)) && (1 <= floormod(((threadIdx.x_1*7) + 6), 14))), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 9)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 512) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[((threadIdx.z_2*64) + (threadIdx.x_2*5))] = (float32*)placeholder_5[((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv((threadIdx.x_2*5), 8)*2304)) + (rc.outer*72)) + (floormod((threadIdx.x_2*5), 8)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 1), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 511) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_5[((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 1), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 1), 8)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 510) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_5[((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 2), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 2), 8)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 509) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_5[((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 3), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 3), 8)*9)) + (ry.outer*3))]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 4), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 508) {
              if (threadIdx.x_2 < 12) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_5[((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 4), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 4), 8)*9)) + (ry.outer*3))]
              }
            }
          }
        }
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          pad_temp.shared[((threadIdx.z_1*98) + (threadIdx.x_1*7))] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer) < 15)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 14)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 1)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer) < 15)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 13)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 2)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer) < 15)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 12)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 3)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer) < 15)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 11)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 4)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer) < 15)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 10)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 5)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer) < 15)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 9)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 6)] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer) < 15)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 8)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 512) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[((threadIdx.z_2*64) + (threadIdx.x_2*5))] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv((threadIdx.x_2*5), 8)*2304)) + (rc.outer*72)) + (floormod((threadIdx.x_2*5), 8)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 1), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 511) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 1), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 1), 8)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 510) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 2), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 2), 8)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 509) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 3), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 3), 8)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 4), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 508) {
              if (threadIdx.x_2 < 12) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 4), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 4), 8)*9)) + (ry.outer*3)) + 1)]
              }
            }
          }
        }
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          pad_temp.shared[((threadIdx.z_1*98) + (threadIdx.x_1*7))] = @tir.if_then_else(((1 <= (((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(threadIdx.x_1, 2)) + ry.outer) < 15)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 13)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 1)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 1), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 1), 14) < 13)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 12)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 2)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 2), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 2), 14) < 13)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 11)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 3)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 3), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 3), 14) < 13)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 10)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 4)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 4), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 4), 14) < 13)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 9)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 5)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 5), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 5), 14) < 13)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 8)], 0f32, dtype=float32)
          pad_temp.shared[(((threadIdx.z_1*98) + (threadIdx.x_1*7)) + 6)] = @tir.if_then_else((((1 <= (((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer)) && ((((blockIdx.y*7) + floordiv(((threadIdx.x_1*7) + 6), 14)) + ry.outer) < 15)) && (floormod(((threadIdx.x_1*7) + 6), 14) < 13)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 4)*50176) + (rc.outer*1568)) + (threadIdx.z_1*196)) + (blockIdx.y*98)) + (ry.outer*14)) + (threadIdx.x_1*7)) - 7)], 0f32, dtype=float32)
        }
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
          if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 512) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[((threadIdx.z_2*64) + (threadIdx.x_2*5))] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv((threadIdx.x_2*5), 8)*2304)) + (rc.outer*72)) + (floormod((threadIdx.x_2*5), 8)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 1), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 511) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 1), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 1), 8)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 510) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 2), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 2), 8)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 509) {
              if (threadIdx.x_2 < 13) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 3), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 3), 8)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
          if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 4), 8)) < 64) {
            if (((threadIdx.z_2*64) + (threadIdx.x_2*5)) < 508) {
              if (threadIdx.x_2 < 12) {
                placeholder.shared[(((threadIdx.z_2*64) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 4)*147456) + (threadIdx.z_2*18432)) + (floordiv(((threadIdx.x_2*5) + 4), 8)*2304)) + (rc.outer*72)) + (floormod(((threadIdx.x_2*5) + 4), 8)*9)) + (ry.outer*3)) + 2)]
              }
            }
          }
        }
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z*8)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 64)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 128)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 192)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 256)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 320)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 384)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*8) + 448)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 1)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 65)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 129)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 193)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 257)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 321)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 385)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*8) + 449)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 196)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 210)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 224)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 238)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 252)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 266)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 2)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 66)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 130)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 194)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 258)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 322)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 386)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 280)]*(float32*)placeholder.shared[((threadIdx.z*8) + 450)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 294)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 308)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 322)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 336)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 350)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 364)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 3)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 67)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 131)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 195)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 259)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 323)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 387)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 378)]*(float32*)placeholder.shared[((threadIdx.z*8) + 451)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 392)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 406)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 420)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 434)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 448)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 462)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 4)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 68)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 132)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 196)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 260)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 324)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 388)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 476)]*(float32*)placeholder.shared[((threadIdx.z*8) + 452)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 490)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 504)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 518)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 532)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 546)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 560)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 5)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 69)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 133)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 197)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 261)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 325)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 389)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 574)]*(float32*)placeholder.shared[((threadIdx.z*8) + 453)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 588)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 602)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 616)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 630)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 644)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 658)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 6)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 70)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 134)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 198)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 262)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 326)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 390)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 672)]*(float32*)placeholder.shared[((threadIdx.z*8) + 454)]))
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 686)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 700)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 714)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 728)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 742)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 756)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 7)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 71)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 135)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 199)]))
        compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 263)]))
        compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 327)]))
        compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 391)]))
        compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 770)]*(float32*)placeholder.shared[((threadIdx.z*8) + 455)]))
      }
    }
    compute_2[((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1568)] = (float32*)compute.local[7]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3136)] = (float32*)compute.local[14]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4704)] = (float32*)compute.local[21]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6272)] = (float32*)compute.local[28]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7840)] = (float32*)compute.local[35]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9408)] = (float32*)compute.local[42]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 10976)] = (float32*)compute.local[49]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 14)] = (float32*)compute.local[1]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1582)] = (float32*)compute.local[8]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3150)] = (float32*)compute.local[15]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4718)] = (float32*)compute.local[22]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6286)] = (float32*)compute.local[29]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7854)] = (float32*)compute.local[36]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9422)] = (float32*)compute.local[43]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 10990)] = (float32*)compute.local[50]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 28)] = (float32*)compute.local[2]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1596)] = (float32*)compute.local[9]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3164)] = (float32*)compute.local[16]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4732)] = (float32*)compute.local[23]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6300)] = (float32*)compute.local[30]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7868)] = (float32*)compute.local[37]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9436)] = (float32*)compute.local[44]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 11004)] = (float32*)compute.local[51]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 42)] = (float32*)compute.local[3]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1610)] = (float32*)compute.local[10]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3178)] = (float32*)compute.local[17]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4746)] = (float32*)compute.local[24]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6314)] = (float32*)compute.local[31]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7882)] = (float32*)compute.local[38]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9450)] = (float32*)compute.local[45]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 11018)] = (float32*)compute.local[52]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 56)] = (float32*)compute.local[4]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1624)] = (float32*)compute.local[11]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3192)] = (float32*)compute.local[18]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4760)] = (float32*)compute.local[25]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6328)] = (float32*)compute.local[32]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7896)] = (float32*)compute.local[39]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9464)] = (float32*)compute.local[46]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 11032)] = (float32*)compute.local[53]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 70)] = (float32*)compute.local[5]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1638)] = (float32*)compute.local[12]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3206)] = (float32*)compute.local[19]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4774)] = (float32*)compute.local[26]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6342)] = (float32*)compute.local[33]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7910)] = (float32*)compute.local[40]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9478)] = (float32*)compute.local[47]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 11046)] = (float32*)compute.local[54]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 84)] = (float32*)compute.local[6]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1652)] = (float32*)compute.local[13]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3220)] = (float32*)compute.local[20]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4788)] = (float32*)compute.local[27]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 6356)] = (float32*)compute.local[34]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 7924)] = (float32*)compute.local[41]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 9492)] = (float32*)compute.local[48]
    compute_2[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 11060)] = (float32*)compute.local[55]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_12", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 1024, 14, 14], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 256, 14, 14], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1024, 256, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 2048;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [196]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [16]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute.local[0] = 0f32
    compute.local[14] = 0f32
    compute.local[28] = 0f32
    compute.local[42] = 0f32
    compute.local[1] = 0f32
    compute.local[15] = 0f32
    compute.local[29] = 0f32
    compute.local[43] = 0f32
    compute.local[2] = 0f32
    compute.local[16] = 0f32
    compute.local[30] = 0f32
    compute.local[44] = 0f32
    compute.local[3] = 0f32
    compute.local[17] = 0f32
    compute.local[31] = 0f32
    compute.local[45] = 0f32
    compute.local[4] = 0f32
    compute.local[18] = 0f32
    compute.local[32] = 0f32
    compute.local[46] = 0f32
    compute.local[5] = 0f32
    compute.local[19] = 0f32
    compute.local[33] = 0f32
    compute.local[47] = 0f32
    compute.local[6] = 0f32
    compute.local[20] = 0f32
    compute.local[34] = 0f32
    compute.local[48] = 0f32
    compute.local[7] = 0f32
    compute.local[21] = 0f32
    compute.local[35] = 0f32
    compute.local[49] = 0f32
    compute.local[8] = 0f32
    compute.local[22] = 0f32
    compute.local[36] = 0f32
    compute.local[50] = 0f32
    compute.local[9] = 0f32
    compute.local[23] = 0f32
    compute.local[37] = 0f32
    compute.local[51] = 0f32
    compute.local[10] = 0f32
    compute.local[24] = 0f32
    compute.local[38] = 0f32
    compute.local[52] = 0f32
    compute.local[11] = 0f32
    compute.local[25] = 0f32
    compute.local[39] = 0f32
    compute.local[53] = 0f32
    compute.local[12] = 0f32
    compute.local[26] = 0f32
    compute.local[40] = 0f32
    compute.local[54] = 0f32
    compute.local[13] = 0f32
    compute.local[27] = 0f32
    compute.local[41] = 0f32
    compute.local[55] = 0f32
    for (rc.outer: int32, 0, 256) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 4) {
        if ((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 196) {
          if (((threadIdx.x_1*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 49) {
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*50176) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      if (((threadIdx.z_2*4) + threadIdx.x_2) < 16) {
        if (threadIdx.x_2 < 4) {
          placeholder.shared[((threadIdx.z_2*4) + threadIdx.x_2)] = (float32*)placeholder_5[((((floormod(blockIdx.z, 64)*4096) + (threadIdx.z_2*1024)) + (threadIdx.x_2*256)) + rc.outer)]
        }
      }
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[threadIdx.z]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[(threadIdx.z + 4)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[(threadIdx.z + 8)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[(threadIdx.z + 12)]))
    }
    compute_2[(((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 784)] = (float32*)compute.local[14]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1568)] = (float32*)compute.local[28]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2352)] = (float32*)compute.local[42]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 14)] = (float32*)compute.local[1]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 798)] = (float32*)compute.local[15]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1582)] = (float32*)compute.local[29]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2366)] = (float32*)compute.local[43]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 28)] = (float32*)compute.local[2]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 812)] = (float32*)compute.local[16]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1596)] = (float32*)compute.local[30]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2380)] = (float32*)compute.local[44]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 42)] = (float32*)compute.local[3]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 826)] = (float32*)compute.local[17]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1610)] = (float32*)compute.local[31]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2394)] = (float32*)compute.local[45]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 56)] = (float32*)compute.local[4]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 840)] = (float32*)compute.local[18]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1624)] = (float32*)compute.local[32]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2408)] = (float32*)compute.local[46]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 70)] = (float32*)compute.local[5]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 854)] = (float32*)compute.local[19]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1638)] = (float32*)compute.local[33]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2422)] = (float32*)compute.local[47]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 84)] = (float32*)compute.local[6]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 868)] = (float32*)compute.local[20]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1652)] = (float32*)compute.local[34]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2436)] = (float32*)compute.local[48]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 98)] = (float32*)compute.local[7]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 882)] = (float32*)compute.local[21]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1666)] = (float32*)compute.local[35]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2450)] = (float32*)compute.local[49]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 112)] = (float32*)compute.local[8]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 896)] = (float32*)compute.local[22]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1680)] = (float32*)compute.local[36]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2464)] = (float32*)compute.local[50]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 126)] = (float32*)compute.local[9]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 910)] = (float32*)compute.local[23]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1694)] = (float32*)compute.local[37]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2478)] = (float32*)compute.local[51]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 140)] = (float32*)compute.local[10]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 924)] = (float32*)compute.local[24]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1708)] = (float32*)compute.local[38]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2492)] = (float32*)compute.local[52]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 154)] = (float32*)compute.local[11]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 938)] = (float32*)compute.local[25]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1722)] = (float32*)compute.local[39]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2506)] = (float32*)compute.local[53]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 168)] = (float32*)compute.local[12]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 952)] = (float32*)compute.local[26]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1736)] = (float32*)compute.local[40]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2520)] = (float32*)compute.local[54]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 182)] = (float32*)compute.local[13]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 966)] = (float32*)compute.local[27]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 1750)] = (float32*)compute.local[41]
    compute_2[((((blockIdx.z*3136) + (threadIdx.z*196)) + threadIdx.x) + 2534)] = (float32*)compute.local[55]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_20", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 1024, 14, 14], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 1024, 14, 14], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1024, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 25) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 6422528) {
      T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[floordiv(floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 200704), 196)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_13", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 1024, 14, 14], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 512, 28, 28], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1024, 512, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 1024;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [1404]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute.local[0] = 0f32
    compute.local[7] = 0f32
    compute.local[14] = 0f32
    compute.local[21] = 0f32
    compute.local[1] = 0f32
    compute.local[8] = 0f32
    compute.local[15] = 0f32
    compute.local[22] = 0f32
    compute.local[2] = 0f32
    compute.local[9] = 0f32
    compute.local[16] = 0f32
    compute.local[23] = 0f32
    compute.local[3] = 0f32
    compute.local[10] = 0f32
    compute.local[17] = 0f32
    compute.local[24] = 0f32
    compute.local[4] = 0f32
    compute.local[11] = 0f32
    compute.local[18] = 0f32
    compute.local[25] = 0f32
    compute.local[5] = 0f32
    compute.local[12] = 0f32
    compute.local[19] = 0f32
    compute.local[26] = 0f32
    compute.local[6] = 0f32
    compute.local[13] = 0f32
    compute.local[20] = 0f32
    compute.local[27] = 0f32
    for (rc.outer: int32, 0, 128) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 13) {
        if ((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 1404) {
          if (((threadIdx.x_1*13) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 176) {
            pad_temp.shared[(((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_4[((((((floordiv(blockIdx.z, 32)*401408) + (rc.outer*3136)) + (floordiv((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 351)*784)) + (blockIdx.y*392)) + (floordiv(floormod((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 351), 27)*28)) + floormod((((threadIdx.z_1*176) + (threadIdx.x_1*13)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 27))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 2) {
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)) < 32) {
          if ((((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 128) {
            if (((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 16) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 32)*16384) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)*512)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4))]
            }
          }
        }
      }
      for (rc.inner: int32, 0, 4) {
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((rc.inner*351) + (threadIdx.x*2))]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 54)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 108)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 162)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 216)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 270)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(((rc.inner*351) + (threadIdx.x*2)) + 324)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
      }
    }
    compute_2[((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1568)] = (float32*)compute.local[7]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3136)] = (float32*)compute.local[14]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4704)] = (float32*)compute.local[21]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 14)] = (float32*)compute.local[1]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1582)] = (float32*)compute.local[8]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3150)] = (float32*)compute.local[15]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4718)] = (float32*)compute.local[22]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 28)] = (float32*)compute.local[2]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1596)] = (float32*)compute.local[9]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3164)] = (float32*)compute.local[16]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4732)] = (float32*)compute.local[23]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 42)] = (float32*)compute.local[3]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1610)] = (float32*)compute.local[10]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3178)] = (float32*)compute.local[17]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4746)] = (float32*)compute.local[24]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 56)] = (float32*)compute.local[4]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1624)] = (float32*)compute.local[11]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3192)] = (float32*)compute.local[18]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4760)] = (float32*)compute.local[25]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 70)] = (float32*)compute.local[5]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1638)] = (float32*)compute.local[12]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3206)] = (float32*)compute.local[19]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4774)] = (float32*)compute.local[26]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 84)] = (float32*)compute.local[6]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1652)] = (float32*)compute.local[13]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3220)] = (float32*)compute.local[20]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4788)] = (float32*)compute.local[27]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_21", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [32, 1024, 14, 14], []),
             T_add: Buffer(T_add_2: handle, float32, [32, 1024, 14, 14], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [32, 1024, 14, 14], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 25) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 6422528) {
      T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_1: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_relu_6", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 1024, 14, 14], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 1024, 14, 14], [])}
  buffer_map = {placeholder_1: placeholder, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 25) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 6422528) {
      T_relu_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max((float32*)placeholder_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f32)
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_14", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 256, 14, 14], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 1024, 14, 14], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [256, 1024, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 256;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [392]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 2;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14 {
    compute.local[0] = 0f32
    compute.local[7] = 0f32
    compute.local[14] = 0f32
    compute.local[21] = 0f32
    compute.local[1] = 0f32
    compute.local[8] = 0f32
    compute.local[15] = 0f32
    compute.local[22] = 0f32
    compute.local[2] = 0f32
    compute.local[9] = 0f32
    compute.local[16] = 0f32
    compute.local[23] = 0f32
    compute.local[3] = 0f32
    compute.local[10] = 0f32
    compute.local[17] = 0f32
    compute.local[24] = 0f32
    compute.local[4] = 0f32
    compute.local[11] = 0f32
    compute.local[18] = 0f32
    compute.local[25] = 0f32
    compute.local[5] = 0f32
    compute.local[12] = 0f32
    compute.local[19] = 0f32
    compute.local[26] = 0f32
    compute.local[6] = 0f32
    compute.local[13] = 0f32
    compute.local[20] = 0f32
    compute.local[27] = 0f32
    for (rc.outer: int32, 0, 256) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 4) {
        if ((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 392) {
          if (((threadIdx.x_1*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 49) {
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 8)*200704) + (rc.outer*784)) + (floordiv((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 98)*196)) + (blockIdx.y*98)) + floormod((((threadIdx.z_1*49) + (threadIdx.x_1*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 98))]
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 8;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 14;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1: int32, 0, 2) {
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)) < 32) {
          if ((((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 128) {
            if (((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1) < 16) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 8)*32768) + (threadIdx.z_2*4096)) + (floordiv(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner_1), 4))]
            }
          }
        }
      }
      for (rc.inner: int32, 0, 4) {
        compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((rc.inner*98) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((rc.inner*98) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((rc.inner*98) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((rc.inner*98) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 14)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 14)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 14)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 14)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 28)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 28)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 42)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 42)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 42)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 42)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 56)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 56)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 56)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 56)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 70)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 70)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 70)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 70)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
        compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 84)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
        compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 84)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 32)]))
        compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 84)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 64)]))
        compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(((rc.inner*98) + threadIdx.x) + 84)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 96)]))
      }
    }
    compute_2[((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1568)] = (float32*)compute.local[7]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3136)] = (float32*)compute.local[14]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4704)] = (float32*)compute.local[21]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 14)] = (float32*)compute.local[1]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1582)] = (float32*)compute.local[8]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3150)] = (float32*)compute.local[15]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4718)] = (float32*)compute.local[22]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 28)] = (float32*)compute.local[2]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1596)] = (float32*)compute.local[9]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3164)] = (float32*)compute.local[16]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4732)] = (float32*)compute.local[23]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 42)] = (float32*)compute.local[3]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1610)] = (float32*)compute.local[10]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3178)] = (float32*)compute.local[17]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4746)] = (float32*)compute.local[24]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 56)] = (float32*)compute.local[4]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1624)] = (float32*)compute.local[11]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3192)] = (float32*)compute.local[18]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4760)] = (float32*)compute.local[25]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 70)] = (float32*)compute.local[5]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1638)] = (float32*)compute.local[12]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3206)] = (float32*)compute.local[19]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4774)] = (float32*)compute.local[26]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 84)] = (float32*)compute.local[6]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 1652)] = (float32*)compute.local[13]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 3220)] = (float32*)compute.local[20]
    compute_2[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*98)) + threadIdx.x) + 4788)] = (float32*)compute.local[27]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_15", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 512, 7, 7], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 1024, 14, 14], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 1024, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 512;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [676]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    compute.local[0] = 0f32
    compute.local[28] = 0f32
    compute.local[4] = 0f32
    compute.local[32] = 0f32
    compute.local[8] = 0f32
    compute.local[36] = 0f32
    compute.local[12] = 0f32
    compute.local[40] = 0f32
    compute.local[16] = 0f32
    compute.local[44] = 0f32
    compute.local[20] = 0f32
    compute.local[48] = 0f32
    compute.local[24] = 0f32
    compute.local[52] = 0f32
    compute.local[1] = 0f32
    compute.local[29] = 0f32
    compute.local[5] = 0f32
    compute.local[33] = 0f32
    compute.local[9] = 0f32
    compute.local[37] = 0f32
    compute.local[13] = 0f32
    compute.local[41] = 0f32
    compute.local[17] = 0f32
    compute.local[45] = 0f32
    compute.local[21] = 0f32
    compute.local[49] = 0f32
    compute.local[25] = 0f32
    compute.local[53] = 0f32
    compute.local[2] = 0f32
    compute.local[30] = 0f32
    compute.local[6] = 0f32
    compute.local[34] = 0f32
    compute.local[10] = 0f32
    compute.local[38] = 0f32
    compute.local[14] = 0f32
    compute.local[42] = 0f32
    compute.local[18] = 0f32
    compute.local[46] = 0f32
    compute.local[22] = 0f32
    compute.local[50] = 0f32
    compute.local[26] = 0f32
    compute.local[54] = 0f32
    compute.local[3] = 0f32
    compute.local[31] = 0f32
    compute.local[7] = 0f32
    compute.local[35] = 0f32
    compute.local[11] = 0f32
    compute.local[39] = 0f32
    compute.local[15] = 0f32
    compute.local[43] = 0f32
    compute.local[19] = 0f32
    compute.local[47] = 0f32
    compute.local[23] = 0f32
    compute.local[51] = 0f32
    compute.local[27] = 0f32
    compute.local[55] = 0f32
    for (rc.outer: int32, 0, 256) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        pad_temp.shared[((threadIdx.z_1*169) + (threadIdx.x_1*25))] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv((threadIdx.x_1*25), 13)*14)) + floormod((threadIdx.x_1*25), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 1)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 1), 13)*14)) + floormod(((threadIdx.x_1*25) + 1), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 2)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 2), 13)*14)) + floormod(((threadIdx.x_1*25) + 2), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 3)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 3), 13)*14)) + floormod(((threadIdx.x_1*25) + 3), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 4)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 4), 13)*14)) + floormod(((threadIdx.x_1*25) + 4), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 5)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 5), 13)*14)) + floormod(((threadIdx.x_1*25) + 5), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 6)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 6), 13)*14)) + floormod(((threadIdx.x_1*25) + 6), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 7)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 7), 13)*14)) + floormod(((threadIdx.x_1*25) + 7), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 8)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 8), 13)*14)) + floormod(((threadIdx.x_1*25) + 8), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 9)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 9), 13)*14)) + floormod(((threadIdx.x_1*25) + 9), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 10)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 10), 13)*14)) + floormod(((threadIdx.x_1*25) + 10), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 11)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 11), 13)*14)) + floormod(((threadIdx.x_1*25) + 11), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 12)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 12), 13)*14)) + floormod(((threadIdx.x_1*25) + 12), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 13)] = (float32*)placeholder_4[((((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv((threadIdx.x_1*25), 13)*14)) + floormod((threadIdx.x_1*25), 13)) + 14)]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 14)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 14), 13)*14)) + floormod(((threadIdx.x_1*25) + 1), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 15)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 15), 13)*14)) + floormod(((threadIdx.x_1*25) + 2), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 16)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 16), 13)*14)) + floormod(((threadIdx.x_1*25) + 3), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 17)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 17), 13)*14)) + floormod(((threadIdx.x_1*25) + 4), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 18)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 18), 13)*14)) + floormod(((threadIdx.x_1*25) + 5), 13))]
        if ((floordiv(((threadIdx.x_1*25) + 19), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 19), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 657) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 19)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 19), 13)*14)) + floormod(((threadIdx.x_1*25) + 6), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 20), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 20), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 656) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 20)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 20), 13)*14)) + floormod(((threadIdx.x_1*25) + 7), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 21), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 21), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 655) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 21)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 21), 13)*14)) + floormod(((threadIdx.x_1*25) + 8), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 22), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 22), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 654) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 22)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 22), 13)*14)) + floormod(((threadIdx.x_1*25) + 9), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 23), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 23), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 653) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 23)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 23), 13)*14)) + floormod(((threadIdx.x_1*25) + 10), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 24), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 24), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 652) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 24)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 24), 13)*14)) + floormod(((threadIdx.x_1*25) + 11), 13))]
              }
            }
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        placeholder.shared[((threadIdx.z_2*32) + (threadIdx.x_2*5))] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 16)*32768) + (threadIdx.z_2*8192)) + (floordiv((threadIdx.x_2*5), 4)*1024)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4))]
        placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 16)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 1), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 1), 4))]
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 126) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 16)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 2), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 2), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 125) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 16)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 3), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 3), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 4)) < 31) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 124) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_5[((((((floormod(blockIdx.z, 16)*32768) + (threadIdx.z_2*8192)) + (floordiv((threadIdx.x_2*5), 4)*1024)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4)) + 1024)]
            }
          }
        }
      }
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
    }
    compute_2[(((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 784)] = (float32*)compute.local[28]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 7)] = (float32*)compute.local[4]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 791)] = (float32*)compute.local[32]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 14)] = (float32*)compute.local[8]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 798)] = (float32*)compute.local[36]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 21)] = (float32*)compute.local[12]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 805)] = (float32*)compute.local[40]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 28)] = (float32*)compute.local[16]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 812)] = (float32*)compute.local[44]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 35)] = (float32*)compute.local[20]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 819)] = (float32*)compute.local[48]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 42)] = (float32*)compute.local[24]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 826)] = (float32*)compute.local[52]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 49)] = (float32*)compute.local[1]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 833)] = (float32*)compute.local[29]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 56)] = (float32*)compute.local[5]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 840)] = (float32*)compute.local[33]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 63)] = (float32*)compute.local[9]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 847)] = (float32*)compute.local[37]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 70)] = (float32*)compute.local[13]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 854)] = (float32*)compute.local[41]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 77)] = (float32*)compute.local[17]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 861)] = (float32*)compute.local[45]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 84)] = (float32*)compute.local[21]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 868)] = (float32*)compute.local[49]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 91)] = (float32*)compute.local[25]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 875)] = (float32*)compute.local[53]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 98)] = (float32*)compute.local[2]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 882)] = (float32*)compute.local[30]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 105)] = (float32*)compute.local[6]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 889)] = (float32*)compute.local[34]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 112)] = (float32*)compute.local[10]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 896)] = (float32*)compute.local[38]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 119)] = (float32*)compute.local[14]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 903)] = (float32*)compute.local[42]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 126)] = (float32*)compute.local[18]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 910)] = (float32*)compute.local[46]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 133)] = (float32*)compute.local[22]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 917)] = (float32*)compute.local[50]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 140)] = (float32*)compute.local[26]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 924)] = (float32*)compute.local[54]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 147)] = (float32*)compute.local[3]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 931)] = (float32*)compute.local[31]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 154)] = (float32*)compute.local[7]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 938)] = (float32*)compute.local[35]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 161)] = (float32*)compute.local[11]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 945)] = (float32*)compute.local[39]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 168)] = (float32*)compute.local[15]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 952)] = (float32*)compute.local[43]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 175)] = (float32*)compute.local[19]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 959)] = (float32*)compute.local[47]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 182)] = (float32*)compute.local[23]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 966)] = (float32*)compute.local[51]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 189)] = (float32*)compute.local[27]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 973)] = (float32*)compute.local[55]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_22", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 512, 7, 7], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 512, 7, 7], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 4) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 802816) {
      T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[floordiv(floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 25088), 49)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_1: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_relu_7", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 512, 7, 7], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 512, 7, 7], [])}
  buffer_map = {placeholder_1: placeholder, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 4) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 802816) {
      T_relu_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max((float32*)placeholder_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f32)
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_16", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 512, 7, 7], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 512, 7, 7], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 512, 3, 3], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 512;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [196]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    compute.local[0] = 0f32
    compute.local[28] = 0f32
    compute.local[4] = 0f32
    compute.local[32] = 0f32
    compute.local[8] = 0f32
    compute.local[36] = 0f32
    compute.local[12] = 0f32
    compute.local[40] = 0f32
    compute.local[16] = 0f32
    compute.local[44] = 0f32
    compute.local[20] = 0f32
    compute.local[48] = 0f32
    compute.local[24] = 0f32
    compute.local[52] = 0f32
    compute.local[1] = 0f32
    compute.local[29] = 0f32
    compute.local[5] = 0f32
    compute.local[33] = 0f32
    compute.local[9] = 0f32
    compute.local[37] = 0f32
    compute.local[13] = 0f32
    compute.local[41] = 0f32
    compute.local[17] = 0f32
    compute.local[45] = 0f32
    compute.local[21] = 0f32
    compute.local[49] = 0f32
    compute.local[25] = 0f32
    compute.local[53] = 0f32
    compute.local[2] = 0f32
    compute.local[30] = 0f32
    compute.local[6] = 0f32
    compute.local[34] = 0f32
    compute.local[10] = 0f32
    compute.local[38] = 0f32
    compute.local[14] = 0f32
    compute.local[42] = 0f32
    compute.local[18] = 0f32
    compute.local[46] = 0f32
    compute.local[22] = 0f32
    compute.local[50] = 0f32
    compute.local[26] = 0f32
    compute.local[54] = 0f32
    compute.local[3] = 0f32
    compute.local[31] = 0f32
    compute.local[7] = 0f32
    compute.local[35] = 0f32
    compute.local[11] = 0f32
    compute.local[39] = 0f32
    compute.local[15] = 0f32
    compute.local[43] = 0f32
    compute.local[19] = 0f32
    compute.local[47] = 0f32
    compute.local[23] = 0f32
    compute.local[51] = 0f32
    compute.local[27] = 0f32
    compute.local[55] = 0f32
    for (rc.outer: int32, 0, 128) {
      for (ry.outer: int32, 0, 3) {
        for (rx.outer: int32, 0, 3) {
          attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
          attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
          attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
            pad_temp.shared[((threadIdx.z_1*49) + (threadIdx.x_1*7))] = @tir.if_then_else((((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)) && (1 <= rx.outer)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 8)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 1)] = @tir.if_then_else(((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 7)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 2)] = @tir.if_then_else(((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 6)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 3)] = @tir.if_then_else(((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 5)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 4)] = @tir.if_then_else(((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 4)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 5)] = @tir.if_then_else(((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 3)], 0f32, dtype=float32)
            pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 6)] = @tir.if_then_else((((1 <= (threadIdx.x_1 + ry.outer)) && ((threadIdx.x_1 + ry.outer) < 8)) && (rx.outer < 2)), (float32*)placeholder_4[(((((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*49)) + (ry.outer*7)) + (threadIdx.x_1*7)) + rx.outer) - 2)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
          attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
            placeholder.shared[((threadIdx.z_2*32) + (threadIdx.x_2*5))] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 16)*147456) + (threadIdx.z_2*36864)) + (floordiv((threadIdx.x_2*5), 4)*4608)) + (rc.outer*36)) + (floormod((threadIdx.x_2*5), 4)*9)) + (ry.outer*3)) + rx.outer)]
            placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 16)*147456) + (threadIdx.z_2*36864)) + (floordiv(((threadIdx.x_2*5) + 1), 4)*4608)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*5) + 1), 4)*9)) + (ry.outer*3)) + rx.outer)]
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 4)) < 32) {
              if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 126) {
                if (threadIdx.x_2 < 6) {
                  placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 16)*147456) + (threadIdx.z_2*36864)) + (floordiv(((threadIdx.x_2*5) + 2), 4)*4608)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*5) + 2), 4)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 4)) < 32) {
              if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 125) {
                if (threadIdx.x_2 < 6) {
                  placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_5[(((((((floormod(blockIdx.z, 16)*147456) + (threadIdx.z_2*36864)) + (floordiv(((threadIdx.x_2*5) + 3), 4)*4608)) + (rc.outer*36)) + (floormod(((threadIdx.x_2*5) + 3), 4)*9)) + (ry.outer*3)) + rx.outer)]
                }
              }
            }
            if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 4)) < 31) {
              if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 124) {
                if (threadIdx.x_2 < 6) {
                  placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_5[((((((((floormod(blockIdx.z, 16)*147456) + (threadIdx.z_2*36864)) + (floordiv((threadIdx.x_2*5), 4)*4608)) + (rc.outer*36)) + (floormod((threadIdx.x_2*5), 4)*9)) + (ry.outer*3)) + rx.outer) + 4608)]
                }
              }
            }
          }
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
          compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
          compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
          compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
          compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
          compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
          compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
          compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
          compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
          compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
        }
      }
    }
    compute_2[(((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 784)] = (float32*)compute.local[28]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 7)] = (float32*)compute.local[4]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 791)] = (float32*)compute.local[32]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 14)] = (float32*)compute.local[8]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 798)] = (float32*)compute.local[36]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 21)] = (float32*)compute.local[12]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 805)] = (float32*)compute.local[40]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 28)] = (float32*)compute.local[16]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 812)] = (float32*)compute.local[44]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 35)] = (float32*)compute.local[20]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 819)] = (float32*)compute.local[48]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 42)] = (float32*)compute.local[24]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 826)] = (float32*)compute.local[52]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 49)] = (float32*)compute.local[1]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 833)] = (float32*)compute.local[29]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 56)] = (float32*)compute.local[5]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 840)] = (float32*)compute.local[33]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 63)] = (float32*)compute.local[9]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 847)] = (float32*)compute.local[37]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 70)] = (float32*)compute.local[13]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 854)] = (float32*)compute.local[41]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 77)] = (float32*)compute.local[17]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 861)] = (float32*)compute.local[45]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 84)] = (float32*)compute.local[21]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 868)] = (float32*)compute.local[49]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 91)] = (float32*)compute.local[25]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 875)] = (float32*)compute.local[53]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 98)] = (float32*)compute.local[2]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 882)] = (float32*)compute.local[30]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 105)] = (float32*)compute.local[6]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 889)] = (float32*)compute.local[34]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 112)] = (float32*)compute.local[10]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 896)] = (float32*)compute.local[38]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 119)] = (float32*)compute.local[14]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 903)] = (float32*)compute.local[42]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 126)] = (float32*)compute.local[18]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 910)] = (float32*)compute.local[46]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 133)] = (float32*)compute.local[22]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 917)] = (float32*)compute.local[50]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 140)] = (float32*)compute.local[26]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 924)] = (float32*)compute.local[54]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 147)] = (float32*)compute.local[3]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 931)] = (float32*)compute.local[31]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 154)] = (float32*)compute.local[7]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 938)] = (float32*)compute.local[35]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 161)] = (float32*)compute.local[11]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 945)] = (float32*)compute.local[39]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 168)] = (float32*)compute.local[15]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 952)] = (float32*)compute.local[43]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 175)] = (float32*)compute.local[19]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 959)] = (float32*)compute.local[47]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 182)] = (float32*)compute.local[23]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 966)] = (float32*)compute.local[51]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 189)] = (float32*)compute.local[27]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 973)] = (float32*)compute.local[55]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_17", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: handle, float32, [32, 2048, 7, 7], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 512, 7, 7], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [2048, 512, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 512;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [28]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [196]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [512]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    for (yy.c.init: int32, 0, 7) {
      compute.local[yy.c.init] = 0f32
      compute.local[(yy.c.init + 7)] = 0f32
      compute.local[(yy.c.init + 14)] = 0f32
      compute.local[(yy.c.init + 21)] = 0f32
    }
    for (rc.outer: int32, 0, 128) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7;
      if (threadIdx.z_1 < 28) {
        pad_temp.shared[((threadIdx.z_1*7) + threadIdx.x_1)] = (float32*)placeholder_4[((((floordiv(blockIdx.z, 16)*25088) + (rc.outer*196)) + (threadIdx.z_1*7)) + threadIdx.x_1)]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 32;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7;
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner: int32, 0, 3) {
        if (((threadIdx.z_2*4) + floordiv(((threadIdx.x_2*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 4)) < 128) {
          if ((((threadIdx.z_2*16) + (threadIdx.x_2*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 512) {
            if (((threadIdx.x_2*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 16) {
              placeholder.shared[(((threadIdx.z_2*16) + (threadIdx.x_2*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*2048)) + (floordiv(((threadIdx.x_2*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 4)*512)) + (rc.outer*4)) + floormod(((threadIdx.x_2*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 4))]
            }
          }
        }
      }
      for (rc.inner: int32, 0, 4) {
        for (yy.c: int32, 0, 7) {
          compute.local[yy.c] = ((float32*)compute.local[yy.c] + ((float32*)pad_temp.shared[(((rc.inner*49) + (yy.c*7)) + threadIdx.x)]*(float32*)placeholder.shared[((threadIdx.z*4) + rc.inner)]))
          compute.local[(yy.c + 7)] = ((float32*)compute.local[(yy.c + 7)] + ((float32*)pad_temp.shared[(((rc.inner*49) + (yy.c*7)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 128)]))
          compute.local[(yy.c + 14)] = ((float32*)compute.local[(yy.c + 14)] + ((float32*)pad_temp.shared[(((rc.inner*49) + (yy.c*7)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 256)]))
          compute.local[(yy.c + 21)] = ((float32*)compute.local[(yy.c + 21)] + ((float32*)pad_temp.shared[(((rc.inner*49) + (yy.c*7)) + threadIdx.x)]*(float32*)placeholder.shared[(((threadIdx.z*4) + rc.inner) + 384)]))
        }
      }
    }
    for (yy.inner.inner.inner: int32, 0, 7) {
      compute_2[((((blockIdx.z*6272) + (threadIdx.z*49)) + (yy.inner.inner.inner*7)) + threadIdx.x)] = (float32*)compute.local[yy.inner.inner.inner]
      compute_2[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (yy.inner.inner.inner*7)) + threadIdx.x) + 1568)] = (float32*)compute.local[(yy.inner.inner.inner + 7)]
      compute_2[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (yy.inner.inner.inner*7)) + threadIdx.x) + 3136)] = (float32*)compute.local[(yy.inner.inner.inner + 14)]
      compute_2[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (yy.inner.inner.inner*7)) + threadIdx.x) + 4704)] = (float32*)compute.local[(yy.inner.inner.inner + 21)]
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_23", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 2048, 7, 7], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 2048, 7, 7], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [2048, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 13) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 3211264) {
      T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[floordiv(floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 100352), 49)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_18", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [32, 1024, 14, 14], []),
             compute: Buffer(compute_2: handle, float32, [32, 2048, 7, 7], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [2048, 1024, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 2048;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [676]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    compute.local[0] = 0f32
    compute.local[28] = 0f32
    compute.local[4] = 0f32
    compute.local[32] = 0f32
    compute.local[8] = 0f32
    compute.local[36] = 0f32
    compute.local[12] = 0f32
    compute.local[40] = 0f32
    compute.local[16] = 0f32
    compute.local[44] = 0f32
    compute.local[20] = 0f32
    compute.local[48] = 0f32
    compute.local[24] = 0f32
    compute.local[52] = 0f32
    compute.local[1] = 0f32
    compute.local[29] = 0f32
    compute.local[5] = 0f32
    compute.local[33] = 0f32
    compute.local[9] = 0f32
    compute.local[37] = 0f32
    compute.local[13] = 0f32
    compute.local[41] = 0f32
    compute.local[17] = 0f32
    compute.local[45] = 0f32
    compute.local[21] = 0f32
    compute.local[49] = 0f32
    compute.local[25] = 0f32
    compute.local[53] = 0f32
    compute.local[2] = 0f32
    compute.local[30] = 0f32
    compute.local[6] = 0f32
    compute.local[34] = 0f32
    compute.local[10] = 0f32
    compute.local[38] = 0f32
    compute.local[14] = 0f32
    compute.local[42] = 0f32
    compute.local[18] = 0f32
    compute.local[46] = 0f32
    compute.local[22] = 0f32
    compute.local[50] = 0f32
    compute.local[26] = 0f32
    compute.local[54] = 0f32
    compute.local[3] = 0f32
    compute.local[31] = 0f32
    compute.local[7] = 0f32
    compute.local[35] = 0f32
    compute.local[11] = 0f32
    compute.local[39] = 0f32
    compute.local[15] = 0f32
    compute.local[43] = 0f32
    compute.local[19] = 0f32
    compute.local[47] = 0f32
    compute.local[23] = 0f32
    compute.local[51] = 0f32
    compute.local[27] = 0f32
    compute.local[55] = 0f32
    for (rc.outer: int32, 0, 256) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        pad_temp.shared[((threadIdx.z_1*169) + (threadIdx.x_1*25))] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv((threadIdx.x_1*25), 13)*14)) + floormod((threadIdx.x_1*25), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 1)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 1), 13)*14)) + floormod(((threadIdx.x_1*25) + 1), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 2)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 2), 13)*14)) + floormod(((threadIdx.x_1*25) + 2), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 3)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 3), 13)*14)) + floormod(((threadIdx.x_1*25) + 3), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 4)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 4), 13)*14)) + floormod(((threadIdx.x_1*25) + 4), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 5)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 5), 13)*14)) + floormod(((threadIdx.x_1*25) + 5), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 6)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 6), 13)*14)) + floormod(((threadIdx.x_1*25) + 6), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 7)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 7), 13)*14)) + floormod(((threadIdx.x_1*25) + 7), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 8)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 8), 13)*14)) + floormod(((threadIdx.x_1*25) + 8), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 9)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 9), 13)*14)) + floormod(((threadIdx.x_1*25) + 9), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 10)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 10), 13)*14)) + floormod(((threadIdx.x_1*25) + 10), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 11)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 11), 13)*14)) + floormod(((threadIdx.x_1*25) + 11), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 12)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 12), 13)*14)) + floormod(((threadIdx.x_1*25) + 12), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 13)] = (float32*)placeholder_4[((((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv((threadIdx.x_1*25), 13)*14)) + floormod((threadIdx.x_1*25), 13)) + 14)]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 14)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 14), 13)*14)) + floormod(((threadIdx.x_1*25) + 1), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 15)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 15), 13)*14)) + floormod(((threadIdx.x_1*25) + 2), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 16)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 16), 13)*14)) + floormod(((threadIdx.x_1*25) + 3), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 17)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 17), 13)*14)) + floormod(((threadIdx.x_1*25) + 4), 13))]
        pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 18)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 18), 13)*14)) + floormod(((threadIdx.x_1*25) + 5), 13))]
        if ((floordiv(((threadIdx.x_1*25) + 19), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 19), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 657) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 19)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 19), 13)*14)) + floormod(((threadIdx.x_1*25) + 6), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 20), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 20), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 656) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 20)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 20), 13)*14)) + floormod(((threadIdx.x_1*25) + 7), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 21), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 21), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 655) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 21)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 21), 13)*14)) + floormod(((threadIdx.x_1*25) + 8), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 22), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 22), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 654) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 22)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 22), 13)*14)) + floormod(((threadIdx.x_1*25) + 9), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 23), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 23), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 653) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 23)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 23), 13)*14)) + floormod(((threadIdx.x_1*25) + 10), 13))]
              }
            }
          }
        }
        if ((floordiv(((threadIdx.x_1*25) + 24), 169) + threadIdx.z_1) < 4) {
          if (((threadIdx.z_1*13) + floordiv(((threadIdx.x_1*25) + 24), 13)) < 52) {
            if (((threadIdx.z_1*169) + (threadIdx.x_1*25)) < 652) {
              if (threadIdx.x_1 < 6) {
                pad_temp.shared[(((threadIdx.z_1*169) + (threadIdx.x_1*25)) + 24)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 64)*200704) + (rc.outer*784)) + (threadIdx.z_1*196)) + (floordiv(((threadIdx.x_1*25) + 24), 13)*14)) + floormod(((threadIdx.x_1*25) + 11), 13))]
              }
            }
          }
        }
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        placeholder.shared[((threadIdx.z_2*32) + (threadIdx.x_2*5))] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 64)*32768) + (threadIdx.z_2*8192)) + (floordiv((threadIdx.x_2*5), 4)*1024)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4))]
        placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 64)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 1), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 1), 4))]
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 126) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 64)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 2), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 2), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 125) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 64)*32768) + (threadIdx.z_2*8192)) + (floordiv(((threadIdx.x_2*5) + 3), 4)*1024)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 3), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 4)) < 31) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 124) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_5[((((((floormod(blockIdx.z, 64)*32768) + (threadIdx.z_2*8192)) + (floordiv((threadIdx.x_2*5), 4)*1024)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4)) + 1024)]
            }
          }
        }
      }
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x*2)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 26)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 52)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 78)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 104)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 130)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 156)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 169)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 195)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 221)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 247)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 273)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 299)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 325)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 338)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 364)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 390)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 416)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 442)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 468)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 494)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 507)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 533)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 559)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 585)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 611)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 637)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[((threadIdx.x*2) + 663)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
    }
    compute_2[(((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 784)] = (float32*)compute.local[28]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 7)] = (float32*)compute.local[4]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 791)] = (float32*)compute.local[32]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 14)] = (float32*)compute.local[8]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 798)] = (float32*)compute.local[36]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 21)] = (float32*)compute.local[12]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 805)] = (float32*)compute.local[40]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 28)] = (float32*)compute.local[16]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 812)] = (float32*)compute.local[44]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 35)] = (float32*)compute.local[20]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 819)] = (float32*)compute.local[48]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 42)] = (float32*)compute.local[24]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 826)] = (float32*)compute.local[52]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 49)] = (float32*)compute.local[1]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 833)] = (float32*)compute.local[29]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 56)] = (float32*)compute.local[5]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 840)] = (float32*)compute.local[33]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 63)] = (float32*)compute.local[9]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 847)] = (float32*)compute.local[37]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 70)] = (float32*)compute.local[13]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 854)] = (float32*)compute.local[41]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 77)] = (float32*)compute.local[17]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 861)] = (float32*)compute.local[45]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 84)] = (float32*)compute.local[21]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 868)] = (float32*)compute.local[49]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 91)] = (float32*)compute.local[25]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 875)] = (float32*)compute.local[53]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 98)] = (float32*)compute.local[2]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 882)] = (float32*)compute.local[30]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 105)] = (float32*)compute.local[6]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 889)] = (float32*)compute.local[34]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 112)] = (float32*)compute.local[10]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 896)] = (float32*)compute.local[38]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 119)] = (float32*)compute.local[14]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 903)] = (float32*)compute.local[42]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 126)] = (float32*)compute.local[18]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 910)] = (float32*)compute.local[46]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 133)] = (float32*)compute.local[22]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 917)] = (float32*)compute.local[50]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 140)] = (float32*)compute.local[26]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 924)] = (float32*)compute.local[54]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 147)] = (float32*)compute.local[3]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 931)] = (float32*)compute.local[31]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 154)] = (float32*)compute.local[7]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 938)] = (float32*)compute.local[35]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 161)] = (float32*)compute.local[11]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 945)] = (float32*)compute.local[39]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 168)] = (float32*)compute.local[15]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 952)] = (float32*)compute.local[43]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 175)] = (float32*)compute.local[19]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 959)] = (float32*)compute.local[47]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 182)] = (float32*)compute.local[23]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 966)] = (float32*)compute.local[51]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 189)] = (float32*)compute.local[27]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 973)] = (float32*)compute.local[55]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_24", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 2048, 7, 7], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 2048, 7, 7], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [32, 2048, 7, 7], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 13) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 3211264) {
      T_add_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)placeholder_4[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + (float32*)placeholder_5[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)])
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op nn.relu
primfn(placeholder_1: handle, T_relu_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_relu_8", "tir.noalias": True}
  buffers = {T_relu: Buffer(T_relu_2: handle, float32, [32, 2048, 7, 7], []),
             placeholder: Buffer(placeholder_2: handle, float32, [32, 2048, 7, 7], [])}
  buffer_map = {placeholder_1: placeholder, T_relu_1: T_relu} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer: int32, 0, 13) {
    if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 3211264) {
      T_relu_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max((float32*)placeholder_2[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f32)
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation conv2d_nchw.cuda for op nn.conv2d
primfn(placeholder_2: handle, placeholder_3: handle, compute_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_conv2d_19", "tir.noalias": True}
  buffers = {placeholder: Buffer(placeholder_4: handle, float32, [32, 2048, 7, 7], []),
             compute: Buffer(compute_2: handle, float32, [32, 512, 7, 7], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [512, 2048, 1, 1], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, compute_1: compute} {
  attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 512;
  attr [compute.local: handle] "storage_scope" = "local";
  allocate(compute.local, float32, [56]);
  attr [pad_temp.shared: handle] "storage_scope" = "shared";
  allocate(pad_temp.shared, float32, [196]);
  attr [placeholder.shared: handle] "storage_scope" = "shared";
  allocate(placeholder.shared, float32, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 1;
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
  attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
    compute.local[0] = 0f32
    compute.local[28] = 0f32
    compute.local[4] = 0f32
    compute.local[32] = 0f32
    compute.local[8] = 0f32
    compute.local[36] = 0f32
    compute.local[12] = 0f32
    compute.local[40] = 0f32
    compute.local[16] = 0f32
    compute.local[44] = 0f32
    compute.local[20] = 0f32
    compute.local[48] = 0f32
    compute.local[24] = 0f32
    compute.local[52] = 0f32
    compute.local[1] = 0f32
    compute.local[29] = 0f32
    compute.local[5] = 0f32
    compute.local[33] = 0f32
    compute.local[9] = 0f32
    compute.local[37] = 0f32
    compute.local[13] = 0f32
    compute.local[41] = 0f32
    compute.local[17] = 0f32
    compute.local[45] = 0f32
    compute.local[21] = 0f32
    compute.local[49] = 0f32
    compute.local[25] = 0f32
    compute.local[53] = 0f32
    compute.local[2] = 0f32
    compute.local[30] = 0f32
    compute.local[6] = 0f32
    compute.local[34] = 0f32
    compute.local[10] = 0f32
    compute.local[38] = 0f32
    compute.local[14] = 0f32
    compute.local[42] = 0f32
    compute.local[18] = 0f32
    compute.local[46] = 0f32
    compute.local[22] = 0f32
    compute.local[50] = 0f32
    compute.local[26] = 0f32
    compute.local[54] = 0f32
    compute.local[3] = 0f32
    compute.local[31] = 0f32
    compute.local[7] = 0f32
    compute.local[35] = 0f32
    compute.local[11] = 0f32
    compute.local[39] = 0f32
    compute.local[15] = 0f32
    compute.local[43] = 0f32
    compute.local[19] = 0f32
    compute.local[47] = 0f32
    compute.local[23] = 0f32
    compute.local[51] = 0f32
    compute.local[27] = 0f32
    compute.local[55] = 0f32
    for (rc.outer: int32, 0, 512) {
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        pad_temp.shared[((threadIdx.z_1*49) + (threadIdx.x_1*7))] = (float32*)placeholder_4[((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7))]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 1)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 1)]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 2)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 2)]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 3)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 3)]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 4)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 4)]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 5)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 5)]
        pad_temp.shared[(((threadIdx.z_1*49) + (threadIdx.x_1*7)) + 6)] = (float32*)placeholder_4[(((((floordiv(blockIdx.z, 16)*100352) + (rc.outer*196)) + (threadIdx.z_1*49)) + (threadIdx.x_1*7)) + 6)]
      }
      attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 4;
      attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        placeholder.shared[((threadIdx.z_2*32) + (threadIdx.x_2*5))] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*16384)) + (floordiv((threadIdx.x_2*5), 4)*2048)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4))]
        placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 1)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*16384)) + (floordiv(((threadIdx.x_2*5) + 1), 4)*2048)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 1), 4))]
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 2), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 126) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 2)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*16384)) + (floordiv(((threadIdx.x_2*5) + 2), 4)*2048)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 2), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv(((threadIdx.x_2*5) + 3), 4)) < 32) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 125) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 3)] = (float32*)placeholder_5[(((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*16384)) + (floordiv(((threadIdx.x_2*5) + 3), 4)*2048)) + (rc.outer*4)) + floormod(((threadIdx.x_2*5) + 3), 4))]
            }
          }
        }
        if (((threadIdx.z_2*8) + floordiv((threadIdx.x_2*5), 4)) < 31) {
          if (((threadIdx.z_2*32) + (threadIdx.x_2*5)) < 124) {
            if (threadIdx.x_2 < 6) {
              placeholder.shared[(((threadIdx.z_2*32) + (threadIdx.x_2*5)) + 4)] = (float32*)placeholder_5[((((((floormod(blockIdx.z, 16)*65536) + (threadIdx.z_2*16384)) + (floordiv((threadIdx.x_2*5), 4)*2048)) + (rc.outer*4)) + floormod((threadIdx.x_2*5), 4)) + 2048)]
            }
          }
        }
      }
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[(threadIdx.z*16)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 64)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 4)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 68)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 8)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 72)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[threadIdx.x]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 7)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 14)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 21)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 28)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 35)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 12)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 42)]*(float32*)placeholder.shared[((threadIdx.z*16) + 76)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 1)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 65)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 5)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 69)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 9)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 73)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 49)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 56)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 63)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 70)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 77)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 84)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 13)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 91)]*(float32*)placeholder.shared[((threadIdx.z*16) + 77)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 2)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 66)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 6)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 70)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 10)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 74)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 98)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 105)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 112)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 119)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 126)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 133)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 14)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 140)]*(float32*)placeholder.shared[((threadIdx.z*16) + 78)]))
      compute.local[0] = ((float32*)compute.local[0] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[28] = ((float32*)compute.local[28] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[4] = ((float32*)compute.local[4] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[32] = ((float32*)compute.local[32] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[8] = ((float32*)compute.local[8] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[36] = ((float32*)compute.local[36] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[12] = ((float32*)compute.local[12] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[40] = ((float32*)compute.local[40] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[16] = ((float32*)compute.local[16] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[44] = ((float32*)compute.local[44] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[20] = ((float32*)compute.local[20] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[48] = ((float32*)compute.local[48] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[24] = ((float32*)compute.local[24] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 3)]))
      compute.local[52] = ((float32*)compute.local[52] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 67)]))
      compute.local[1] = ((float32*)compute.local[1] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[29] = ((float32*)compute.local[29] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[5] = ((float32*)compute.local[5] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[33] = ((float32*)compute.local[33] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[9] = ((float32*)compute.local[9] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[37] = ((float32*)compute.local[37] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[13] = ((float32*)compute.local[13] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[41] = ((float32*)compute.local[41] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[17] = ((float32*)compute.local[17] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[45] = ((float32*)compute.local[45] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[21] = ((float32*)compute.local[21] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[49] = ((float32*)compute.local[49] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[25] = ((float32*)compute.local[25] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 7)]))
      compute.local[53] = ((float32*)compute.local[53] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 71)]))
      compute.local[2] = ((float32*)compute.local[2] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[30] = ((float32*)compute.local[30] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[6] = ((float32*)compute.local[6] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[34] = ((float32*)compute.local[34] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[10] = ((float32*)compute.local[10] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[38] = ((float32*)compute.local[38] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[14] = ((float32*)compute.local[14] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[42] = ((float32*)compute.local[42] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[18] = ((float32*)compute.local[18] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[46] = ((float32*)compute.local[46] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[22] = ((float32*)compute.local[22] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[50] = ((float32*)compute.local[50] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[26] = ((float32*)compute.local[26] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 11)]))
      compute.local[54] = ((float32*)compute.local[54] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 75)]))
      compute.local[3] = ((float32*)compute.local[3] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[31] = ((float32*)compute.local[31] + ((float32*)pad_temp.shared[(threadIdx.x + 147)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[7] = ((float32*)compute.local[7] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[35] = ((float32*)compute.local[35] + ((float32*)pad_temp.shared[(threadIdx.x + 154)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[11] = ((float32*)compute.local[11] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[39] = ((float32*)compute.local[39] + ((float32*)pad_temp.shared[(threadIdx.x + 161)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[15] = ((float32*)compute.local[15] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[43] = ((float32*)compute.local[43] + ((float32*)pad_temp.shared[(threadIdx.x + 168)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[19] = ((float32*)compute.local[19] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[47] = ((float32*)compute.local[47] + ((float32*)pad_temp.shared[(threadIdx.x + 175)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[23] = ((float32*)compute.local[23] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[51] = ((float32*)compute.local[51] + ((float32*)pad_temp.shared[(threadIdx.x + 182)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
      compute.local[27] = ((float32*)compute.local[27] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 15)]))
      compute.local[55] = ((float32*)compute.local[55] + ((float32*)pad_temp.shared[(threadIdx.x + 189)]*(float32*)placeholder.shared[((threadIdx.z*16) + 79)]))
    }
    compute_2[(((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x)] = (float32*)compute.local[0]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 784)] = (float32*)compute.local[28]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 7)] = (float32*)compute.local[4]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 791)] = (float32*)compute.local[32]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 14)] = (float32*)compute.local[8]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 798)] = (float32*)compute.local[36]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 21)] = (float32*)compute.local[12]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 805)] = (float32*)compute.local[40]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 28)] = (float32*)compute.local[16]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 812)] = (float32*)compute.local[44]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 35)] = (float32*)compute.local[20]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 819)] = (float32*)compute.local[48]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 42)] = (float32*)compute.local[24]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 826)] = (float32*)compute.local[52]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 49)] = (float32*)compute.local[1]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 833)] = (float32*)compute.local[29]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 56)] = (float32*)compute.local[5]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 840)] = (float32*)compute.local[33]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 63)] = (float32*)compute.local[9]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 847)] = (float32*)compute.local[37]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 70)] = (float32*)compute.local[13]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 854)] = (float32*)compute.local[41]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 77)] = (float32*)compute.local[17]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 861)] = (float32*)compute.local[45]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 84)] = (float32*)compute.local[21]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 868)] = (float32*)compute.local[49]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 91)] = (float32*)compute.local[25]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 875)] = (float32*)compute.local[53]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 98)] = (float32*)compute.local[2]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 882)] = (float32*)compute.local[30]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 105)] = (float32*)compute.local[6]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 889)] = (float32*)compute.local[34]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 112)] = (float32*)compute.local[10]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 896)] = (float32*)compute.local[38]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 119)] = (float32*)compute.local[14]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 903)] = (float32*)compute.local[42]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 126)] = (float32*)compute.local[18]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 910)] = (float32*)compute.local[46]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 133)] = (float32*)compute.local[22]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 917)] = (float32*)compute.local[50]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 140)] = (float32*)compute.local[26]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 924)] = (float32*)compute.local[54]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 147)] = (float32*)compute.local[3]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 931)] = (float32*)compute.local[31]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 154)] = (float32*)compute.local[7]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 938)] = (float32*)compute.local[35]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 161)] = (float32*)compute.local[11]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 945)] = (float32*)compute.local[39]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 168)] = (float32*)compute.local[15]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 952)] = (float32*)compute.local[43]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 175)] = (float32*)compute.local[19]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 959)] = (float32*)compute.local[47]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 182)] = (float32*)compute.local[23]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 966)] = (float32*)compute.local[51]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 189)] = (float32*)compute.local[27]
    compute_2[((((blockIdx.z*1568) + (threadIdx.z*196)) + threadIdx.x) + 973)] = (float32*)compute.local[55]
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation dense_tensorcore.cuda for op nn.dense
primfn(placeholder_2: handle, placeholder_3: handle, T_dense_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_dense", "tir.noalias": True}
  buffers = {T_dense: Buffer(T_dense_2: handle, float32, [32, 1000], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 2048], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1000, 2048], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_dense_1: T_dense} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
  attr [T_dense.wmma.accumulator: handle] "storage_scope" = "wmma.accumulator";
  allocate(T_dense.wmma.accumulator, float32, [256]);
  attr [compute.shared: handle] "storage_scope" = "shared";
  allocate(compute.shared, float16, [512]);
  attr [compute.shared_1: handle] "storage_scope" = "shared";
  allocate(compute.shared_1, float16, [128]);
  attr [compute.shared.wmma.matrix_a: handle] "storage_scope" = "wmma.matrix_a";
  allocate(compute.shared.wmma.matrix_a, float16, [512]);
  attr [compute.shared.wmma.matrix_b: handle] "storage_scope" = "wmma.matrix_b";
  allocate(compute.shared.wmma.matrix_b, float16, [128]);
  attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 125 {
    @tir.tvm_fill_fragment(T_dense.wmma.accumulator, 32, 8, 16, 0, 0f32, dtype=handle)
    for (k.outer.outer: int32, 0, 128) {
      for (ax0.ax1.fused.outer.outer.outer.outer: int32, 0, 16) {
        attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
        attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        compute.shared[((ax0.ax1.fused.outer.outer.outer.outer*32) + threadIdx.x)] = cast(float16, (float32*)placeholder_4[((((ax0.ax1.fused.outer.outer.outer.outer*4096) + (floordiv(threadIdx.x, 16)*2048)) + (k.outer.outer*16)) + floormod(threadIdx.x, 16))])
      }
      for (ax0.ax1.fused.outer.outer.outer.outer_1: int32, 0, 4) {
        attr [IterVar(threadIdx.z, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
        attr [IterVar(threadIdx.y, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
        attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        compute.shared_1[((ax0.ax1.fused.outer.outer.outer.outer_1*32) + threadIdx.x)] = cast(float16, (float32*)placeholder_5[(((((blockIdx.y*16384) + (ax0.ax1.fused.outer.outer.outer.outer_1*4096)) + (floordiv(threadIdx.x, 16)*2048)) + (k.outer.outer*16)) + floormod(threadIdx.x, 16))])
      }
      @tir.tvm_load_matrix_sync(compute.shared.wmma.matrix_a, 32, 8, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), compute.shared, 0, 512, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(compute.shared.wmma.matrix_b, 32, 8, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), compute.shared_1, 0, 128, 1, dtype=handle), 16, "col_major", dtype=handle)
      @tir.tvm_mma_sync(T_dense.wmma.accumulator, 0, compute.shared.wmma.matrix_a, 0, compute.shared.wmma.matrix_b, 0, T_dense.wmma.accumulator, 0, dtype=handle)
    }
    @tir.tvm_store_matrix_sync(T_dense.wmma.accumulator, 32, 8, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), compute.shared, 0, 256, 2, dtype=handle), 8, "row_major", dtype=handle)
    for (i.inner.j.inner.fused.outer.outer.outer.outer: int32, 0, 8) {
      attr [IterVar(threadIdx.z, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 1;
      attr [IterVar(threadIdx.y, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 1;
      attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      T_dense_2[((((i.inner.j.inner.fused.outer.outer.outer.outer*4000) + (floordiv(threadIdx.x, 8)*1000)) + (blockIdx.y*8)) + floormod(threadIdx.x, 8))] = (float32*)compute.shared[((i.inner.j.inner.fused.outer.outer.outer.outer*32) + threadIdx.x)]
    }
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
INFO:compile_engine:Use implementation injective.cuda for op add
primfn(placeholder_2: handle, placeholder_3: handle, T_add_1: handle) -> ()
  attr = {"global_symbol": "fused_add_25", "tir.noalias": True}
  buffers = {T_add: Buffer(T_add_2: handle, float32, [32, 1000], []),
             placeholder: Buffer(placeholder_4: handle, float32, [32, 1000], []),
             placeholder_1: Buffer(placeholder_5: handle, float32, [1000], [])}
  buffer_map = {placeholder_2: placeholder, placeholder_3: placeholder_1, T_add_1: T_add} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 32;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  if (((blockIdx.x*1024) + threadIdx.x) < 32000) {
    T_add_2[((blockIdx.x*1024) + threadIdx.x)] = ((float32*)placeholder_4[((blockIdx.x*1024) + threadIdx.x)] + (float32*)placeholder_5[floormod(((blockIdx.x*1024) + threadIdx.x), 1000)])
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
^CTraceback (most recent call last):
  File "autotvm_learning_based.py", line 358, in <module>
    acc = test_quantize_acc(config, rec_val)
  File "autotvm_learning_based.py", line 336, in test_quantize_acc
    mod, params = get_model(cfg.model, batch_size, qconfig, dataset=dataset, original=orig)
  File "autotvm_learning_based.py", line 170, in get_model
    strategy, result = hago.search_quantize_strategy(graph, hardware, dataset, tuner, ctx, target)
  File "/home/woongkyu/hago/tvm/python/tvm/hago/search.py", line 432, in search_quantize_strategy
    measure = tuner.tune(graph, hardware, dataset, ctx, target, fout)
  File "/home/woongkyu/hago/tvm/python/tvm/hago/search.py", line 235, in tune
    self.stats = analysis.collect_stats(graph, self.topology,
  File "/home/woongkyu/hago/tvm/python/tvm/hago/analysis.py", line 121, in collect_stats
    outputs = evaluate(func, dataset, ctx, target)
  File "/home/woongkyu/hago/tvm/python/tvm/hago/base.py", line 201, in evaluate
    output = runtime.get_output(i).asnumpy()
  File "/home/woongkyu/hago/tvm/python/tvm/runtime/ndarray.py", line 174, in asnumpy
    check_call(_LIB.TVMArrayCopyToBytes(self.handle, data, nbytes))
KeyboardInterrupt

(tvm-build) ]0;woongkyu@watson: ~/hago-profilewoongkyu@watson:~/hago-profile$ exit
exit

Script done on 2021-07-25 15:45:25+0900
